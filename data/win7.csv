D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\acpipagr.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\acpipmi.c ;
; AcpiPmipIoctlSetConfiguration(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\acpitime.c ;
; WaHandleAcpiSetRealTime(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\acsock64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\adp80xx.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\afd.c ;
; AfdReceiveDatagramEventCommonHandler(__int64 a1, unsigned int a2, __int64 a3, int a4, __int64 a5, ULONG SourceBytesToCopy, int a7, __int64 SourceBytesToCopya, __int64 a9, __int64 a10, int a11, int a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16)
; AfdDoWork(PDEVICE_OBJECT DeviceObject, PVOID Context)
; WskProTLCreateEndpointComplete(__int64 a1, int a2, __int64 a3, __int64 a4)
; AfdCopyMdlChainToBufferAvoidMapping(PMDL MemoryDescriptorList, ULONG a2, int a3, void *a4, unsigned int a5)
; AfdRioCleanupRegistrationDomain(__int64 a1)
; AfdRioCloseRegistrationDomain(__int64 a1)
; AfdRioCreateRegisteredBuffer(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; AfdAcquireReadLockAtDpcLevel(PKSPIN_LOCK SpinLock, __int64 a2)
; AfdReleaseReadLockFromDpcLevel(__int64 a1)
; AfdReleaseReadLock(__int64 a1, __int64 a2)
; AfdAcquireReadLock(PKSPIN_LOCK SpinLock, __int64 a2)
; AfdRioReferenceRegDomainByHandle(void *a1, KPROCESSOR_MODE a2, __int64 a3)
; AfdRioCreateRegistrationDomain(__int64 a1)
; AfdRioCreateCompletionQueue(__int64 a1, __int64 a2, void *a3, int a4, int a5, KPROCESSOR_MODE AccessMode, int a7, HANDLE Handle, __int64 a9, __int64 a10)
; AfdRioCreateCq(__int64 a1, unsigned __int64 a2, unsigned int a3, void *a4, unsigned int a5, KPROCESSOR_MODE a6)
; AfdRioCreateRqPair(__int64 a1, unsigned __int64 a2, unsigned int a3, KPROCESSOR_MODE a4)
; AfdReadPerProcCounter(__int64 a1, unsigned int a2)
; PplCreateLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, ULONG Tag, ULONG Taga)
; PnlCreateLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, ULONG Tag, int a7, __int64 Taga, __int64 a9, char a10)
; AfdCopyMdlChainToBufferAvoidMapping_filt_0(signed int **a1, __int64 a2)
; AfdRioCreateRqPair_filt_0(signed int **a1, __int64 a2)
; AfdRioCreateCq_filt_0(signed int **a1, __int64 a2)
; AfdRioCreateCq_filt_1(signed int **a1, __int64 a2)
; AfdRioCreateCompletionQueue_filt_0(signed int **a1, __int64 a2)
; AfdTdiSetDualInet(__int64 a1, unsigned __int8 a2)
; AfdTdiSetInet4Mapped(__int64 a1)
; AfdCopyCMSGBuffer(__int64 a1, unsigned __int64 a2, unsigned int a3)
; AfdCopyCMSGBuffer32(__int64 a1, __int64 a2, unsigned __int64 a3)
; WskProTLCreateConnectComplete(PIRP Irp, NTSTATUS a2, __int64 a3, __int64 a4)
; WskTdiTLHybridCreateEndpoint(__int64 a1, unsigned __int16 a2, unsigned __int16 a3, __int16 a4, __int64 a5, __int64 a6, __int64 a7)
; WskTdiTLHybridCreateEndpointComplete(__int64 a1, int a2, __int64 a3, __int64 a4)
; AfdSynchronousTlCreateRequestComplete(__int64 a1, int a2, __int64 a3, __int64 a4)
; RtlStringCbCopyNW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbSrc)
; AfdSqmSetString(__int64 a1, int a2, __int64 a3)
; AfdCopyBufferArrayToBuffer(void *Dst, unsigned int a2, __int64 a3, int a4)
; AfdCopyMdlChainToBufferArray(signed __int64 a1, unsigned int a2, SIZE_T Length, __int64 a4, unsigned int a5, unsigned int Lengtha)
; AfdCreate(PIRP Irp, __int64 a2)
; AfdSetContext(__int64 a1, __int64 a2, char a3, const void *a4, unsigned int Size, unsigned __int64 a6, unsigned int a7, LARGE_INTEGER a8)
; AfdPcwAddGlobalCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WskKnrRpcOpenBinding(__int64 a1, int a2)
; KnrNrpCreateBinding(__int64 a1, int a2)
; AfdReadSingleParameter(HANDLE KeyHandle, const WCHAR *a2, unsigned int a3)
; ReadUlongFromKey(HANDLE KeyHandle, const WCHAR *a2, __int64 a3)
; AfdSetContext_filt_0(signed int **a1, __int64 a2)
; AfdTdiCreateAO(__int64 a1, __int64 a2, signed int a3, void *a4, int a5, __int64 a6, __int64 a7, __int64 a8, char a9, __int64 a10)
; AfdTdiSetEventHandlers(__int64 a1, char a2)
; AfdFastIoRead(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; AfdSetEventHandler(struct _FILE_OBJECT *a1, int a2, __int64 a3, __int64 a4)
; AfdSetInLineMode(__int64 a1, unsigned __int8 a2)
; AfdSetSecurity(__int64 a1, int a2, void *a3)
; AfdDoMdlReadComplete(PSLIST_ENTRY ListEntry)
; AfdLRMdlReadComplete(PSLIST_ENTRY ListEntry)
; AfdMdlReadComplete(PVOID Object, __int64 a2, __int64 a3)
; AfdTPacketsBufferRead(__int64 a1, __int64 a2)
; AfdTPacketsMdlRead(__int64 a1, __int64 a2)
; AfdSanCreateHelper(PIRP Irp, __int64 a2, const UNICODE_STRING *a3)
; AfdSanFastSetServiceProcess(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, __int64 a7, __int64 a8)
; AfdWskNdkOpenAdapter(__int64 a1, unsigned int a2, unsigned int a3, __int64 a4)
; WskTdiCreateAO(__int64 a1, void *a2, __int64 a3)
; WskTdiCreateCO(int a1, __int64 a2, __int64 a3, __int64 a4)
; WskTdiFlushReadyEndpoints(__int64 a1)
; WskTdiPopulateReadyEndpoints(__int64 a1, __int64 a2)
; WskTdiSetEventHandlers(__int64 a1, __int64 a2, __int16 a3)
; WskTdiWQRoutineEndpointCreate(__int64 a1)
; AfdTliIoControlHandleSetQoS(char a1, char a2, __int64 a3, __int64 a4)
; AfdTliIoControlHandleSetQoS_filt_0(signed int **a1, __int64 a2)
; AfdSqmSetTdiFilterName(__int64 a1)
; AfdTLCreateEndpoint(__int64 Irp, __int16 a2, __int16 a3, __int64 a4, struct _IRP *Irpa, __int64 a6, __int64 a7, __int64 a8)
; AfdCompleteTLEndpCreate(PSLIST_ENTRY ListEntry, __int64 a2)
; AfdTLCreateEndpointComplete(PIRP Irp, int a2, __int64 a3, __int64 a4)
; AfdCopyMdlChainToMdlChain(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6)
; AfdSetInformation(__int64 a1, __int64 a2, char a3, unsigned __int64 a4, unsigned int a5, __int64 a6, __int64 a7, __int64 a8)
; AfdSetupReceiveDatagramIrp(PIRP Irp, PVOID SourceBuffer, ULONG SourceBytesToCopy, __int64 a4, int a5, void *Src, size_t Size, int a8, int a9, char a10)
; AfdCreateConnection(int a1, __int64 a2, char a3, int a4)
; AfdSetupAcceptEndpoint(__int64 a1, __int64 a2, __int64 a3)
; AfdTLCopyRemoteAndLocalAddresses(__int64 a1, void *a2, unsigned int a3, const void *a4, unsigned int Size, __int64 a6)
; AfdDoDatagramConnect(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned __int8 a5)
; AfdSetInformation_filt_0(signed int **a1, __int64 a2)
; AfdDoListenBacklogReplenish(__int64 a1)
; AfdJoinInviteSetup(__int64 a1, __int64 a2)
; AfdSetupConnectDataBuffers(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AfdTLResumeConnectionSetup(__int64 a1, __int64 a2, int a3)
; CopyConnectDataBuffers(__int64 a1)
; CopySingleConnectDataBuffer(__int64 a1, __int64 a2)
; AfdSaveReceivedConnectData(PVOID *a1, int a2, const void *a3, unsigned int a4)
; AfdSetConnectData(__int64 a1, int a2, PVOID VirtualAddress, __int64 Length, int a5, __int64 VirtualAddressa, ULONG Lengtha, __int64 a8)
; AfdSetConnectData_filt_0(signed int **a1, __int64 a2)
; AfdSetQos(PIRP Irp, __int64 a2)
; AfdSetQos32(__int64 a1, __int64 a2)
; AfdRestartMdlReadComplete(__int64 a1, struct _IRP *a2, void *a3)
; AfdRestartTPacketsBufferRead(__int64 a1, __int64 a2, __int64 a3)
; AfdRestartTPacketsMdlRead(__int64 a1, __int64 a2, __int64 a3)
; AfdTPacketsContinueAfterRead(__int64 a1)
; WskTdiEHReceiveDatagram(void *Src, signed int a2, __int64 a3, ULONG SourceBytesToCopy, __int64 Srca, int a6, int SourceBytesToCopya, __int64 a8, PVOID SourceBuffer, __int64 SourceBuffera, __int64 a11)
; AfdSanFastCompleteAccept(__int64 a1, unsigned __int16 a2, PVOID SourceBuffer, __int64 SourceBytesToCopy, int a5, __int64 SourceBuffera, ULONG SourceBytesToCopya, __int64 a8)
; AfdSanFastSetEvents(__int64 a1, unsigned __int16 a2, KPROCESSOR_MODE a3, unsigned __int64 a4, int a5, int a6, PVOID Object, PVOID Objecta)
; AfdSanFastSetEvents_filt_1(signed int **a1, __int64 a2)
; AfdSanFastSetEvents_filt_0(signed int **a1, __int64 a2)
; AfdSanSetAskDupeToServiceState(__int64 a1)
; AfdSanSetDupingToServiceState(__int64 a1)
; AfdOpenRegistry(UNICODE_STRING *a1, HANDLE *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\agilevpn.c ;
; AgileVpnCmCreateVc(__int64 a1, __int64 a2, __int64 a3)
; AgileVpnCmOpenAf(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BwcCreateLine(__int64 a1, __int64 a2)
; QosLineCreate(void *a1, __int64 a2, __int64 a3)
; QosTimerConvertPerformanceCounterToMicroseconds(__int64 a1, __int64 a2)
; SetInformation(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; IPsecDecryptCompleteCallback(int a1, __int64 a2, __int64 a3)
; BwcCreateFlow(__int64 a1, __int64 a2)
; BwcNblAppendNblsMoveLast(__int64 a1, __int64 a2)
; BwcSetTimer(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)
; SetAllParameters(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8)
; QosFlowCreate(void *a1)
; QosUtilSetTokenSpec(__int64 a1, __int64 a2, char a3)
; AgileVpnCreate(__int64 a1, __int64 a2)
; ReadRegistrySettings(__int64 a1, int *a2, __int64 a3)
; AgileVpnMpSetOptions(__int64 a1)
; RemoveDormantTSNodes(__int64 a1, __int64 a2)
; AgileVpnCreateTunnel@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; AgileVpnSetupWfpCallouts@<rax>(__int64 a1@<rbp>)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\AGP440.c ;
; AgpSetAperture(__int64 a1, __int64 a2, __int64 a3)
; Agp440SetGTLB_Enable(__int64 a1, char a2)
; Agp440SetRate(__int64 a1, unsigned int a2, __int64 a3)
; ApGetSetDeviceBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; AgpLibReadAgpTargetConfig(__int64 a1, __int64 a2, unsigned int a3)
; AgpLibSetAgpCapability(__int64 a1, __int64 a2, __int64 a3)
; ApSetTargetCapability(__int64 a1, __int64 a2)
; ApLegacySetBusData(__int64 a1, __int64 a2, __int64 a3)
; AgpVerifierSetTargetCapability(__int64 a1, __int64 a2)
; AgpSetEventCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; Agp440CreateGart(__int64 a1)
; AgpOpenKey(PCWSTR SourceString, void *a2, HANDLE *a3, __int64 a4)
; AgpInterfaceSetRate(__int64 a1, int a2, __int64 a3)
; AgpSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ahcache.c ;
; AhcpStoreKeySave(__int64 a1, __int64 a2)
; AhcpStoreKeyLoad(__int64 a1, __int64 a2)
; AhcStoreCreate(__int64 a1, signed __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; AhcStoreSave(__int64 a1, __int64 a2)
; AhcStoreLoad(__int64 a1, __int64 a2)
; AhcLockCreate(__int64 a1)
; AhcOpenRegKey(__int64 a1, ACCESS_MASK a2, HANDLE *a3)
; AhcReadQwordFromKey(HANDLE KeyHandle, __int64 a2)
; AhcpCacheEntryCopy(__int64 a1, __int64 a2)
; AhcpCacheEntrySave(__int64 a1, __int64 a2)
; AhcpCacheEntryLoad(__int64 a1, __int64 a2)
; AhcCacheReadRegistry(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AhcCacheSave(PERESOURCE *a1, __int64 a2)
; AhcServiceCreate(__int64 a1, __int64 a2, __int64 a3)
; AhcpMessageCreateBasic(__int64 a1, unsigned __int64 a2)
; AhcMessageCreateExe(__int64 a1, __int64 a2, __int16 a3, __int64 a4, __int64 a5, int a6)
; AhcpCdbEntryCopy(__int64 a1, __int64 a2)
; AhcpCdbEntrySave(__int64 a1, __int64 a2)
; AhcpCdbEntryLoad(__int64 a1, __int64 a2)
; AhcpCdbLoadFileTimeFromRegistry(void *Dst, __int64 a2)
; AhcCdbCreate(__int64 a1)
; AhcpCdbLoadFromPdb(__int64 a1, __int64 a2, unsigned int a3)
; AhcpCdbLoadDb(__int64 a1, __int64 a2)
; AhcDriverDispatchCreate(__int64 a1, __int64 a2)
; AhcpReadQuirkData(__int64 a1, unsigned int a2, __int64 a3)
; AhcpLoadQuirksFromDb(__int64 a1, __int64 a2)
; SdbReadWORDTag@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, __int16 a3@<r8w>, unsigned int a4@<r11d>)
; SdbReadDWORDTag@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, int a3@<r8d>, unsigned int a4@<r11d>)
; SdbReadQWORDTag@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, unsigned int a3@<r11d>)
; SdbpReadTagData@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, void *a3@<r8>, unsigned int a4@<r11d>)
; SdbpReadStringRef@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, unsigned int a3@<r11d>)
; SdbReadStringTag@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, void *a3@<r8>, unsigned int a4@<r11d>)
; SdbReadBinaryTag@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, void *a3@<r8>, unsigned int a4@<r11d>)
; SdbOpenDatabase(const WCHAR *a1)
; SdbCloseDatabaseRead(PVOID P)
; SdbpOpenAndMapDB(__int64 a1, const WCHAR *a2)
; SdbpOpenAndMapFile(PCWSTR SourceString, void *Dst)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\akw8x64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\amdk8.c ;
; AmdK8SetPerfState(__int64 a1, __int64 a2, __int64 a3)
; DoFidVidTransitionAndPollStatus(unsigned __int64 a1)
; DoFidVidTransitionAndPollStatusWithDelayAndRetry(unsigned __int64 a1)
; ReadIoMemRaw(__int64 a1)
; ReadGenAddr(__int64 a1)
; SaveDevExt(__int64 a1, unsigned int a2)
; EvtDeviceSetPower(__int64 a1, __int64 a2)
; ProcLibTraceCStateDomainRundown(__int64 a1)
; ProcLibTracePStateDomainRundown(__int64 a1)
; PepRegisterSpmSettings(__int64 a1)
; SetPerfStateIO(__int64 a1, unsigned int a2, __int64 a3)
; SetPerfStateFFH(__int64 a1, __int64 a2)
; PerfReadActualMasterCount(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PerfReadWrappingCounter(__int64 a1, char a2, __int64 a3, __int64 a4)
; CpcReadFeedback(int (*a1)(void))
; CpcReadFeedbackAcquireCallback(__int64 a1, int (*a2)(void))
; ProcLibDeviceCreate(PVOID DeferredContext)
; ValidatePerfDomainSymmetry(__int64 a1)
; DecodeAcpi2CState(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; RegisterKernelIdleDomains(__int64 a1)
; DeregisterKernelIdleDomains(__int64 a1)
; UpdateKernelIdleDomains(__int64 a1)
; InitAcpiIdleDomain(__int64 a1, __int64 a2, __int64 a3)
; InitAcpiProcessorDomains(__int64 a1)
; RegisterXsdDomain(__int64 a1)
; GetPerfDomain(__int64 a1, __int64 a2, __int64 a3)
; PepNotifyQuerySettingHandle(__int64 a1, __int64 a2)
; DecodeAcpiPStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeAcpiTStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeControlStatusRegisterIo(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\amdppm.c ;
; PerfReadWrappingCounter(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ReadGenAddr(__int64 a1)
; CpcReadFeedbackAcquireCallback(__int64 a1, int (*a2)(void))
; CpcReadFeedback(int (*a1)(void))
; SetFFHPState(__int64 a1, char a2)
; SetPerformanceBoostMode(int a1, __int64 a2)
; EvtDeviceSetPower(__int64 a1, __int64 a2)
; ProcLibTraceCStateDomainRundown(__int64 a1)
; ProcLibTracePStateDomainRundown(__int64 a1)
; ReadIoMemRaw(__int64 a1)
; PepRegisterSpmSettings(__int64 a1)
; PerfReadActualMasterCount(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SetPerfStateFFH(__int64 a1, __int64 a2)
; SetPerfStateIO(__int64 a1, unsigned int a2, __int64 a3)
; InitAcpiIdleDomain(__int64 a1, __int64 a2, __int64 a3)
; ValidateAcpiIdleDomain(unsigned int *a1, __int64 a2)
; DecodeAcpi2CState(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DeregisterKernelIdleDomains(__int64 a1)
; InitAcpiProcessorDomains(__int64 a1)
; ValidatePerfDomainSymmetry(__int64 a1)
; RegisterKernelIdleDomains(__int64 a1)
; UpdateKernelIdleDomains(__int64 a1)
; GetPerfDomain(__int64 a1, __int64 a2, __int64 a3)
; ProcLibDeviceCreate(PVOID DeferredContext)
; DecodeDoorbellAddressIo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DecodeDoorbellAddressMemory(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeregisterIdleDomain(__int64 a1, __int64 a2)
; InitAcpiThrottleDomain(__int64 a1)
; RegisterXsdDomain(__int64 a1)
; PepNotifyQuerySettingHandle(__int64 a1, __int64 a2)
; DecodeAcpiPStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeAcpiTStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeControlStatusRegisterIo(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\amdsata.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\amdsbs.c ;
; mccSaveReqInfo(struct _cc_def *a1, struct req *a2)
; CamALPEPortToOpenALP(struct _ATA_PORT *a1)
; CamPmReadPSCR1ErrorDone(void *a1, struct _CAM_ATATASK *a2)
; CamPmReadERRORInfoDone(void *a1, struct _CAM_ATATASK *a2)
; CamCheckSigReadyRoutine(void *a1, void *a2, void *a3)
; CamDeviceReady(struct _CAM_DEVICE *a1)
; CamCheckDevReadyRoutine(void *a1, void *a2, void *a3)
; CamCheckPHYReadyRoutine(void *a1, void *a2, void *a3)
; CamAtaDoTagCommand(struct _CAM_DEVICE *a1, struct _CAM_ATATASK *a2)
; CamAhciSaveRestorePortSpeed(struct _CAM_COMPONENT_EXTENSION *a1, int a2)
; EXP_CAM_DIMMRead(void *a1, void *a2, unsigned int a3, unsigned int a4)
; CamAhciCheckDeviceReady(struct _CAM_DEVICE *a1)
; CamAhciSetCommListOverride(struct _ATA_PORT *a1)
; DM_AvlDataCopy(struct _DM *a1, void **a2, void **a3)
; GenTaskDirectlyFromMapWithLoadBalancing(struct _RaidEngine *a1, struct seq *a2, struct array *a3, struct map *a4, unsigned __int8 a5, struct _StripeLines *a6, struct _StripeLines *a7)
; GenDoubleTaskDirectlyFromMap(struct _RaidEngine *a1, struct seq *a2, struct array *a3, struct map *a4, unsigned __int8 a5, int a6, struct _StripeLines *a7, struct req *a8)
; SetArrayConfig(struct _RaidEngine *a1, struct req *a2)
; bgaQuickInitDone(struct _RaidEngine *a1, struct seq *a2)
; bgaFullInitForeLoopDone(struct _RaidEngine *a1, struct seq *a2)
; bgaMigrationReadDone(struct _RaidEngine *a1, struct seq *a2)
; bgaMigrationWriteDone(struct _RaidEngine *a1, struct seq *a2)
; bgaMigrationLoopDone(struct _RaidEngine *a1, struct seq *a2)
; EngBgaMigrationReadSectorSkipped(__int64 a1, unsigned __int8 a2, __int64 a3, unsigned __int16 a4)
; GetPhysicalDriveSetting(struct _RaidEngine *a1, __int64 a2, struct _PHYSICAL_DRIVE_SETTING *a3)
; ControllerSettingChangeEvent(struct _RaidEngine *a1, struct req *a2)
; ccmdSetGlobalConfig(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; MakeStreamTemporarilyDown(struct _RaidEngine *a1, unsigned __int8 a2, int a3, unsigned __int8 a4, struct TempDownContext *a5)
; blMarkStreamTempAccessDone(struct _RaidEngine *a1, struct seq *a2)
; AccessErrorFixDone(struct _RaidEngine *a1, struct seq *a2)
; SetupOsAccess(struct _RaidEngine *a1, struct req *a2, struct TempDownContext *a3)
; scsiRead10(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; scsiReadCapacity(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; OsReadVerifyAccessOnTaskError(struct _RaidEngine *a1, struct req *a2, struct dtask *a3)
; scsiReadCapacity16(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; CreateNonDMASafeQueue(struct _RaidEngine *a1, __int64 a2, int a3, int a4)
; SetArrayStatus(struct _RaidEngine *a1, unsigned __int8 a2)
; EngSetBlockDown(struct _RaidEngine *a1, __int64 a2, unsigned __int8 a3)
; EngSetDiskDown(struct _RaidEngine *a1, char a2, int a3, int a4)
; TranslateToACMDSaveMDD(struct _RaidEngine *a1, struct req *a2, char a3, int a4)
; bWillThisDiskDownResultAnyArrayOffline(struct _RaidEngine *a1, char a2)
; SetMappingMode(struct _RaidEngine *a1, struct array *a2)
; CreateDiskBitmapForArray(struct _RaidEngine *a1, unsigned __int8 a2)
; pGenerateReadWriteReq(struct _RaidEngine *a1, __int64 a2, char a3, unsigned int a4, unsigned __int32 a5, unsigned __int16 a6)
; UpdateReadWriteReq(struct req *a1, unsigned int a2, int a3, unsigned __int16 a4)
; CopyPRD(struct _SG64 **a1, struct _SG64 **a2, int a3, unsigned int a4)
; V2MDD_UpdateDataDone(struct _RaidEngine *a1, __int64 a2, char a3, __int64 a4, unsigned __int16 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, unsigned __int8 a12)
; blCopyMemoryFromDimmToLocal(struct _RaidEngine *a1, struct seq *a2)
; blCopyMemoryFromLocalToDimm(struct _RaidEngine *a1, struct seq *a2)
; blEndSaveMDD(struct _RaidEngine *a1, struct seq *a2)
; blUpdateDiskMDDDone(struct _RaidEngine *a1, struct seq *a2, __int64 a3)
; blSaveDiskMDDReadErrorCheckPoint(struct _RaidEngine *a1, struct seq *a2)
; SaveDiskMDD(struct _RaidEngine *a1, struct seq *a2)
; blUpdateBlockIDForDiskMDDSave(struct _RaidEngine *a1, struct seq *a2)
; ccmdSaveDiskMDDOnTaskError(struct _RaidEngine *a1, struct req *a2, struct dtask *a3)
; ccmdSaveDiskMDD(struct _RaidEngine *a1, struct req *a2)
; DebuggingReadDone(struct _RaidEngine *a1, struct seq *a2)
; DebuggingReadWriteBlocks(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; DebuggingReadLongDone(struct _RaidEngine *a1, struct seq *a2)
; blDebuggingWriteReadDimmUpdate(struct _RaidEngine *a1, struct seq *a2)
; blDebuggingWriteReadDimmCheckCRC(struct _RaidEngine *a1, struct seq *a2)
; DebuggingWriteReadDimm(struct _RaidEngine *a1, struct req *a2)
; EXP_ENG_GetDiskIDofJBOD(void *a1, unsigned __int8 a2)
; EngSetJBODDefaultAryName(struct _RaidEngine *a1, unsigned __int8 a2, struct array *a3)
; blPrepareReadConfig(struct _RaidEngine *a1, struct seq *a2)
; blInitSetDiskWriteCache(struct _RaidEngine *a1, struct seq *a2)
; ReadDiskConfig(struct _RaidEngine *a1, struct seq *a2)
; ConstructRaidReadyStructure(struct _RaidEngine *a1, unsigned __int8 a2, struct block *a3)
; ccmdInitConfigDone(struct _RaidEngine *a1, struct req *a2, int a3)
; blQuickInitDone(struct _RaidEngine *a1, struct seq *a2)
; ccmdCreateArrayHelper(struct _RaidEngine *a1, struct req *a2, unsigned __int8 a3, struct seq *a4)
; CreateNecessaryExtentsForLD(struct _RaidEngine *a1, struct _CREATE_LD_PARAM *a2, unsigned __int8 *const a3, int *a4)
; CreateDiskMapForLDCreation(struct _RaidEngine *a1, struct _CREATE_LD_PARAM *a2, unsigned __int32 *a3, unsigned __int8 *a4)
; ccmdCreateJBOD(struct _RaidEngine *a1, struct req *a2, struct _CREATE_LD_PARAM *a3)
; ccmdCreateArray(struct _RaidEngine *a1, struct req *a2, __int64 a3)
; SGTableAppendItem(struct _SGTABLE *a1, __int64 a2, int a3, char a4)
; SGTableCopy(struct _SGTABLE *a1, struct _SGTABLE *a2, unsigned int a3)
; EXP_OSD_SetAsyncNotificationDetected(void *a1)
; EXP_OSD_PciReadByOffset(void *a1, unsigned __int8 a2)
; OSDI_ReadRegistrySettings(struct _UNICODE_STRING *a1)
; SaveBackupRecord(void *a1, struct req *a2)
; SaveMDDRecord(void *a1, struct req *a2)
; SaveS4StateMDDRecord(void *a1, struct req *a2)
; SetingDtaskCmd(struct _OSD_COMP_EXTENSION *a1, struct _SCSI_REQUEST_BLOCK *a2, char a3, unsigned __int8 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\amdxata.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\appid.c ;
; AiRegReadQwordValue(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AiRegReadBinaryValue(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; AiSetCacheEaFile(__int64 a1, __int64 a2)
; AiSetHashInfoInCache(__int64 a1, __int64 a2, const void *a3)
; SymCryptSha1AppendBlocksAsm(__int64 a1, unsigned __int64 a2, __int64 a3)
; AipCreateDispatch(__int64 a1, __int64 a2)
; AiSetEnabledAttributes(__int64 a1, __int64 a2)
; AipCreateProcessNotifyRoutine(void *a1, __int64 a2, __int64 a3, __int64 a4)
; SrpDoesPolicyApply(void *a1, __int64 a2)
; AipNtPathToDosPath(__int64 a1, __int64 a2, __int64 a3)
; AipSetTrustedPublisherNameInCache(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AiReadFile(void *a1, unsigned int a2, void *a3, ULONG a4)
; AipkReadRegCache(size_t Size, __int64 a2)
; AipkConvertCacheEntryToTokenAttributes(__int64 a1, __int64 a2)
; AiSetTokenAttributes(__int64 a1, __int64 a2)
; AiLicReadIntegerValue(__int64 a1, __int64 a2)
; SrpLoadPolicy(__int64 a1)
; AiRegOpenKey(__int64 a1, __int64 a2, ACCESS_MASK a3, HANDLE *a4)
; AiRegReadStringValue(__int64 a1, __int64 a2, UNICODE_STRING *a3, __int64 a4)
; AiConvertFullImagePathToMacroFormat(__int64 a1, __int64 a2, __int64 a3, __m128i *a4, __int64 a5, int a6, int a7)
; AipConvertToNtPath(unsigned __int16 *a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\arcsas.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\asyncmac.c ;
; MpSetInfo(__int64 a1, __int64 a2, __int64 a3)
; AsyncSetLinkInfo(__int64 a1)
; AsyncStartReads(__int64 a1)
; SetSerialTimeouts(__int64 a1)
; AsyncPPPRead(__int64 a1)
; DoDerefAdapterDataBlockWork(__int64 a1)
; AsyncMpSetOptions(__int64 a1)
; DoDerefAfSapCBWork(__int64 a1)
; AsyncCmOpenAf(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\atapi.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ataport.c ;
; AtaPortRegistryRead(__int64 a1, char a2, char a3, __int64 a4, char a5, __int64 a6, __int64 a7)
; AtaPortReadPortUchar(unsigned __int16 a1)
; AtaPortConvertPhysicalAddressToUlong(unsigned int a1)
; AtaPortConvertUlongToPhysicalAddress(__int64 a1)
; AtaPortReadPortBufferUchar(unsigned __int16 a1, unsigned __int8 *a2, unsigned int a3)
; AtaPortReadPortBufferUlong(unsigned __int16 a1, unsigned int *a2, unsigned int a3)
; AtaPortReadPortBufferUshort(unsigned __int16 a1, unsigned __int16 *a2, unsigned int a3)
; AtaPortReadPortUlong(unsigned __int16 a1)
; AtaPortReadPortUshort(unsigned __int16 a1)
; AtaPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterUchar(__int64 a1)
; AtaPortReadRegisterUlong(__int64 a1)
; AtaPortReadRegisterUshort(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\AthDfu.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BasicDisplay.c ;
; CopyBits32_32(struct _BLT_INFO *a1, const struct _BLT_INFO *a2, unsigned int a3, const struct tagRECT *a4)
; CopyBitsTo_4(struct _BLT_INFO *a1, const struct _BLT_INFO *a2, __int64 a3, const struct tagRECT *a4, unsigned __int8 a5)
; CopyBitsGeneric(struct _BLT_INFO *a1, const struct _BLT_INFO *a2, unsigned int a3, const struct tagRECT *a4)
; VgaRegSetVGADisplay12h(unsigned __int32 *const a1, __int64 a2, __int64 a3, __int64 a4)
; DlpLoadDxgkrnl(PFILE_OBJECT *FileObject, PDEVICE_OBJECT *DeviceObject)
; BASIC_DISPLAY_DRIVER::SetPowerState(BASIC_DISPLAY_DRIVER *this, __int64 a2, __int64 a3, __int64 a4)
; BddDdiSetPowerState(void *this, __int64 a2, __int64 a3, __int64 a4)
; BddDdiSetPointerPosition(void *const a1, const struct _DXGKARG_SETPOINTERPOSITION *a2, __int64 a3, __int64 a4)
; BddDdiSetPointerShape(void *const a1, const struct _DXGKARG_SETPOINTERSHAPE *a2, __int64 a3, __int64 a4)
; BddDdiSetVidPnSourceVisibility(void *const a1, const struct _DXGKARG_SETVIDPNSOURCEVISIBILITY *a2, __int64 a3, __int64 a4)
; BASIC_DISPLAY_DRIVER::SetVidPnSourceVisibility(BASIC_DISPLAY_DRIVER *this, const struct _DXGKARG_SETVIDPNSOURCEVISIBILITY *a2, __int64 a3, __int64 a4)
; BASIC_DISPLAY_DRIVER::SetSourceModeAndPath(BASIC_DISPLAY_DRIVER *this, const struct _D3DKMDT_VIDPN_SOURCE_MODE *a2, const struct _D3DKMDT_VIDPN_PRESENT_PATH *a3, __int64 a4)
; BASIC_DISPLAY_DRIVER::SetPointerPosition(BASIC_DISPLAY_DRIVER *this, const struct _DXGKARG_SETPOINTERPOSITION *a2, __int64 a3, __int64 a4)
; BASIC_DISPLAY_DRIVER::SetPointerShape(BASIC_DISPLAY_DRIVER *this, const struct _DXGKARG_SETPOINTERSHAPE *a2, __int64 a3, __int64 a4)
; BiosSetDisplayMode(unsigned __int16 a1)
; BiosSetPowerState(enum _DEVICE_POWER_STATE a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BasicRender.c ;
; WarpKMCreateAllocation(__int64 a1, __int64 a2)
; WarpKMOpenAllocation(__int64 a1, __int64 a2)
; WarpKMCreateDevice(__int64 a1, __int64 a2)
; WarpKMCreateContext(__int64 a1, __int64 a2)
; WARPKMDEVICE::SetupUmPresentData(WARPKMDEVICE *this, struct _DXGKARG_PRESENT *a2)
; DlpLoadDxgkrnl(PFILE_OBJECT *FileObject, PDEVICE_OBJECT *DeviceObject)
; WARPKMALLOCATION::OpenPrimaryFlipEvents(WARPKMALLOCATION *this, void **a2, void **a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\battc.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bcmfn2.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\beep.c ;
; BeepOpen(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bowser.c ;
; BowserCopyOemComputerName(void *a1, const void *a2, unsigned int a3, int a4)
; BowserForEachTransportInDomain(__int64 a1, int (__fastcall *a2)(_QWORD, _QWORD), __int64 a3)
; BowserCreateTransportName(__int64 a1, __int64 a2)
; RtlStringCbCopyNA(char *pszDest, size_t cbDest, const char *pszSrc, size_t cbSrc)
; RtlStringCbCopyA(char *pszDest, size_t cbDest, const char *pszSrc)
; BowserCreateAdminSecurityDescriptor(void *a1)
; BowserDeleteDefaultDomainNames(__int64 a1, const UNICODE_STRING *a2)
; BowserRenameDomain(unsigned __int64 a1, unsigned int a2)
; OpenIpxSocket(PHANDLE FileHandle, PVOID *Object, __int64 a3, UNICODE_STRING *a4)
; BowserCreateDomain(__int64 a1, __int64 a2)
; BowserSetDomainName(__int64 a1, __int64 a2)
; BowserConvertType3IoControlToType2IoControl(__int64 a1, __int64 a2)
; AsyncCreateTransportName(PVOID StartContext@<rcx>, __int64 a2@<rbp>)
; BowserFindDomain(__int64 a1)
; BowserFsdCreate(__int64 a1, __int64 a2)
; BowserOpenNetbiosAddress(__int64 a1, __int64 a2)
; BowserDereferenceDomain(PVOID P)
; BowserProcessDomainAnnouncement(__int64 a1)
; BowserSetElectionCriteria(__int64 a1)
; BowserPrimeDomainTableWithOtherDomains(__int64 a1)
; BowserEnumerateNamesInDomain(__int64 a1, __int64 a2, void *a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; BowserpTdiSetEventHandler(__int64 a1, struct _FILE_OBJECT *a2, __int64 a3, __int64 a4, __int64 a5)
; BowserNetlogonCopyMessage(__int64 a1, __int64 a2)
; BowserCopyPnp(__int64 a1, int a2, __int64 a3, __int64 a4, int a5)
; BowserHandleDomainAnnouncement(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; BowserHandleIpxDomainAnnouncement(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; BowserReadBowserConfiguration(UNICODE_STRING *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bridge.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BtaMPM.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_a2dp.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_avdt.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_flt.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_hcrp.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_lwflt.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btath_rcp.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\btfilter.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BthAvrcpTg.c ;
; BthAvrcpCreateDispatch(__int64 a1, __int64 a2)
; BthAvrcpSetOutputReport(__int64 a1, __int64 a2, void *a3, __int64 a4)
; BthAvrcpReadReport(__int64 a1, __int64 a2)
; BthAvctReadComplete(__int64 a1, __int64 a2, __int64 *a3)
; l2capChannelRemoteOpen(__int64 a1, __int64 a2, __int64 a3)
; l2capChannelLocalOpen(__int64 a1)
; l2capChannelOpenCompletion(__int64 a1, __int64 a2, __int64 a3)
; AppendNodeUint16(__int64 a1, __int64 a2, unsigned __int16 a3)
; AppendNodeUuid16(__int64 a1, __int64 a2, unsigned __int16 a3)
; CreateSdpRecord(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bthenum.c ;
; RtlStringCbCopyNExW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbSrc, wchar_t **ppszDestEnd, size_t *pcbRemaining, unsigned __int32 dwFlags)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; BthDispatchCreate(__int64 a1, __int64 a2)
; IoCompletionSetEvent(__int64 a1, __int64 a2, struct _KEVENT *a3)
; IoCompletionForOpenChannelSuccess(__int64 a1, __int64 a2, __int64 a3)
; BthEnumEnumerateWWSettings(__int64 a1, __int64 a2, __int64 a3)
; BthEnumSetPdoInterfaceProperties(__int64 a1, __int64 a2)
; BthEnumSetDevicePdoProperties(__int64 a1, __int64 a2)
; BthEnumSetDefaultCapabilities(__int64 a1, __int64 a2)
; BthOpenKey(__int64 a1, const WCHAR *a2, HANDLE *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bthhfenum.c ;
; Bus_EvtDeviceFileCreate(__int64 a1, __int64 a2, __int64 a3)
; WdfIoTargetCreateAndFormatRequestForBrb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; BthIoctlSetServiceEvents(__int64 a1, __int64 a2)
; BypassIoctlSetXxxVolume(__int64 a1, __int64 a2, __int64 a3, volatile signed __int32 *a4, __int64 a5)
; BypassIoctlSetSpeakerVolume(__int64 a1, __int64 a2, __int64 a3)
; BypassIoctlSetMicVolume(__int64 a1, __int64 a2, __int64 a3)
; ScoOpenCompletionRoutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ScoCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ScoChannelOpen(__int64 a1, __int64 a2, __int16 a3)
; Bus_CreatePdo(__int64 a1, int a2, const WCHAR *a3, int a4)
; ScoStreamOpenRequest(__int64 a1, __int64 a2)
; Bus_EvtStdDataSetItem(__int64 a1, int a2, unsigned int a3, int *a4)
; Bus_EvtStdDataSetInstance(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BthhfHid.c ;
; InterlockedDecrementWithZeroEvent(volatile __int32 *a1, struct _KEVENT *a2)
; HfHidReadBthDeviceInfo(struct WDFDEVICE__ *a1, struct _BTH_DEVICE_INFO *a2)
; HfHidSetOutputReport(struct WDFREQUEST__ *a1)
; StringCbCopyExA(char *a1, __int64 a2, const char *a3, char **a4, unsigned __int64 *a5, unsigned __int32 a6)
; OnCallSetup(struct _DEVICE_CONTEXT *a1, __int64 a2, __int64 a3)
; HfHidCallSetupOutput(struct WDFREQUEST__ *a1, unsigned __int8 *a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BthLEEnum.c ;
; BthLEEnumSetWWForDevice(__int64 a1, __int64 a2, unsigned int a3)
; BthLEEnumSetCPRefCountForDevice(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthLEEnumDeviceFdoDrainAttReadQueues(__int64 a1)
; BthLEEnumDeviceFdoHandleReadGattEvent(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)
; BthLEEnumEventReadContextCleanup(__int64 a1)
; BthLEEnumDeviceFdoHandleReadQueueActivate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthLEEnumDeviceSetScanParameters(__int64 a1, __int64 a2, char a3)
; BthLEEnumAttCacheReadCharacteristicValueCache(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumAttCacheReadDescriptorValueCache(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumEvtServiceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumServicePdoFileCreate(__int64 *a1, __int64 a2, __int64 a3)
; BthLEGattCreateServiceItemFromPdu(void *a1, unsigned __int16 a2, char a3, __int64 a4, void *a5)
; BthLEGattCreateServiceItem(__int64 a1, unsigned __int16 a2, unsigned __int16 a3, __int64 a4)
; BthLEGattCreateIncludedServiceItemFromLongPdu(__int16 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
; BthLEGattCreateIncludedServiceItemFromShortPdu(void *a1, char a2, __int64 a3, __int64 a4, void *a5)
; BthLEGattCreateIncludedServiceItem(__int16 a1, __int16 a2, __int64 a3)
; BthLEGattCreateCharacteristicItemFromPdu(__int16 a1, unsigned __int16 a2, unsigned __int8 a3, __int64 a4, __int64 a5)
; BthLEGattCreateCharacteristicItem(__int16 a1, __int64 a2, unsigned __int16 a3, char a4, char a5, int a6, char a7, int a8, char a9, int a10, char a11, int a12, __int64 Dst)
; BthLEGattCreateDescriptorItem(unsigned __int16 a1, unsigned __int16 a2, __int64 a3, unsigned __int16 a4, __int64 a5)
; BthLEGattCreateCharacteristicValue(unsigned __int16 a1, const void *a2, __int64 a3)
; BthLEGattCreateDescriptorValueFromPdu(__int64 a1, signed __int16 a2, __int64 a3, __int64 a4)
; BthLEGattCopyDescriptorValue(__int64 a1, __int64 a2)
; BthLEGattAttributeMapCopy(__int64 a1, __int64 a2)
; BthLEEnumGattServerHandleReadByGroupTypeRequest(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumGattServerHandleReadByTypeRequest(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumGattServerHandleReadRequest(__int64 a1, __int64 a2, __int64 a3)
; BthLEEnumGattServerHandleRead_Name(__int64 a1, __int64 a2, __int16 a3, __int64 a4)
; BthLEEnumGattServerHandleRead_Appearance(__int64 a1, __int64 a2, __int16 a3, __int64 a4)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; BthLELib_AttReadGuidFromByteStream(__int64 a1, unsigned __int16 a2, unsigned __int16 a3, void *a4)
; BthLELib_AttAttributePDUvalidateReadTypeRequest(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadTypeResponse(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadResponse(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadBlobResponse(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadMultipleRequest(__int64 a1, signed __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadMultipleResponse(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadGroupRequest(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUvalidateReadGroupResponse(__int64 a1, unsigned __int16 a2, __int64 a3)
; BthLELib_AttAttributePDUcreateStreamReadTypeRequest(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; BthLELib_AttAttributePDUcreateStreamReadTypeResponse(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; BthLELib_AttAttributePDUcreateStreamReadMultipleRequest(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; BthLELib_AttAttributePDUcreateStreamReadGroupRequest(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; BthLELib_AttAttributePDUcreateStreamReadGroupResponse(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; BthLEEnumDeviceFdoReadRegistrySettings(__int64 a1)
; BthLEEnumAttCacheOpen(__int64 a1, unsigned int a2, __int64 a3)
; BthLEEnumAttCacheRead(__int64 a1)
; BthLEEnumDeviceSetProperties(__int64 a1, __int64 a2, char a3)
; BthLEEnumEvtDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; BthLEAttReadByType(__int64 a1, int a2, __int16 a3, __int16 a4)
; BthLEAttRead(__int64 a1, int a2, __int16 a3, __int64 a4)
; BthLEAttReadBlob(__int64 a1, int a2, __int16 a3, __int16 a4)
; BthLEAttReadByGroupType(__int64 a1, int a2, __int16 a3)
; BluetoothGATTSetCharacteristicValue(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; BluetoothGATTSetDescriptorValue(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; BthLEGattSetCharacteristicValue(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthLEGattSetDescriptorValueInternal(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, int a6)
; BthLEEnumSPReadStoredSettings(__int64 a1)
; BthLEEnumSPWriteStoredSettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bthmodem.c ;
; IoCompletionSetEvent(__int64 a1, __int64 a2, struct _KEVENT *a3)
; BthModemCreate(__int64 a1, __int64 a2)
; QueueOrStartRead(__int64 a1, __int64 a2, KIRQL a3, __int64 a4)
; BthModemInitializeRead(__int64 a1, __int64 a2)
; BthModemStartRead(__int64 a1, __int64 a2)
; BthModemRead(__int64 a1, __int64 a2)
; ReadStartRoutine(__int64 a1, __int64 a2)
; ReadCancelRoutine(__int64 a1, __int64 a2)
; ReadPurge(__int64 a1, int a2)
; LockedMemoryCopy(KSPIN_LOCK *a1, void *a2, const void *a3, unsigned int a4)
; SdpInterlockedDecrement(volatile signed __int32 *a1)
; BthCreateRfcommCommandIrp(struct _FILE_OBJECT *a1, PVOID P, __int64 a3, __int64 a4, __int64 a5, PVOID Pa)
; SetEventCompletion(__int64 a1, __int64 a2)
; BthCreateAddress(__int64 a1, __int64 a2)
; BthCreateConnectionForAddress(__int64 a1, __int64 a2, PVOID *a3)
; CreateSdpRecord(__int64 a1, __int16 a2, const WCHAR *a3, char a4, PLARGE_INTEGER Timeout)
; CreateTdiLink@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, struct _OBJECT_HANDLE_INFORMATION *a4@<rsi>, __int64 a5@<r8>, HANDLE a6@<r9>, __int64 a7, __int64 a8, int a9, int a10, int a11, int a12, int a13)
; BthSetEventHandler(PVOID Object, __int64 a2, __int64 a3, __int64 a4)
; CreateBufferPool(CCHAR StackSize, ULONG Length, unsigned int a3)
; BthFindAndOpenInterface(__int64 a1, __int64 a2, __int64 a3, int a4)
; SdpCreateNodeUInt16_P(__int16 a1)
; SdpAppendNodeToContainerNode(__int64 a1, __int64 a2)
; SdpCreateNodeUInt8(char a1)
; SdpCreateNodeUUID16(__int16 a1)
; SdpCreateNodeString(void *Src, size_t Size)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bthpan.c ;
; MpSetInformation(__int64 a1, __int64 a2)
; MpSetInformationEpilogue(__int64 a1, int a2)
; BthpanDcbCreate(__int64 a1)
; BthpanCcbCreate(__int64 a1, __int64 a2, __int64 a3)
; BthpanCountOpenCcbs(__int64 a1)
; BthpanCcbCallbackCopyEnumSpecific(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthpanCcbCallbackOpenCcbCount(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthpanAdapCallbackCopyEnumSpecific(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthpanConfigLoad(__int64 a1, __int64 a2)
; BthpanConfigSet(__int64 a1, __int64 a2, __int64 a3)
; BthpanDcbPowerStateSet(__int64 a1, int a2, __int64 a3)
; SdpSetDefaults(__int64 a1, int a2, __int16 a3, __int64 a4, __int64 a5)
; SdpCreateUtf8StringNodeFromUnicode(__int64 a1, __int64 a2, __int64 a3)
; BrbBuildOpenChannel(__int64 a1, void *a2, __int64 a3, __int16 a4, char a5, __int16 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10)
; RegOpenDeviceKey(PDEVICE_OBJECT DeviceObject, __int64 a2)
; RegReadValue(HANDLE KeyHandle, PUNICODE_STRING ValueName, unsigned int a3, void *a4, __int64 a5)
; RegReadValueUint32(HANDLE KeyHandle, PUNICODE_STRING ValueName, void *a3)
; RegReadValueString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; BnepDataHdrConvertBnepToEth(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; BnepDataPacketConvertBnepToEth(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, int a5, __int64 a6)
; BnepDataPacketConvertEthToBnep(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; BnepFilterNetTypeSetTimeout(__int64 a1, __int64 a2)
; BnepFilterNetTypeSetProcess(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; BnepFilterNetTypeSetIssue(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BnepFilterMulticastSetTimeout(__int64 a1, __int64 a2)
; BnepFilterMulticastSetProcess(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; BnepFilterMulticastSetIssue(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BnepSetupConnectionRequestIssue(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BnepSetupConnectionRequestProcess(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; BnepSetupConnectionRequestValidate(__int64 a1, int a2, int a3, __int64 a4)
; BnepSetupConnectionResponseTimeout(__int64 a1, __int64 a2)
; BnepSetupConnectionResponseIssue(__int64 a1, __int16 a2, __int64 a3, __int64 a4)
; BnepSetupConnectionResponseProcess(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; BnepUuidRead(unsigned int *a1, __int64 a2, char a3)
; SdpInterlockedDecrement(volatile signed __int32 *a1)
; SdpCreateNodeUInt32(int a1)
; SdpCreateNodeUUID16(__int16 a1)
; SdpCreateNodeString(void *Src, size_t Size)
; SdpCreateNodeUInt16_P(__int16 a1)
; SdpAppendNodeToContainerNode(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bthport.c ;
; BthCreateAuthenticateClient(__int64 a1, __int64 a2, __int64 a3, int a4)
; BthDispatchCreate(__int64 a1, __int64 a2)
; BthDoesRequestHaveServiceClassPrivilege(__int64 a1)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; RM_SetRadioStateOff(__int64 a1, __int64 a2)
; RM_SetRadioStateOn(PVOID Context, __int64 a2)
; RM_SetRadioState(PVOID Context, PVOID Tag)
; DevicePowerDownRequestComplete(PDEVICE_OBJECT DeviceObject, __int64 MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; SdpL2cap_SendOpenChannelBrb(__int64 a1, char a2, __int16 a3)
; SdpL2cap_OpenChannelComplete(__int64 a1, __int64 a2, __int64 a3)
; SdpL2cap_DenyOpenChannelComplete(__int64 a1, __int64 a2, __int64 a3)
; SdpL2cap_ReadAsyncCompletion(__int64 a1, __int64 a2, __int64 a3)
; SdpL2cap_IsChannelOpen(__int64 a1, signed int a2, __int64 a3)
; SdpL2cap_ReadAsync(__int64 a1)
; SdpClient_SetLastError(__int64 a1, __int64 a2)
; SdpDB_CreateAndAddDIDRecord(__int64 a1, __int64 a2)
; HCI_CrackAclRead(__int64 a1, __int64 a2)
; HCI_TossAndMarkAclReadUnstable(__int64 a1, __int64 a2, __int64 a3, int a4)
; HCI_ProcessAclRead(__int64 a1, __int64 a2)
; HCI_ProcessAclReadBip(__int64 a1, __int64 *a2, __int64 a3)
; HCI_PurgeReadPkts(__int64 a1, __int64 a2)
; HCI_DoCmdCompletion(__int64 a1, __int64 a2, __int64 a3, int a4)
; HCI_DoDisconnectEx(__int64 a1, __int16 a2, char a3, int a4, __m128i *a5)
; HCI_CxnSetStateLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; HCI_CxnSetInfoLocked(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; HCI_CxnSetInfo(__int64 a1, __int64 a2, unsigned int a3)
; HCI_CxnCreateSSPClient(__int64 a1)
; HCI_CreateACLConnectionCallback(__int64 a1, __int64 a2, __int64 a3)
; Hci_CxnReadRemoteSupportedFeatureOpCallback(__int64 a1, __int64 a2, __int64 a3)
; Hci_CxnReadRemoteSupportedFeatureOp(__int64 a1, __int64 a2)
; Hci_CxnReadRemoteHostSupportedFeatureOpCallback(__int64 a1, __int64 a2, __int64 a3)
; Hci_CxnReadRemoteHostSupportedFeatureOp(__int64 a1, __int64 a2, __int64 a3)
; Hci_CxnReadRSSIOpCallback(__int64 a1, __int64 a2, __int64 a3)
; Hci_CxnReadRSSIOp(__int64 a1, __int64 a2)
; HCI_CxnReadClockOffset(__int64 a1, __m128i *a2)
; HCI_CreateConnection(__int64 a1, __int64 a2, __int64 a3, int a4, __m128i *a5)
; Fn_EVENT_ReadClockOffsetComplete(__int64 a1, unsigned __int16 *a2, __int64 a3, __int64 a4)
; Fn_CC_Write_Link_Policy_Settings(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Fn_CC_Read_Transmit_Power_Level(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __m128i *a5)
; Fn_CC_Read_Link_Supervision_Timeout(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Fn_CC_Read_RSSI(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Fn_EVENT_QoSSetupComplete(__int64 a1, __int64 a2, __int64 a3)
; HCI_pSetAutomaticFlushTimeoutCallback(__int64 a1, __int64 a2, __int64 a3)
; HCI_pSetAutomaticFlushTimeout(__int64 a1, __int64 a2, __int64 a3)
; HCI_SetAutomaticFlushTimeout(__int64 a1, __int64 a2, __int64 a3)
; HCI_DibCreate(__int64 a1, __int64 a2)
; HCI_DibSetFlags(__int64 a1, int a2, char a3)
; HCI_CopyDeviceInfoV1(__int64 a1, __int64 a2)
; HCI_CopyDeviceInfoV3(__int64 a1, __int64 a2)
; HCI_SetWWIrpForDevice(__int64 a1, __int64 a2, int a3)
; HCI_SetCPReferenceForDevice(__int64 a1, __int64 a2, int a3)
; HCI_SetLEScanParametersEx(__int64 a1, char a2, char a3, char a4)
; HCI_SetLEScanEx(__int64 a1, int a2, char a3, char a4)
; HCI_DibLESetParameter(__int64 a1, __int64 a2, __int64 a3)
; HCI_EirSetProximityPeerInfo(__int64 a1, __int64 a2)
; Fn_CC_Read_Inquiry_Response_Transmit_Power_Level(__int64 a1, __int64 a2, __int64 a3)
; HCI_Create(__int64 a1)
; Fn_CC_Read_BD_ADDR(__int64 a1, __int64 a2, __int64 a3)
; HCI_PowerDownRequestComplete(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; HCI_PrepareToPowerDown(__int64 a1, __int64 a2)
; HCI_RequestPowerDown(__int64 a1)
; HCI_BipPrepareDevicePowerDownComplete(PVOID Tag)
; HCI_SetRemoteWakeEnabled(__int64 a1, __int64 a2)
; HCI_IsDevicePowerDownSupported(__int64 a1)
; HCI_IsDevicePowerDownEnabled(__int64 a1)
; HCI_SetDevicePowerDownEnabled(__int64 a1, unsigned __int8 a2)
; HCI_SetWaitWakeIrp(__int64 a1, __int64 a2, int a3)
; Fn_EVENT_LEReadRemoteUsedFeaturesComplete(__int64 a1, unsigned __int16 *a2, __int64 a3, __int64 a4)
; Fn_CC_LE_Read_Buffer_Size(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_LE_Read_Advertising_Channel_Tx_Power(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_LE_Read_White_List_Size(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_LE_Read_Local_Supported_Features(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_LE_Read_Supported_States(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_LE_Read_Channel_Map(__int64 a1, unsigned __int16 *a2, __int64 a3, __int64 a4)
; HciLECxn_CreateConnectionCallback(__int64 a1, void *a2, __int64 a3)
; HciLECxn_CreateConnectionCancelCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLECxn_ReadRemoteVersionInfoCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLECxn_ReadRemoteVersionInfoOp(__int64 *a1)
; HciLECxn_ReadChannelMapCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLECxn_ReadChannelMapOp(__int64 *a1, __int64 a2)
; HciLECxn_ReadRemoteUsedFeaturesCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLECxn_ReadRemoteUsedFeaturesOp(__int64 *a1, __int64 a2)
; Fn_CC_Read_Buffer_Size(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_Read_Local_Version_Information(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_Read_Local_Supported_Commands(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_Read_Local_Supported_Features(__int64 a1, __int64 a2, __int64 a3)
; HCI_CxnReadRemoteVersionInformation(__int64 a1, __m128i *a2)
; HCI_CxnReadRemoteHostSupportedFeatures(__int64 a1, __m128i *a2, __int64 a3, __int64 a4)
; Fn_EVENT_ReadRemoteSupportedFeaturesComplete(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Fn_EVENT_ReadRemoteExtendedFeaturesComplete(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Fn_EVENT_ReadRemoteVersionInformationComplete(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; L2CapCon_CreateWriteSegment(__int64 a1, __int64 a2, __int64 a3)
; L2CapInt_VerifyIncomingReadPacket(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4, __m128i *a5)
; L2CapInt_ProcessReadBip(__int64 a1, __int64 a2, __int64 a3)
; L2cap_StopReadTimer(__int64 a1)
; L2CapCon_ReadTimeoutDpc(__int64 a1, __int64 a2)
; L2capCon_ReadIrpCompleteRequest(__int64 a1, __int64 a2, unsigned int a3)
; L2CapCon_ReadIrpCancel(__int64 a1, __int64 a2)
; L2CapCon_CopyReadBipToReadIrpEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; L2CapInt_CompleteOpenChannelRequest(__int64 a1, __int64 a2, __int64 a3, int a4)
; L2CapCon_CopyExtraOptions(__int64 a1, unsigned int a2)
; L2Cap_AddReadIrpToList(__int64 a1, __int64 a2, __int64 a3)
; L2Cap_CompleteReadIrpList(__int64 a1, __int64 a2)
; L2CapCon_PurgeReads(__int64 a1, __int64 a2)
; L2CapInt_CreateConnection(__int64 a1, __int64 a2, int a3, __int16 a4, __int16 a5, __int64 a6, __m128i *a7)
; L2CapCon_SetCallback(__int64 a1, __int64 a2)
; L2CapCon_SetStateEx(__int64 a1, __int64 a2, char a3, __int64 a4)
; L2CapCon_SetConfigState(__int64 a1, int a2, int a3, __int64 a4)
; L2capCon_CreateHciConnection(__int64 a1, __int64 a2)
; L2CapProcess_SetChannelProperty(__int64 a1)
; L2CapInt_ValidateOpenChannelRequest(__int64 a1, __int64 a2)
; L2CapCon_CreateInfoRequestConnectContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; L2CapCon_CreateXmitRecv(__int64 a1)
; L2CapCon_EnhancedCreateWriteContext(__int64 a1, __int64 a2, __int64 a3)
; L2CapCon_EnhancedProcessRead(__int64 a1, __int64 a2, __int64 a3)
; L2CapHDLC_CreateSupervisoryBip(__int64 a1)
; HCI_SetLocalServiceInfo(__int64 a1, __int64 a2, __int64 a3)
; ScoCxn_SetStateEx(__int64 a1, __int64 a2, __int64 a3)
; ScoCxnS_CreateConnection(__int64 a1, __int64 a2, int a3, int a4, __int64 a5, __int64 a6)
; ScoCxn_SetCallback(__int64 a1, __int64 a2)
; ScoCxn_SetTransferInfo(__int64 a1, __int64 a2)
; ScoCxn_DoDisconnectEx(__int64 a1, __int64 a2, __int64 a3)
; ScoCxn_AcquireCreateMutex(__int64 a1, __int64 a2)
; ScoCxn_AcquireCreateMutexCallback(__int64 a1, __int64 a2)
; ScoCxn_ReleaseCreateMutex(__int64 a1, __int64 a2)
; ScoCxn_InitForOpenResponse(__int64 a1, __int64 a2)
; ScoCxn_CreateHciConnection(__int64 a1)
; ScoCxn_AcquireVoiceSetting(__int64 a1)
; ScoCxn_VoiceSettingCallback(__int64 a1, __int64 a2, __int64 a3)
; ScoCxn_ReleaseVoiceSetting(__int64 a1, __int64 a2)
; ScoCxn_CreateScoCxn(__int64 a1, __int64 a2, __int64 a3)
; ScoCxn_OpenScoCxnCallback(__int64 a1, __int64 a2, __int64 a3)
; ScoCxn_OpenConfigComplete(__int64 a1, __int64 a2, __int64 a3)
; ScoHci_WriteVoiceSetting(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ScoHci_SetupSyncCxn(__int64 a1, __int16 a2, unsigned int a3, unsigned int a4)
; ScoInt_ValidateOpenChannelRequest(__int64 a1, __int64 a2)
; ScoInt_AcquireVoiceSetting(__int64 a1, __int64 a2, __int64 a3)
; ScoInt_SetCxnInProgress(__int64 a1, __int64 a2)
; ScoMp_ValidateSettings(__int64 a1, __int64 a2, int a3)
; ScoThread_Create(PVOID StartContext, __int64 a2)
; ScoCxn_ProcessReadIrp(__int64 a1, __int64 a2, __int64 a3)
; BthVerif_ReadFromMdl(PMDL MemoryDescriptorList, __int64 a2)
; BthVerif_ReadFromBuffer(__int64 a1, __int64 a2)
; Fn_CC_Read_Simple_Pairing_mode(__int64 a1, __int64 a2, __int64 a3)
; Fn_CC_Read_OOB_Data(__int64 a1, __int64 a2, __int64 a3)
; L2CapCon_StreamingProcessRead(__int64 a1, __int64 a2, __int64 a3)
; BthCopyMdlChainToBuffer(__int64 a1, unsigned int a2, void *a3, __int64 a4, unsigned int Size, __int64 a6)
; BthCopyBufferToMdlChain(void *Src, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5, __int64 a6)
; BthCreateMdlChainFromMdlChain(PMDL SourceMdl, unsigned int a2, ULONG a3, struct _MDL **a4)
; MultiStepOperation_SetData(__int64 a1, __int64 a2)
; SdpInterlockedDecrement(volatile signed __int32 *a1)
; BthLELib_SMPUtilCreateCryptoHandle@<rax>(void *a1@<rcx>, __int64 a2@<rsi>)
; SqmReadDataStream(int *a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; BthOpenDeviceRegKey(__int64 a1, HANDLE *a2)
; BthCreateDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT TargetDevice, __int64 a3)
; BthSetWmiDataItem(__int64 a1, struct _IRP *a2, signed int a3, __int64 a4, __int64 a5, unsigned int a6, unsigned __int8 *a7)
; BthSetWmiDataBlock(__int64 a1, struct _IRP *a2, signed int a3, __int64 a4, unsigned int a5, unsigned __int8 *a6)
; SdpL2cap_ReadWorkItemWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; SdpCached_Create(__int64 a1, __int64 a2)
; SdpInt_CreateServiceSearchTree(__int64 a1, unsigned __int8 a2)
; SdpInt_CreateAttributeSearchTree(__int64 a1, unsigned int a2)
; SdpInt_CreateServiceAttributePDU(__int64 a1, __int64 a2)
; SdpInt_CreateServiceSearchResponsePDU(__int64 a1, __int64 a2)
; SdpUS_SetUuids(__int64 a1, __int64 a2, unsigned __int8 a3)
; SecDB_OpenDeviceKey(__int64 a1, __int64 a2, HANDLE *a3)
; HCI_DibSetPersonal(__int64 a1, void *a2, __int64 a3)
; HCI_DibSetLinkKey(__int64 a1, void *a2)
; HCI_DevicePowerDownWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HCI_RegUpdateSniffPolicySettings(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateSimilarEventSettings(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateDevicePowerDownEnabled(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateEirSettings(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateDevicePowerDownSupportLevel(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateDevicePowerDownTimeout(__int64 a1, __int64 a2, __int64 a3)
; HCI_RegUpdateSniffModeDevicePowerDownTimeout(__int64 a1, __int64 a2, __int64 a3)
; SDP_ReadDeviceIdInformation(__int64 a1, __int64 a2, __int64 a3)
; HCI_ReadStoredSettings(__int64 a1)
; HCI_DibReadRemoteServices(void *a1, SIZE_T a2)
; SMPInt_ReadSettings(__int64 a1, void *a2, __int64 a3)
; SMPInt_DibSetSMPInfo(__int64 a1, __int64 a2)
; SMPInt_CreateAndSendMConfirm(__int64 a1, __int64 a2, __m128i *a3)
; SMPInt_CreateAndDistributeMKeys(__int64 a1, __int64 a2, char a3)
; BthOpenKey(__int64 a1, const WCHAR *a2, HANDLE *a3)
; BthOpenKeyEx(__int64 a1, __int64 a2, HANDLE *a3, int a4)
; BthCreateKey(__int64 a1, const WCHAR *a2, HANDLE *a3)
; BthCreateKeyEx(__int64 a1, __int64 a2, HANDLE *a3, ULONG *a4, int a5)
; SdpCreateNodeTree(ULONG Tag)
; SdpCreateNodeNil(ULONG Tag)
; SdpCreateNodeUInt128(__m128i *a1, ULONG a2)
; SdpCreateNodeUInt64(__int64 a1, ULONG a2)
; SdpCreateNodeUInt32(int a1, ULONG a2)
; SdpCreateNodeUInt8(char a1, ULONG a2)
; SdpCreateNodeInt128(__m128i *a1, ULONG a2)
; SdpCreateNodeInt64(__int64 a1, ULONG a2)
; SdpCreateNodeInt32(int a1, ULONG a2)
; SdpCreateNodeInt16(__int16 a1, ULONG a2)
; SdpCreateNodeInt8(char a1, ULONG a2)
; SdpCreateNodeUUID128(__m128i *a1, ULONG a2)
; SdpCreateNodeUUID32(int a1, ULONG a2)
; SdpCreateNodeUUID16(__int16 a1, ULONG a2)
; SdpCreateNodeString(void *Src, size_t Size, ULONG Tag)
; SdpCreateNodeBoolean(char a1, ULONG a2)
; SdpCreateNodeSequence(ULONG Tag)
; SdpCreateNodeAlternative(ULONG Tag)
; SdpCreateNodeUrl(void *Src, size_t Size, ULONG Tag)
; SdpCreateNodeUInt16_P(__int16 a1, ULONG a2)
; SdpAppendNodeToContainerNode(__int64 a1, __int64 a2)
; HCI_EirSetDataTest(__int64 a1, __int64 a2)
; HciLE_Test_SetRandomAddressOpCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLE_Test_SetRandomAddressOp(__int64 a1, __int64 a2)
; HciLE_Test_SetAdvertisingParametersOpCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLE_Test_SetAdvertisingParametersOp(__int64 a1, __int64 a2)
; HciLE_Test_SetAdvertisingDataOpCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLE_Test_SetAdvertisingDataOp(__int64 a1, __int64 a2)
; HciLE_Test_SetAdvertisingEnabledOpCallback(__int64 a1, __int64 a2, __int64 a3)
; HciLE_Test_SetAdvertisingEnabledOp(__int64 a1, __int64 a2)
; HciLE_Test_SetupAdvertiseMsoComplete(PVOID P, __int64 a2)
; LogEtwSetRadioStateStart(__int64 a1, int a2)
; LogEtwSetRadioStateStop(__int64 a1, int a2, int a3)
; LogEtwSetDevicePowerStateStart(__int64 a1, int a2, int a3)
; LogEtwSetDevicePowerStateStop(__int64 a1, int a2, int a3, int a4)
; LogEtwHciAclRead(__int64 a1, __int64 a2)
; Log_Etw_Hci_Cmd_Create_Connection(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Set_Connection_Encryption(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Remote_Supported_Features@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Remote_Extended_Features(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Remote_Version_Information@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Clock_Offset@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_QoS_Setup(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Link_Policy_Settings@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Write_Link_Policy_Settings(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Set_Event_Mask(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Set_Event_Filter(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_PIN_Type@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Create_New_Unit_Key@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Stored_Link_Key(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Local_Name@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Connection_Accept_Timeout@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Page_Timeout@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Scan_Enable@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Page_Scan_Activity@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Inquiry_Scan_Activity@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Authentication_Enable@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Encryption_Mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Class_of_Device@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Voice_Setting@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Write_Voice_Setting(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Automatic_Flush_Timeout@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Num_Broadcast_Retransmissions@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Hold_Mode_Activity@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Transmit_Power_Level(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Set_Host_Controller_To_Host_Flow_Control(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Link_Supervision_Timeout@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Number_Of_Supported_IAC@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Current_IAC_LAP@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Page_Scan_Period_Mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Page_Scan_Mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Set_AFH_Host_Channel_Classification(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_Read_Inquiry_Scan_Type@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Inquiry_Mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Page_Scan_Type@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Extended_Inquiry_Response@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Simple_Pairing_mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_OOB_Data@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Inquiry_Response_Transmit_Power_Level@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_LE_Host_Support@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Local_Version_Information@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Local_Supported_Commands@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Local_Supported_Features@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Buffer_Size@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Country_Code@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_BD_ADDR@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Failed_Contact_Counter@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_RSSI@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_Read_Loopback_Mode@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Set_Event_Mask(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Read_Buffer_Size@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Read_Local_Supported_Features@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Set_Random_Address@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Set_Advertising_Parameter(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Read_Advertising_Channel_Tx_Power@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Set_Advertising_Data(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Set_Scan_Response_Data(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Set_Advertise_Enable(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Set_Scan_Parameter(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Set_Scan_Enable(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Create_Connection(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Create_Connection_Cancel@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Read_White_List_Size@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Set_Host_Channel_Classification(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Cmd_LE_Read_Channel_Map@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Read_Remote_Used_Features@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; Log_Etw_Hci_Cmd_LE_Read_Supported_States@<eax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>)
; LogEtwHciEventReadRemoteSupportedFeaturesComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwHciEventReadRemoteVersionInformationComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwHciEventQoSSetupComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwHciEventReadClockOffsetComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwHciEventReadRemoteExtendedFeaturesComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwHciEventLEReadRemoteUsedFeaturesComplete(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Link_Policy_Settings(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Write_Link_Policy_Settings(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_PIN_Type(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Stored_Link_Key(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Local_Name(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Connection_Accept_Timeout(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Scan_Enable(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Inquiry_Scan_Activity(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Encryption_Mode(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Class_of_Device(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Voice_Setting(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Automatic_Flush_Timeout(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Num_Broadcast_Retransmissions(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Hold_Mode_Activity(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Transmit_Power_Level(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Link_Supervision_Timeout(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Number_Of_Supported_IAC(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Current_IAC_LAP(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Loopback_Mode(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Page_Scan_Type(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Extended_Inquiry_Response(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Local_Version_Information(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Local_Supported_Commands(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Local_Supported_Features(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Buffer_Size(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Country_Code(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_BD_ADDR(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Failed_Contact_Counter(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_RSSI(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_OOB_Data(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_Inquiry_Response_Transmit_Power_Level(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_Read_LE_Host_Support(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_LE_Read_Buffer_Size(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_LE_Read_Advertising_Channel_Tx_Power(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_LE_Read_White_List_Size(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_LE_Read_Channel_Map(__int64 a1, __int64 a2, __int64 a3, char a4)
; Log_Etw_Hci_Event_CC_LE_Read_Supported_States(__int64 a1, __int64 a2, __int64 a3, char a4)
; LogEtwBrbL2caOpenChannel(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\BTHUSB.c ;
; BthUsb_SetRadioState(__int64 a1, int a2)
; BthUsb_ReadTransferComplete(__int64 a1, void *a2, int a3, unsigned int a4, __int64 a5)
; BthUsb_ScoReadAlignFrame(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; BthUsb_ScoReadNextFrame(__int64 a1, __int64 a2, __int64 a3, int a4)
; BthUsb_ScoAllocReadTransferCtxImpl(__int64 a1, __int64 a2)
; BthUsb_ScoInitReadResources(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthUsb_ScoFreeReadResources(__int64 a1)
; BthUsb_ScoReadStart(__int64 a1, __int64 a2)
; BthUsb_ScoReadStopWait(__int64 a1, __int64 a2)
; BthUsb_ScoReadData(__int64 a1, __int64 a2)
; BthUsb_ScoReadUrbSend(__int64 a1, __int64 a2, __int64 a3)
; BthUsb_ScoReadTransferCallback(__int64 a1, __int64 a2, __int64 a3)
; BthUsb_ScoReadUrbDone(__int64 a1, __int64 a2, __int64 a3)
; BthUsb_ScoProcessReadUrb(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthUsb_ScoReconstructReadPackets(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; BthUsb_ScoWriteUrbDone(__int64 a1, __int64 a2, __int64 a3)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, __int64 a3, __int64 a4)
; UsbWrapInitializeInterruptReadData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; UsbWrapSubmitInterruptRead(__int64 a1, __int64 a2, __int64 a3)
; UsbWrapInterruptReadComplete(__int64 a1, __int64 a2, __int64 a3)
; BthUsb_CreateDeviceExtension(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BthUsb_PnpCreateDevice(__int64 a1, __int64 a2)
; BthUsb_SetPipeState(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bwcW8x64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\bxvbda.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\cdfs.c ;
; CdCreateInternalStream(__int64 a1, __int64 a2, __int64 a3, __m128i *a4)
; CdSetThreadContext(__int64 a1, __int64 a2)
; CdCommonCreate(__int64 a1, __int64 a2)
; CdOpenByFileId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CdOpenExistingFcb(__int64 a1, __int64 a2, __int64 a3, ACCESS_MASK DesiredAccess, char a5, __int64 a6)
; CdOpenDirectoryFromPathEntry(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, char a6, char a7, __int64 a8, char a9, __int64 a10)
; CdOpenFileFromFileContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, char a6, __int64 a7, __int64 a8, __int64 a9)
; CdCompleteFcbOpen(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ACCESS_MASK DesiredAccess, int a6, ACCESS_MASK DesiredAccessa)
; CdNonCachedRead(__int64 a1, __int64 a2, __int64 a3, ULONG a4)
; CdNonCachedXARead(__int64 a1, __int64 a2, __int64 a3, ULONG a4)
; CdReadSectors(PVOID Buffer, PDEVICE_OBJECT DeviceObject, __int64 a3, char a4, PVOID Buffera, PDEVICE_OBJECT DeviceObjecta)
; CdCreateUserMdl(__int64 a1, ULONG a2)
; CdReadDirDataThroughCache(__int64 a1, __int64 a2)
; CdReadAudioSystemFile(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, void *Dst)
; CdCommonSetInfo(__int64 a1, __int64 a2)
; CdDecodeFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CdConvertNameToCdName(__int64 a1, __int64 a2)
; CdConvertBigToLittleEndian(__int64 a1, __int64 a2, int a3, void *a4)
; CdCommonRead(__int64 a1, __int64 a2)
; CdFilterCallbackAcquireForCreateSection(__int64 a1)
; CdReleaseForCreateSection(__int64 a1)
; CdCreateFcb(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 *a4)
; CdCreateFileLock(__int64 a1, __int64 a2, char a3)
; CdCreateIrpContext(__int64 a1, char a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\cdrom.c ;
; RequestSetContextFields(__int64 a1, __int64 a2)
; DeviceSetMediaChangeStateEx(__int64 a1, unsigned int a2, __int64 a3)
; DeviceInternalSetMediaChangeState(__int64 a1, unsigned int a2, __int64 a3)
; DeviceSendPowerDownProcessRequest(__int64 a1, __int64 a2, __int64 a3)
; RequestProcessSetPower(__int64 a1, __int64 a2)
; SequentialQueueEvtIoReadWrite(__int64 a1, __int64 a2, __int64 a3)
; RequestHandleAreVolumesReady(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestHandleReadWrite(__int64 a1, __int64 a2, __int64 a3)
; RequestHandleSetHotPlugInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateAacsReadVolumeId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateAacsReadMediaKeyBlock(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateDvdReadKey(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateDvdReadStructure(__int64 a1, __int64 a2, __int64 a3)
; RequestValidateRawRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateReadQChannel(__int64 a1, __int64 a2, __int64 a3)
; RequestValidateReadTocEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestValidateReadWrite(__int64 a1, __int64 a2, __int64 a3)
; RequestValidateSetSpeed(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestSetupMcnSyncIrp(__int64 a1)
; ScratchBuffer_PerformNextReadWrite(__int64 a1, char a2)
; ScratchBuffer_ReadWriteCompletionRoutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ScratchBuffer_ReadWriteEvtRequestCancel(__int64 a1)
; ScratchBuffer_ReadWriteTimerRoutine(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; ScratchBuffer_SetupReadWriteSrb(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5, char a6, char a7)
; MediaReadCapacity(__int64 a1)
; MediaReadCapacityDataInterpret(__int64 a1, __int64 a2)
; CreateQueueEvtIoDefault(__int64 a1, __int64 a2)
; RequestSetupMcnRequest(__int64 a1, char a2)
; ScratchBuffer_SetupSrb(__int64 a1, __int64 a2, unsigned int a3, char a4)
; DvdStartSessionReadKey(__int64 Dst, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned int a7, __int64 a8)
; DeviceSetRawReadInfo(__int64 a1)
; DeviceSetParameter(__int64 a1, const WCHAR *a2, const WCHAR *a3, unsigned int a4)
; DeviceCreateWellKnownName(__int64 a1)
; ReadWriteWorkItemRoutine(__int64 a1)
; DeviceHandleDvdStartSessionReadKey(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleGetSetVolume(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleRawRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleReadDvdStructure(void *Dst, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleReadQChannel(void *Dst, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleSetReadAhead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleSetSpeed(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ReadDvdStructure(void *Dst, __int64 a2, __int64 a3, __int64 a4, void *Dsta, unsigned __int16 a6, __int64 a7)
; ReadQChannel(void *Dst, __int64 a2, __int64 a3, __int64 a4, void *Dsta, unsigned __int64 a6, __int64 a7)
; RequestHandleLoadEjectMedia(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestHandleReadTOC(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RequestHandleReadTocEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DevicePowerSettingCallback(__int64 a1, __int64 a2, int a3, __int64 a4)
; DeviceHandleAacsReadBindingNonce(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleAacsReadMediaId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleAacsReadMediaKeyBlock(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleAacsReadSerialNumber(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeviceHandleReadVolumeId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\circlass.c ;
; DecoderReset(__int64 a1, __int64 a2, __int64 a3)
; IrClassEvtDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; IrClassEvtPdoRead(__int64 a1, __int64 a2, unsigned __int64 a3)
; IrClassDecodeRlc(__int64 a1, unsigned int a2, unsigned int *a3, __int64 a4)
; IrClassEvtFdoCreate(__int64 a1, __int64 a2, __int64 a3)
; IrClassOpenGlobalParameters(__int64 a1, HANDLE *a2)
; IrClassReadGlobalParameters(__int64 a1)
; IrClassReadAllDecoderConfigs(__int64 a1)
; IrClassReadDecoderConfig(void *a1, void *a2, unsigned __int16 a3)
; IrClassCleanupDecoders(__int64 a1)
; IrClassCleanupDecoder(void *Dst)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Classpnp.c ;
; SetupReadWriteTransferPacket(__int64 a1, __int64 a2, unsigned int a3, unsigned __int64 a4, __int64 a5)
; ClassReadWrite(PDEVICE_OBJECT DeviceObject, PIRP Irp, __int64 a3)
; StorSqmCreateStringStreamEntry(__int64 a1, __int64 a2)
; StorSqmCreateDWORDStreamEntry(__int64 a1, int a2)
; ClassReadCapacity16(__int64 a1, __int64 a2)
; SetupDriveCapacityTransferPacket(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, char a6)
; ClassReadDriveCapacity(PDEVICE_OBJECT DeviceObject)
; StorSqmCreateStringStreamEntryEx(__int64 a1, __int64 a2)
; StorSqmCreateDWORDStreamEntryEx(__int64 a1, int a2)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; ClassSpinDownPowerHandler(__int64 DeviceObject, PIRP Irp)
; ClasspPowerDownCompletion(__int64 a1, __int64 a2, __int64 a3)
; StRtlIoStorInfoSetSenseData(__int64 a1, __int64 a2)
; InterpretReadCapacity16Data(__int64 a1, __int64 a2)
; ClassSetMediaChangeState(__int64 a1, signed __int32 a2, char a3)
; ClasspInternalSetMediaChangeState(__int64 a1, signed __int32 a2, char a3)
; ClasspSetMediaChangeStateEx(__int64 a1, signed __int32 a2, char a3, char a4)
; ClasspCleanupOffloadReadContext(__int64 a1)
; ClasspCompleteOffloadRead(__int64 a1, unsigned int a2, __int64 a3)
; ClasspPopulateTokenTransferPacketDone(__int64 a1)
; ClasspReceivePopulateTokenInformationTransferPacketDone(__int64 a1)
; ClasspReceiveWriteUsingTokenInformationDone(__int64 a1, int a2)
; ClasspReceiveWriteUsingTokenInformationTransferPacketDone(__int64 a1)
; ClasspWriteUsingTokenTransferPacketDone(__int64 a1)
; ConvertTickToDateTime(__int64 a1, void *a2)
; ClasspSetupReceivePopulateTokenInformationTransferPacket(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6)
; ClasspSetupReceiveWriteUsingTokenInformationTransferPacket(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6)
; ClasspSetupWriteUsingTokenTransferPacket(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6)
; CleanupTransferPacketToWorkingSetSize(__int64 a1, char a2)
; SetupModeSelectTransferPacket(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, char a5, __int64 a6)
; ClasspConvertDataSetRangeToBlockDescr(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 *a5, unsigned __int64 a6, __int64 a7, __int64 a8)
; ClasspConvertToScsiRequestBlock(void *a1, __int64 a2)
; ClasspSqmTrackCopyOffloadDeviceLimits(__int64 a1)
; ClasspSqmTrackCopyOffloadReadRequestExtents(__int64 a1, unsigned int a2)
; ClasspSqmTrackCopyOffloadReadRequestTruncation(__int64 a1, __int64 a2, __int64 a3, int a4)
; ClasspSqmTrackCopyOffloadTokenTTL(__int64 a1, unsigned int a2)
; ClasspSqmTrackCopyOffloadWriteRequestTruncation(__int64 a1, __int64 a2, __int64 a3, int a4)
; CreateStorageRequestBlock(void **a1, __int16 a2, int (__fastcall *a3)(_QWORD, _QWORD, _QWORD), __int64 a4, unsigned int a5, char a6)
; StorSqmSetDWORD(__int64 a1, int a2, __int64 a3)
; ClassDeviceProcessOffloadRead(__int64 a1, __int64 a2)
; ClasspCreateClose(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ClassCreateClose(__int64 a1, __int64 a2)
; SetupModeSenseTransferPacket(__int64 a1, __int64 a2, __int64 a3, unsigned __int8 a4, __int64 a5, char a6, __int64 a7, char a8)
; ClasspDeviceCopyOffloadProperty(__int64 a1, __int64 a2)
; ClasspPowerSettingCallback(__int64 a1, __int64 a2, int a3)
; ClassCreateDeviceObject(struct _DRIVER_OBJECT *a1, __int64 a2, struct _DEVICE_OBJECT *a3, char a4, __int64 a5)
; ClassSetFailurePredictionPoll(PVOID DeferredContext, int a2, signed __int32 a3)
; ClasspSetupPopulateTokenTransferPacket(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6)
; CleanupTransferPacketToWorkingSetSizeWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; ClassSetDeviceParameter(__int64 a1, const WCHAR *a2, const WCHAR *a3, int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\clfs.c ;
; CClfsKernelMarshallingContext::ReadComplete(CClfsKernelMarshallingContext *this, struct _LOGIOCB *a2, struct _CLFS_RECORD_HEADER *a3)
; CClfsKernelMarshallingContext::TerminateRead(CClfsKernelMarshallingContext *this, struct _LOGIOCB *const a2)
; CClfsRequest_State::Change_State_ReadPending(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest::AddRefReadIo(CClfsRequest *this)
; CClfsRequest::CreateReadCompletionElement(CClfsRequest *this)
; CClfsRequest::ConsumeCreatedReadCompletionElement(CClfsRequest *this)
; CClfsReadCompletionElt::QueryWorkItem(CClfsReadCompletionElt *this)
; CClfsContainer::IoAsyncReadCompletion(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; CClfsRequest::ReadDone(CClfsRequest *this, unsigned int a2, unsigned int a3)
; CClfsRequest_State_ReadPending::ReadDone(CClfsRequest_State_ReadPending *this, struct CClfsRequest *a2, __int64 a3, __int64 a4)
; CClfsRequest::AsyncReadIoCompletion(void *a1, struct _IO_STATUS_BLOCK *a2)
; CClfsReadCompletionElt::Release(PVOID Entry)
; CClfsLogFcbPhysical::AppendRegion(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, unsigned __int8 a3, void *a4, unsigned __int32 a5, const unsigned __int64 *a6, __int64 *a7, const __int64 *a8, struct IClfsRequestAsync *a9, struct _IO_STATUS_BLOCK *a10, __int64 *a11, union _CLS_LSN *a12, union _CLS_LSN *a13, union _CLS_LSN *a14)
; CClfsRequest::FinalizeReadRequest(CClfsRequest *this)
; CClfsRequest_State_ReadAwaitingCompletion::FinalizeReadRequest(CClfsRequest_State_ReadAwaitingCompletion *this, struct CClfsRequest *a2)
; CClfsRequest::FinalizeAsyncRead(CClfsRequest *this)
; CClfsRequest_State::Change_State_Done(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest::FlushDone(CClfsRequest *this, const union _CLS_LSN *a2, unsigned int a3)
; CClfsRequest_State_FlushPending::FlushDone(CClfsRequest_State_FlushPending *this, struct CClfsRequest *a2, const union _CLS_LSN *a3, unsigned int a4, __int32 a5)
; CClfsRequest_State_AppendPendingFlush::FlushDone(CClfsRequest_State_AppendPendingFlush *this, struct CClfsRequest *a2, const union _CLS_LSN *a3, unsigned int a4, __int32 a5)
; CClfsRequest::CompleteAsyncAppend(CClfsRequest *this, const union _CLS_LSN *a2, unsigned int a3, int a4)
; CClfsLogFcbCommon::IsReadOnly(CClfsLogFcbCommon *this)
; ClfsDecodeBlock(struct _CLFS_LOG_BLOCK_HEADER *a1, unsigned int a2, char a3, unsigned __int32 *a4, unsigned __int32 *a5)
; ClfsCreateEventObject(enum _EVENT_TYPE a1, struct _KEVENT **a2)
; ClfsDecodeBlockPrivate(struct _CLFS_LOG_BLOCK_HEADER *a1, unsigned int a2, char a3, unsigned __int8 a4, unsigned __int32 *a5)
; CClfsRequest::ReleaseReadIo(CClfsRequest *this)
; CClfsLogFcbPhysical::ReserveAndAppendLog(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, void *a3, __int64 *a4, const unsigned __int64 *a5, __int64 *a6, struct IClfsRequestAsync *a7, unsigned __int8 a8, struct IClfsRequestAsync *a9, struct _IO_STATUS_BLOCK *a10, struct _IO_STATUS_BLOCK *a11, union _CLS_LSN *a12, union _CLS_LSN *a13, union _CLS_LSN *a14, union _CLS_LSN *a15)
; CClfsLogFcbPhysical::AppendLog(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, unsigned __int8 a3, void *a4, unsigned __int32 a5, int a6, unsigned __int8 a7, const unsigned __int64 *a8, __int64 *a9, const __int64 *a10, struct IClfsRequestAsync *a11, struct _IO_STATUS_BLOCK *a12, __int64 *a13, union _CLS_LSN *a14, union _CLS_LSN *a15)
; ClfsLsnCreate(unsigned int a1, unsigned int a2, int a3)
; CClfsRequest_State_AppendPendingFlush::GetMdlReference(CClfsRequest_State_AppendPendingFlush *this, struct CClfsRequest *a2)
; CClfsRequest::IsReadMgmtNotification(CClfsRequest *this)
; CClfsLogFcbPhysical::ReadLog(CClfsLogFcbPhysical *this, const union _CLS_LSN *a2, const struct _CLFS_READ_BUFFER *a3, ULONG_PTR BugCheckParameter3, union _CLS_LSN *a5, struct IClfsRequestAsync *BugCheckParameter3a, union _CLS_LSN *a7, unsigned __int32 *a8)
; CClfsLogFcbPhysical::ReadLogBlock(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3, int a4, const struct _CLFS_READ_BUFFER *a5, unsigned __int32 a6, struct IClfsRequestAsync *a7, union _CLS_LSN *a8, union _CLS_LSN *a9, unsigned __int32 *a10)
; CClfsLogCcb::SetPhysicalHandle(CClfsLogCcb *this, void *a2)
; CClfsLogFcbPhysical::Open(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2)
; CClfsLogFcbCommon::SetFileObject(CClfsLogFcbCommon *this, struct _FILE_OBJECT *a2, struct CClfsLogCcb *a3)
; CClfsLogFcbCommon::CreateCcb(CClfsLogFcbCommon *this, char a2, struct _FILE_OBJECT *a3, struct _FILE_OBJECT *a4, struct CClfsLogCcb **a5)
; CClfsLogFcbCommon::IsOpened(CClfsLogFcbCommon *this)
; ClfsCheckAndResetReadInProgress(__int64 a1, unsigned int a2)
; CClfsBaseFilePersisted::SetDefaultSaclSecurityDescriptor(void **a1, unsigned __int32 *a2)
; CClfsLogFcbPhysical::OpenClient(CClfsLogFcbPhysical *this, const struct _UNICODE_STRING *a2, void *a3, struct _SECURITY_SUBJECT_CONTEXT *a4, unsigned __int32 a5, unsigned __int32 a6, struct _ACCESS_STATE *a7, struct _ACCESS_STATE *a8, struct _FILE_OBJECT *a9, PFILE_OBJECT a10)
; CClfsLogFcbPhysical::ReadOnly(CClfsLogFcbPhysical *this)
; CClfsLogFcbPhysical::AcquireForReadAheadCallback(void *a1)
; CClfsLogFcbPhysical::AcquireForReadAhead(CClfsLogFcbPhysical *this, BOOLEAN a2)
; CClfsLogFcbPhysical::ReleaseFromReadAheadCallback(void *a1)
; CClfsContainer::IoAsyncReadCompletionFreeMdls(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; CClfsLogFcbPhysical::ReadQueuedOwnerPage(CClfsLogFcbPhysical *this, const union _CLS_LSN *a2, unsigned __int8 *a3)
; CClfsReadCompletionElt::AddRef(CClfsReadCompletionElt *this)
; CClfsReadCompletionElt::QueryAsyncRequestInterface(CClfsReadCompletionElt *this)
; CClfsRequest::SetWaitLsn(CClfsRequest *this, const union _CLS_LSN *a2)
; CClfsBaseFile::ReadMetadataBlock(CClfsBaseFile *this)
; CClfsLogFcbPhysical::ReadLogBlock(__int64 a1, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3, int a4, const struct _CLFS_READ_BUFFER *a5, unsigned __int32 a6, struct IClfsRequestAsync *a7, union _CLS_LSN *a8, union _CLS_LSN *a9, unsigned __int32 *a10)
; CClfsLogFcbPhysical::ReadLogPagingIo(__int64 a1, const union _LARGE_INTEGER *a2, const struct _CLFS_READ_BUFFER *a3, unsigned __int32 a4, struct IClfsRequestAsync *a5, unsigned __int32 *a6)
; CClfsLogFcbPhysical::SetArchiveTail(__int64 a1, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3)
; CClfsLogFcbPhysical::SetEndOfLog(__int64 a1, struct _FILE_OBJECT *a2, unsigned __int8 a3, struct _CLFS_TRUNCATE_CLIENT_CHANGE *a4, unsigned __int32 a5)
; CClfsLogFcbPhysical::SetLogFileInfo(__int64 a1, struct _FILE_OBJECT *a2, int a3, __int64 a4, unsigned int a5)
; CClfsLogFcbPhysical::AppendRegion_::_1_::fin_0(__int64 a1, __int64 a2, __int64 a3, unsigned __int32 *a4)
; CClfsRequest::FinalizeAsyncRead_::_1_::filt_0(__int64 a1, __int64 a2)
; CClfsRequest::CompleteAsyncAppend_::_1_::filt_0(__int64 a1, __int64 a2)
; CClfsRequest::ReleaseReadIo_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReserveAndAppendLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::AppendLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadLogBlock_::_1_::filt_0(__int64 a1)
; CClfsLogFcbPhysical::ReadLogBlock_::_1_::fin_1(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::Open_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::OpenClient_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadQueuedOwnerPage_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest_State_AppendPendingFlush::Cancel(CClfsRequest_State_AppendPendingFlush *this, struct CClfsRequest *a2)
; CClfsRequest_State::Change_State_AppendPendingFlush(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest_State::Done(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest_State::FinalizeReadRequest(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest_State::FlushDone(CClfsRequest_State *this, struct CClfsRequest *a2, const union _CLS_LSN *a3)
; CClfsRequest_State_AdvanceLogBasePending::FlushDone(CClfsRequest_State_AdvanceLogBasePending *this, struct CClfsRequest *a2, const union _CLS_LSN *a3, __int64 a4, __int32 a5)
; CClfsRequest_State_WriteRestartPending::FlushDone(CClfsRequest_State_WriteRestartPending *this, struct CClfsRequest *a2, const union _CLS_LSN *a3, unsigned int a4)
; CClfsRequest_State::ReadDone(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest::ReadMgmtNotificationDone(CClfsRequest *this, int a2)
; CClfsRequest::ReadMgmtNotificationInProgress(CClfsRequest *this)
; CClfsRequest::WriteRestartDone(CClfsRequest *this)
; CClfsRequest_State::WriteRestartDone(CClfsRequest_State *this, struct CClfsRequest *a2)
; CClfsRequest_State_AdvanceLogBaseAwaitingRestart::WriteRestartDone(CClfsRequest_State_AdvanceLogBaseAwaitingRestart *this, struct CClfsRequest *a2)
; CClfsRequest_State_WriteRestartInProgress::WriteRestartDone(CClfsRequest_State_WriteRestartInProgress *this, struct CClfsRequest *a2)
; CClfsLogFcbVirtual::AcquireForReadAhead(CClfsLogFcbVirtual *this, char a2)
; CClfsLogFcbPhysical::CreateClientSharedSecurityContext(CClfsLogFcbPhysical *this, unsigned __int8 a2, void *const a3)
; CClfsLogFcbPhysical::CreateSharedSecurityContext(CClfsLogFcbPhysical *this, void *const a2)
; CClfsLogFcbVirtual::CreateSharedSecurityContext(CClfsLogFcbVirtual *this, void *const a2)
; CClfsLogFcbPhysical::ReadLastOwnerPage(CClfsLogFcbPhysical *this, unsigned __int8 *a2, union _CLS_LSN *a3)
; CClfsLogFcbPhysical::ReadLastOwnerPage_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadLockFcb(CClfsLogFcbPhysical *this)
; CClfsLogFcbVirtual::ReadLogPagingIo(CClfsLogFcbVirtual *this, const union _LARGE_INTEGER *a2, const struct _CLFS_READ_BUFFER *a3, __int64 a4, struct IClfsRequestAsync *a5, unsigned __int32 *a6)
; CClfsLogFcbVirtual::ReleaseFromReadAhead(CClfsLogFcbVirtual *this)
; CClfsKernelMarshallingContext::CheckAndResetReadInProgress(CClfsKernelMarshallingContext *this, struct _LOGIOCB *a2)
; ClfsReadPreviousRestartArea(struct _LOGIOCB *a1, __int64 a2, __int64 a3, __int64 a4)
; CClfsLogFcbPhysical::ReadRestart(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, const struct _CLFS_READ_BUFFER *a3, __int64 a4, struct IClfsRequestAsync *a5, unsigned __int32 a6, union _CLS_LSN *a7, union _CLS_LSN *a8, unsigned __int32 *a9)
; CClfsBaseFilePersisted::ReadImage(CClfsBaseFilePersisted *this, struct _CLFS_CONTROL_RECORD **a2)
; ClfsReadNextLogRecord(struct _LOGIOCB *a1, union _CLS_LSN *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; CClfsKernelMarshallingContext::ReadNextLogRecord(CClfsKernelMarshallingContext *this, struct _LOGIOCB *a2, char a3, union _CLS_LSN *const a4, struct _CLFS_RECORD_HEADER **a5)
; ClfsReadRestartArea(CClfsKernelMarshallingContext *this, void **a2, unsigned __int32 *a3, union _CLS_LSN *a4, void **a5)
; ClfsReadLogRecord(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; CClfsKernelMarshallingContext::ReadRestartArea(CClfsKernelMarshallingContext *this, void **a2, unsigned __int32 *a3, union _CLS_LSN *a4, void **a5)
; ClfsReadRestartAreaInternal(__int64 a1, void *a2, int a3, __int64 a4, unsigned __int32 *a5)
; CClfsRequest::ReadRestart(CClfsRequest *this, void *a2, int a3, struct _KEVENT *a4)
; ClfsCreateMarshallingArea(struct _FILE_OBJECT *a1, enum _POOL_TYPE a2, void *(__stdcall *a3)(enum _POOL_TYPE, unsigned __int64, unsigned __int32), __int64 a4, unsigned __int32 a5, unsigned __int32 a6, unsigned __int32 a7, __int64 a8)
; CClfsKernelMarshallingContext::ReadMarshalledLogRecord(CClfsKernelMarshallingContext *this, struct _LOGIOCB *a2, unsigned __int32 *a3, unsigned __int8 *a4)
; CClfsKernelMarshallingContext::ReadLogRecord(__int64 a1, union _CLS_LSN *a2, int a3, __int64 a4, __int64 a5)
; ClfsTerminateReadLog(struct _LOGIOCB *a1)
; ClfsReadLogRecordInternal(__int64 a1, __int64 a2, unsigned __int32 a3, void *a4, unsigned __int32 a5, unsigned __int32 *a6)
; CClfsRequest::ReadLogBlock(CClfsRequest *this, union _CLS_LSN *a2, int a3, void *a4, unsigned __int32 a5, struct _KEVENT *a6, union _CLS_LSN *a7, unsigned __int32 *a8)
; CClfsContainer::SetCompression(CClfsContainer *this, struct _IO_STATUS_BLOCK *a2)
; CClfsRequest::ReadLogPagingIo(CClfsRequest *this)
; CClfsContainer::Open(CClfsContainer *this, struct _UNICODE_STRING *a2, const struct _CLFS_FILTER_CONTEXT *a3, char a4, unsigned __int8 *a5)
; CClfsContainer::ReadSector(CClfsContainer *this, ULONG_PTR BugCheckParameter2, ULONG_PTR BugCheckParameter3, const struct _CLFS_READ_BUFFER *a4, unsigned __int32 a5, const unsigned __int64 *a6)
; CClfsBaseFilePersisted::ReadMetadataBlock(CClfsBaseFilePersisted *this, unsigned int a2)
; CClfsRequest::ReserveAndAppendLog(CClfsRequest *this, struct _IRP *a2, void *a3, int a4, const __int64 *a5, HANDLE Handle, const __int64 *a7, unsigned __int8 a8, struct _KEVENT *Handlea, union _CLS_LSN *a10, const union _CLS_LSN *a11, union _CLS_LSN *a12, unsigned __int32 *a13)
; ClfsReserveAndAppendLogInternal(struct _FILE_OBJECT *a1, __int64 *a2, HANDLE a3, __int64 *a4, __int64 a5, __int64 a6, union _CLS_LSN *a7, __int64 a8, union _CLS_LSN *a9, union _CLS_LSN *a10, __int64 a11, __int64 a12, char a13, __int64 a14)
; ClfsReserveAndAppendLog(CClfsKernelMarshallingContext *a1, struct _CLS_WRITE_ENTRY *a2, unsigned __int32 a3, __int64 a4, _QWORD *a5, int a6, __int64 *a7, unsigned __int32 a8, int a9)
; ClfsReserveAndAppendLogAligned(CClfsKernelMarshallingContext *this, struct _CLS_WRITE_ENTRY *a2, unsigned __int32 a3, int a4, __int64 a5, _QWORD *a6, int a7, __int64 *a8, unsigned __int32 a9, int a10)
; CClfsKernelMarshallingContext::ReserveAndAppendLog(CClfsKernelMarshallingContext *this, struct _CLS_WRITE_ENTRY *a2, unsigned __int32 a3, __int64 *a4, unsigned __int32 a5, __int64 *const a6, const union _CLS_LSN *a7, const union _CLS_LSN *a8, unsigned __int32 a9, union _CLS_LSN *a10)
; CClfsKernelMarshallingContext::AppendRecord(CClfsKernelMarshallingContext *this, struct _CLS_WRITE_ENTRY *a2, unsigned __int32 a3, int a4, int a5, __int64 *const a6, unsigned __int32 a7, struct _CLFS_RECORD_HEADER **a8, unsigned __int32 *a9, unsigned __int32 *a10, unsigned __int32 *a11)
; CClfsLogFcbPhysical::SetCacheFileSizes(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, const __int64 *a3, const __int64 *a4)
; CClfsKernelMarshallingContext::AppendWriteBlockToFlushQueue(CClfsKernelMarshallingContext *this, __int64 a2, int a3)
; ClfsCreateLogFile(__int64 a1, struct _UNICODE_STRING *a2, ACCESS_MASK a3, int a4, void *a5, int a6, char a7, int a8, unsigned int a9, __int64 a10, unsigned int a11)
; CClfsLogFcbPhysical::ReadLogPagingIo(CClfsLogFcbPhysical *this, const union _LARGE_INTEGER *a2, const struct _CLFS_READ_BUFFER *a3, unsigned __int32 a4, struct IClfsRequestAsync *a5, unsigned __int32 *a6)
; CClfsBaseFilePersisted::LoadContainerQ(CClfsBaseFilePersisted *this, unsigned __int32 *const a2, int a3, char a4, unsigned __int8 a5, unsigned __int32 *a6, unsigned __int32 *a7, unsigned __int64 *a8)
; CClfsLogFcbVirtual::ReserveAndAppendLog(CClfsLogFcbVirtual *this, struct _FILE_OBJECT *a2, void *a3, int a4, const unsigned __int64 *a5, __int64 *a6, const __int64 *a7, unsigned __int8 a8, struct IClfsRequestAsync *a9, const union _CLS_LSN *a10, struct _IO_STATUS_BLOCK *a11, __int64 *a12, union _CLS_LSN *a13, union _CLS_LSN *a14, union _CLS_LSN *a15)
; CClfsLogFcbPhysical::CompleteAsyncReadBlock(CClfsLogFcbPhysical *this, const union _CLS_LSN *a2, int a3, void *a4, unsigned __int32 a5, unsigned __int64 *a6, union _CLS_LSN *a7)
; CClfsLogFcbPhysical::WriteRestartDone(CClfsLogFcbPhysical *this, char a2)
; CClfsRequest::Create(CClfsRequest *this)
; CClfsBaseFilePersisted::OpenImage(CClfsBaseFilePersisted *this, struct _UNICODE_STRING *a2, const struct _CLFS_FILTER_CONTEXT *a3, char a4, unsigned __int8 *a5)
; CClfsLogFcbPhysical::CreateBaseFileName(PCUNICODE_STRING Source, PUNICODE_STRING Destination)
; CClfsBaseFilePersisted::CreateImage(CClfsBaseFilePersisted *this, struct _UNICODE_STRING *a2, struct _CLFS_FILTER_CONTEXT *a3, PSECURITY_DESCRIPTOR SecurityDescriptor, const struct _CLFS_FILTER_CONTEXT *a5, void *const SecurityDescriptora, unsigned __int8 a7, unsigned __int8 *a8)
; CClfsBaseFilePersisted::CreateMetadataBlock(__int64 a1, int a2, __int64 a3, unsigned int a4)
; CClfsLogFcbVirtual::Create(CClfsLogFcbVirtual *this, char a2, struct IFcbPhysical *a3, void *a4, ACCESS_MASK DesiredAccess, unsigned __int16 a6, ULONG DesiredShareAccess, unsigned __int32 DesiredShareAccessa, struct _ACCESS_STATE *a9, char a10, struct _FILE_OBJECT *FileObject, PFILE_OBJECT a12)
; ClfsAddLogContainerSet(__int64 a1, unsigned __int16 a2, __int64 a3, __int64 a4)
; CClfsBaseFilePersisted::CreateContainer(CClfsBaseFilePersisted *this, const struct _UNICODE_STRING *a2, const unsigned __int64 *a3, int a4, char a5, unsigned __int8 a6, struct CClfsContainer **a7)
; CClfsContainer::Create(CClfsContainer *this, struct _UNICODE_STRING *a2, const unsigned __int64 *a3, const struct _CLFS_FILTER_CONTEXT *a4, void *const a5, unsigned __int8 a6, unsigned __int8 *a7)
; CClfsBaseFilePersisted::CreateContainerSecurityDescriptor(CClfsBaseFilePersisted *this, void *a2, unsigned int a3, void **a4)
; ClfsCreateScanContext(void *Dst, int a2, unsigned int a3, char a4, void *Dsta)
; CClfsContainer::SetInformation(CClfsContainer *this, struct _IO_STATUS_BLOCK *a2, void *a3, int a4, enum _FILE_INFORMATION_CLASS a5)
; CClfsLogFcbPhysical::TearDownOpen(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2)
; CClfsLogFcbVirtual::ReadRestart(CClfsLogFcbVirtual *this, struct _FILE_OBJECT *a2, const struct _CLFS_READ_BUFFER *a3, __int64 a4, struct IClfsRequestAsync *a5, unsigned __int32 a6, union _CLS_LSN *a7, union _CLS_LSN *a8, unsigned __int32 *a9)
; CClfsLogFcbVirtual::CompleteAsyncReadBlock(CClfsLogFcbVirtual *this, const union _CLS_LSN *a2, unsigned int a3, void *a4)
; CClfsLogFcbPhysical::CompleteAsyncReadClientBlock(CClfsLogFcbPhysical *this, char a2, const union _CLS_LSN *a3, unsigned int a4, void *a5, unsigned __int32 a6, unsigned __int64 *a7, union _CLS_LSN *a8)
; CClfsLogFcbVirtual::ReadLogBlock(CClfsLogFcbVirtual *this, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3, __int64 a4, const struct _CLFS_READ_BUFFER *a5, unsigned __int32 a6, struct IClfsRequestAsync *a7, unsigned __int32 a8, union _CLS_LSN *a9, unsigned __int32 *a10)
; CClfsLogFcbPhysical::ReadClientBlock(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, struct _CLFS_OWNER_ENTRY *a3, const union _CLS_LSN *a4, const union _CLS_LSN *a5, const struct _CLFS_OWNER_REFERRAL *a6, const struct _CLFS_OWNER_ENTRY *const a7, unsigned __int32 a8, const struct _CLFS_READ_BUFFER *a9, unsigned __int32 a10, struct IClfsRequestAsync *a11, unsigned __int32 a12, union _CLS_LSN *a13, unsigned __int32 *a14)
; CClfsLogFcbPhysical::ReadOwnerPage(CClfsLogFcbPhysical *this, const union _CLS_LSN *a2, union _CLS_LSN *a3, unsigned __int8 a4, unsigned __int8 *a5, union _CLS_LSN *a6)
; CClfsLogFcbPhysical::ReadRawOwnerPage(CClfsLogFcbPhysical *this, const union _CLS_LSN *a2, struct _CLFS_LOG_BLOCK_HEADER *a3, __int64 a4, unsigned __int8 a5, PERESOURCE Resource, unsigned __int32 *a7)
; CClfsManagedLogCollection::FindOrCreateManagedLog(CClfsManagedLogCollection *this, struct _FILE_OBJECT *a2, struct CClfsManagedLog **a3)
; ClfsMgmtSetLogFileSize(struct _FILE_OBJECT *a1, struct _ERESOURCE *a2, unsigned __int64 *a3)
; ClfsMgmtSetLogFileSizeAsClient(struct _FILE_OBJECT *a1, struct CClfsManagedLogClient *a2, PERESOURCE Resource, unsigned __int64 *a4)
; CClfsManagedLog::SetLogFileSize(ULONG_PTR BugCheckParameter4, PERESOURCE Resource, struct CClfsManagedLogClient *a3, unsigned __int64 *a4, void (__stdcall *Resourcea)(struct _FILE_OBJECT *, __int32, void *), void *a6)
; CClfsBaseFile::LoadClientBaseLsn(CClfsBaseFile *this, union _CLS_LSN *const a2, __int64 a3, unsigned __int32 *a4)
; CClfsBaseFilePersisted::CreateAbsoluteContainerPath(CClfsBaseFilePersisted *this, const struct _UNICODE_STRING *a2, struct _UNICODE_STRING *a3)
; CClfsLogFcbVirtual::Open(CClfsLogFcbVirtual *this, unsigned __int8 a2, __int64 DesiredAccess, void *a4, ULONG DesiredShareAccess, unsigned __int32 DesiredAccessa, unsigned __int32 DesiredShareAccessa, struct _ACCESS_STATE *a8, char a9, PFILE_OBJECT FileObject, struct CClfsLogCcb *a11)
; CClfsLogCcb::SetFileSystemFlag(ULONG_PTR BugCheckParameter4)
; CClfsDriver::ReadRegistry(CClfsDriver *this, unsigned __int32 *a2)
; CClfsLogFcbPhysical::ReadRestart_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::ReadImage_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsKernelMarshallingContext::ReadRestartArea_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsReadRestartAreaInternal_fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadRestart_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsKernelMarshallingContext::ReadMarshalledLogRecord_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsKernelMarshallingContext::ReadLogRecord_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsReadLogRecordInternal_fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadLogBlock_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsContainer::SetCompression_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadLogPagingIo_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsContainer::Open_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsContainer::ReadSector_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::ReadMetadataBlock_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsReserveAndAppendLogInternal_fin_0(__int64 a1, __int64 a2)
; CClfsKernelMarshallingContext::ReserveAndAppendLog_::_1_::fin_0(__int64 a1, __int64 a2, __int64 a3)
; CClfsLogFcbPhysical::SetCacheFileSizes_::_1_::filt_0(__int64 a1)
; CClfsLogFcbPhysical::SetCacheFileSizes_::_1_::fin_1(__int64 a1, __int64 a2)
; CClfsKernelMarshallingContext::AppendWriteBlockToFlushQueue_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsCreateLogFile_fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadLogPagingIo_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::LoadContainerQ_::_1_::fin_0(CClfsBaseFilePersisted *a1, __int64 a2, __int64 a3)
; CClfsLogFcbVirtual::ReserveAndAppendLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::WriteRestartDone_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::Create_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::OpenImage_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::CreateImage_::_1_::fin_0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CClfsBaseFilePersisted::CreateMetadataBlock_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::Create_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsAddLogContainerSet_fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::CreateContainer_::_1_::fin_0(CClfsBaseFilePersisted *a1, __int64 a2)
; CClfsContainer::Create_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::CreateContainerSecurityDescriptor_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsCreateScanContext_fin_0(__int64 a1, __int64 a2)
; CClfsContainer::SetInformation_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::TearDownOpen_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::ReadLogBlock_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadClientBlock_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadOwnerPage_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadRawOwnerPage_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsMgmtSetLogFileSizeAsClient_fin_0(__int64 a1, __int64 a2)
; CClfsManagedLog::SetLogFileSize_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFile::LoadClientBaseLsn_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFilePersisted::CreateAbsoluteContainerPath_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::Open_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFileSnapshot::CopyImage(CClfsBaseFileSnapshot *this, unsigned int a2, unsigned __int32 a3, unsigned __int8 *a4, unsigned __int32 *a5)
; CClfsBaseFileSnapshot::CopyImage_::_1_::fin_0(__int64 a1, __int64 a2, __int64 a3, unsigned __int32 *a4)
; CClfsBaseFilePersisted::CreateSharedSecurityContext(CClfsBaseFilePersisted *this, unsigned __int8 a2, void *const a3)
; CClfsBaseFilePersisted::CreateSharedSecurityContext_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFile::CreateSnapshot(CClfsBaseFile *this, struct CClfsBaseFileSnapshot **a2)
; CClfsBaseFile::CreateSnapshot_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsBaseFileSnapshot::ReadContainerQ(CClfsBaseFileSnapshot *this, unsigned __int32 *const a2, struct _CLFS_CLIENT_CONTEXT *a3, unsigned __int32 *a4, unsigned __int32 *a5, unsigned __int64 *a6)
; CClfsBaseFileSnapshot::ReadContainerQ_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsContainer::SetSecurityInformation(CClfsContainer *this, struct _IO_STATUS_BLOCK *a2, const unsigned __int32 *a3, void *a4)
; CClfsContainer::SetSecurityInformation_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadArchiveMetadata(CClfsRequest *this)
; CClfsRequest::ReadArchiveMetadata_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadLogBlock(CClfsRequest *this)
; CClfsRequest::ReadLogBlock_::_1_::fin_0_0(__int64 a1, __int64 a2)
; CClfsRequest::ReadRestart(CClfsRequest *this)
; CClfsRequest::ReadRestart_::_1_::fin_0_0(__int64 a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog(CClfsRequest *this)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_5(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_1(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_0(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_2(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_3(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::filt_4(struct _EXCEPTION_POINTERS *a1, __int64 a2)
; CClfsRequest::ReserveAndAppendLog_::_1_::fin_6(__int64 a1, __int64 a2)
; CClfsRequest::SetArchiveTail(CClfsRequest *this)
; CClfsRequest::SetArchiveTail_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::SetEndOfLog(CClfsRequest *this)
; CClfsRequest::SetEndOfLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsRequest::SetSecurityInformation(CClfsRequest *this)
; CClfsRequest::SetSecurityInformation_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogCcb::ReadArchiveMetadata(CClfsLogCcb *this, unsigned int a2, unsigned __int32 a3, unsigned __int8 *a4, unsigned __int32 *a5)
; CClfsLogCcb::ReadArchiveMetadata_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::ReadOneRawSectorSync(CClfsLogFcbPhysical *this, struct CClfsContainer **a2, unsigned __int32 *a3, union _CLS_LSN *a4, union _CLS_LSN *a5, unsigned __int8 a6, PRKEVENT Event)
; CClfsLogFcbPhysical::SetArchiveTail(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3)
; CClfsLogFcbPhysical::SetArchiveTail_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::SetArchiveTail(CClfsLogFcbVirtual *this, struct _FILE_OBJECT *a2, const union _CLS_LSN *a3)
; CClfsLogFcbVirtual::SetArchiveTail_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbPhysical::SetEndOfLog(CClfsLogFcbPhysical *this, struct _FILE_OBJECT *a2, unsigned __int8 a3, struct _CLFS_TRUNCATE_CLIENT_CHANGE *const a4, unsigned __int32 a5)
; CClfsLogFcbPhysical::SetEndOfLog_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::SetEndOfLog(CClfsLogFcbVirtual *this, struct _FILE_OBJECT *a2, char a3, struct _CLFS_TRUNCATE_CLIENT_CHANGE *const a4)
; CClfsLogFcbPhysical::SetLogFileInfo(__int64 a1, struct _FILE_OBJECT *a2, int a3, __int64 a4, unsigned int a5)
; CClfsLogFcbPhysical::SetLogFileInfo_::_1_::fin_0(__int64 a1, __int64 a2)
; CClfsLogFcbVirtual::SetLogFileInfo(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; CClfsLogFcbVirtual::SetLogFileInfo_::_1_::fin_0(__int64 a1, __int64 a2)
; ClfsRemoveLogContainerSet(__int64 a1, unsigned __int16 a2, __int64 a3, char a4)
; ClfsRemoveLogContainerSet_fin_0(__int64 a1, __int64 a2)
; ClfsSetArchiveTail(__int64 a1, __int64 a2)
; ClfsSetArchiveTail_fin_0(__int64 a1, __int64 a2)
; ClfsSetLogFileInformation(__int64 a1, unsigned int a2, __int64 a3, int a4)
; ClfsSetLogFileInformation_fin_0(__int64 a1, __int64 a2)
; ClfsMgmtSetNotification(void *a1, struct _CLFS_MGMT_SET_NOTIFICATION *a2)
; ClfsMgmtUserModeSetSizeCompletion(struct _FILE_OBJECT *a1, unsigned int a2, void *a3)
; CClfsManagedLogClientUser::CreateNotification(__int64 a1, int a2, int a3, __int64 a4, unsigned __int8 a5)
; CClfsManagedLogClientUser::ReadNotification(CClfsManagedLogClientUser *this, struct IClfsRequestAsync *a2, unsigned __int32 *a3)
; CClfsManagedLogClientUser::ReadNotification_::_1_::fin_0(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\CmBatt.c ;
; CmBattSetCoolingPercentage(__int64 a1, char a2)
; CmBattSetPowerState(PDEVICE_OBJECT DeviceObject, PVOID Tag)
; CmBattOpenClose(__int64 a1, __int64 a2)
; CmBattSetStatusNotify(__int64 a1, int a2, __int64 a3)
; CmBattSendDownStreamIrp(PDEVICE_OBJECT DeviceObject, PVOID a2, void *a3, ULONG a4, PVOID a5, ULONG a6)
; CmBattSetTripPpoint(__int64 a1, void *a2)
; CmBattSetThrottle(__int64 a1, int a2)
; CmBattCreateFdo(struct _DRIVER_OBJECT *a1, struct _DEVICE_OBJECT *a2, ULONG a3, __int64 a4)
; CmBattSetWmiDataItem(PDEVICE_OBJECT DeviceObject, PIRP Irp, int a3, __int64 a4, int a5, int a6, __int64 a7)
; CmBattSetWmiDataBlock(PDEVICE_OBJECT DeviceObject, PIRP Irp, int a3, __int64 a4, __int64 a5, __int64 a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\cng.c ;
; SymCryptSha512Append(__int64 a1, const void *a2, size_t a3)
; SymCryptSha512AppendBlocks_ull(__int64 a1, __int64 a2, unsigned __int64 a3)
; CngCreateProcessNotifyRoutine(__int64 a1, __int64 a2, char a3)
; KeRegOpenKey(void *a1, const WCHAR *a2, ACCESS_MASK a3, HANDLE *a4)
; SymCryptAesDecryptAsmInternal@<rax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, __int64 a5@<r9>, unsigned __int64 a6@<r10>, __int64 a7@<r11>, __int64 a8@<r12>)
; SymCryptAesDecryptAsm@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebp>, int a4@<edi>, int a5@<esi>, __int64 a6@<r8>)
; SymCryptAesCbcDecryptAsm(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebp>, int a4@<edi>, int a5@<esi>, unsigned __int64 a6@<r8>, __int64 a7@<r9>, __int64 a8)
; SymCryptAesDecryptXmm(__int64 a1, __m128i *a2, __int64 a3)
; SymCryptAesDecryptXmm4(__m128i *a1@<rcx>, unsigned __int64 a2@<r10>, __m128i a3@<xmm0>, __m128i a4@<xmm1>, __m128i a5@<xmm2>, __m128i a6@<xmm3>)
; SymCryptAesCbcDecryptXmm(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, __m128i a4@<xmm1>, __m128i a5@<xmm2>, __m128i a6@<xmm3>, __m128i a7@<xmm7>, __m128i a8@<xmm8>, __int64 a9)
; SymCryptAesCreateDecryptionRoundKeyXmm(__int64 a1, __int64 a2)
; DecrementReferenceCount(__int64 a1)
; SymCryptSha1Append(unsigned __int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptSha1AppendBlocksAsm(__int64 a1, unsigned __int64 a2, __int64 a3)
; SymCryptCbcDecrypt(__int64 a1, __int64 a2, const void *a3, const void *a4, __int64 a5, __int64 a6)
; SymCrypt3DesDecrypt(__int64 a1, __int64 a2, __int64 a3)
; BCryptDecrypt(__int64 a1, __int64 a2, __int64 a3, void *Dst, int a5, int a6, __int64 Dsta, int a8, __int64 a9, void *a10)
; MSCryptDecrypt(__int64 a1, unsigned __int64 a2, unsigned int a3, __int64 a4, const void *a5, int a6, __int64 a7, unsigned int a8, __int64 a9, int a10)
; MSBlockDecrypt(__int64 a1, __int64 a2, const void *a3)
; SymCryptAesCbcDecrypt(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebp>, int a4@<edi>, int a5@<esi>, unsigned __int64 a6@<r8>, __int64 a7@<r9>, __m128i *a8@<xmm1>, __m128i *a9@<xmm2>, __m128i *a10@<xmm3>, __m128i *a11@<xmm7>, __m128i *a12@<xmm8>, __int64 a13)
; TlsDecryptPacket(void *a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5, int a6, __int64 a7, unsigned __int64 a8)
; SPSslDecryptPacket(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5, int a6, __int64 a7, unsigned __int64 a8, int a9)
; SslDecryptPacket(__int64 a1, __int64 a2)
; SslDecrementProviderReferenceCount(__int64 a1)
; BCryptOpenAlgorithmProvider(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; MSCryptOpenSymmetricProvider(__int64 a1, __int64 a2, signed int a3)
; LoadProvider(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FindInLoadedProviderList(__int64 a1)
; LoadInterface(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SPSslOpenProvider(__int64 a1, __int64 a2, int a3)
; SslOpenProvider(__int64 a1, __int64 a2, int a3)
; MSCryptSetAlgProperty(__int64 a1, const wchar_t *a2, __int64 a3, int a4)
; MSCryptSetProperty(__int64 a1, __int64 a2, const void *a3, int a4, int a5)
; MSCryptCreateMultiHash@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, size_t a3@<rbx>, unsigned int a4@<r8d>, __int64 a5@<r9>)
; BCryptCreateHash(void *Src, size_t Size, void *a3, unsigned int a4, void *Srca, size_t Sizea)
; MSCryptCreateHash@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, size_t a3@<rbx>, __int64 a4@<r8>)
; ReverseMemCopy(unsigned __int64 a1, __int64 a2, unsigned int a3)
; MSCryptOpenHashProvider(__int64 a1, __int64 a2, int a3)
; SymCryptSha256Append(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptSha256AppendBlocks_ul1(__int64 a1, __int64 a2, unsigned __int64 a3)
; SymCryptHmacSha1StateCopy(__int64 a1, __int64 a2, __int64 a3)
; SymCryptAesCmacAppend(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptAesCmacKeyCopy(void *Src, void *Dst)
; SymCryptAesCmacStateCopy(__int64 a1, __int64 a2, __int64 a3)
; WideMultiString_Copy_ToSzStringArray(__int64 a1, __int64 a2, __int64 a3)
; SymCryptEcbDecrypt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; SymCryptAesDecrypt(__int64 a1, __m128i *a2, __int64 a3)
; BCryptSetProperty(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; SymCryptCcmEncryptDecryptPart(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; SymCryptCcmDecryptPart(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; SymCryptCcmDecrypt(__int64 a1, __int64 a2, const void *a3, char a4, unsigned __int64 a5, unsigned __int64 a6, unsigned __int64 a7, __int64 a8, unsigned __int64 a9, __int64 a10, __int64 a11)
; SymCryptCcmDecryptFinal(__int64 a1, __int64 a2, __int64 a3)
; MSCryptOpenRngProvider(__int64 a1, const wchar_t *a2, int a3)
; MSCryptKDOpenProvider(__int64 a1, const wchar_t *a2, int a3)
; LoadStringValue(HANDLE KeyHandle, const WCHAR **a2, __int64 a3)
; LoadNumericValue(HANDLE KeyHandle, const WCHAR **a2, void *a3)
; NewLoadedProviderHandle(__int64 a1, __m128i *a2, __int64 a3)
; OpenSystemPreferredAlgorithmProvider(__int64 a1)
; CfgReg_OnLoadTableNode(void *a1, __int64 a2, __int64 a3)
; CfgReg_OnLoadContextNode(void *a1, __int64 a2, __int64 a3)
; CfgReg_OnLoadInterfaceNode(void *a1, __int64 a2, __int64 a3)
; CfgReg_OnLoadFunctionNode(HANDLE KeyHandle, __int64 a2, __int64 a3)
; PrvReg_LoadRoot(__int64 a1)
; PrvReg_OnLoadProviderNode(HANDLE KeyHandle, __int64 a2, __int64 a3)
; PrvReg_OnLoadImageNode(void *a1, __int64 a2, __int64 a3)
; PrvReg_OnLoadInterfaceNode(HANDLE KeyHandle, __int64 a2, __int64 a3)
; LoadMultiStringValue_AsWideMultiString(HANDLE KeyHandle, const WCHAR **a2, __int64 a3)
; WideString_AllocCopy(__int64 a1, __int64 a2)
; LoadBinaryValue(HANDLE KeyHandle, const WCHAR **a2, __int64 a3)
; SetMpErrno(int a1, __int64 a2)
; StringCchCopyW(__int64 a1, __int64 a2, __int64 a3)
; LoadImage(__int64 a1, __int64 a2)
; CreateAndInitializeNewKey(__int64 a1, int a2, __int64 a3)
; MSCryptOpenRsaProvider(__int64 a1, const wchar_t *a2, int a3)
; MSCryptSetRsaProperty(__int64 a1, const wchar_t *a2, __int64 a3, int a4, int a5)
; CfgReg_OnLoadPropertyNode(void *a1, const WCHAR **a2, __int64 a3)
; SymCryptRc2Decrypt(__int64 a1, __int64 a2, __int64 a3)
; BCryptCreateMultiHash(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5)
; LogBCryptOpenProviderFailure(__int64 a1, __int64 a2, __int64 a3, char a4, char a5)
; ReadRegistryDWORD(HANDLE KeyHandle, __int64 a2, __int64 a3)
; SymCryptCfbDecrypt(__int64 a1, unsigned __int64 a2, __int64 a3, const void *a4, void *Src, __int64 a6, unsigned __int64 a7)
; SetMpErrno_clue1(int a1, __int64 a2, __int64 a3)
; CachedOpenAlgorithmProvider(__int64 a1, wchar_t *a2, __int64 a3)
; ConvertRsaFullPrivateBlob(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5)
; ConvertRsaPrivateBlobToFullRsa(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)
; BCryptCreateContext(int a1, __int64 a2, __int64 a3)
; BCryptSetContextFunctionProperty(int a1, __int64 a2, unsigned int a3, __int64 a4, const WCHAR *a5, int a6, __int64 a7)
; PrvReg_SetInterfaceFunctions(__int64 a1, __int64 a2)
; PrvReg_SetProviderAliases(__int64 a1, __int64 a2)
; PrvReg_OnSaveImageNode(HANDLE Handle, int a2, __int64 a3)
; PrvReg_OnSaveInterfaceNode(void *a1, int a2, __int64 a3)
; PrvReg_OnSaveProviderNode(HANDLE Handle, int a2, __int64 a3)
; PrvReg_SaveRoot(void *a1)
; CfgReg_OnSaveContextNode(HANDLE Handle, int a2, __int64 a3)
; CfgReg_OnSaveFunctionNode(void *a1, int a2, __int64 a3)
; CfgReg_OnSaveInterfaceNode(HANDLE Handle, int a2, __int64 a3)
; CfgReg_OnSavePropertyNode(void *a1, int a2, __int64 a3)
; CfgReg_OnSaveTableNode(HANDLE Handle, __int64 a2, __int64 a3)
; CfgReg_SaveRoot(void *a1)
; DataBlock_Copy(void **a1, const void **a2)
; WideString_Copy(__int64 a1, __int64 a2)
; CfgGppConvertRegDataToMultiString(int a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; CfgAdtpAppendSecuritySubjectInfo(__int64 a1, __int64 a2)
; KeRegCreateKey(void *a1, const WCHAR *a2, __int64 a3, HANDLE *a4)
; KeRegSetValue(HANDLE KeyHandle, const WCHAR *a2, ULONG a3, void *a4, ULONG a5)
; SaveBinaryValue(void *a1, const WCHAR **a2, __int64 a3)
; SaveNumericValue(void *a1, const WCHAR **a2, int a3)
; SaveStringValue(void *a1, const WCHAR **a2, __int64 a3)
; SaveWideMultiString_AsMultiStringValue(void *a1, const WCHAR **a2, __int64 a3)
; AssignDomainParameters(__int64 a1, __int64 a2)
; MSCryptEcDhOpenProvider(__int64 a1, const wchar_t *a2, int a3)
; MSCryptEcDhSetProperty(__int64 a1, const wchar_t *a2, __int64 a3, unsigned int a4, int a5)
; MSCryptEcDsaOpenProvider(__int64 a1, const wchar_t *a2, int a3)
; MSCryptEcDsaSetProperty(__int64 a1, const wchar_t *a2, __int64 a3, unsigned int a4, int a5)
; MSCryptEccOpenProvider(__int64 a1, const wchar_t *a2, int a3, int a4)
; MSCryptEccSetProperty(__int64 a1, const wchar_t *a2, __int64 a3, unsigned int a4, int a5, int a6)
; SetEccPrivateKeyVal(__int64 a1, __int64 a2, unsigned int a3)
; IsModulusCreated(__int64 a1)
; MSCryptOpenDHProvider(__int64 a1, __int64 a2, int a3)
; MSCryptSetDHKeyPairProperty(__int64 a1, const wchar_t *a2, __int64 a3, unsigned int a4, int a5)
; MSCryptSetDHProperty(__int64 a1, const wchar_t *a2, __int64 a3, unsigned int a4, int a5)
; SetPrivateKeyVal(__int64 a1, __int64 a2, unsigned int a3)
; MSCryptKDSetProperty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; MSCryptRsaDecrypt(__int64 a1, __int64 a2, unsigned int a3, __int64 *a4, __int64 a5, __int64 a6, void *Dst, unsigned int a8, __int64 a9, void *a10)
; MSCryptSetHashProperty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; MSCryptSetRngProperty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; MSCryptSetKeyProperty(__int64 a1, __int64 a2, const void *a3, int a4)
; MSCryptCreateSecret(__int64 a1, unsigned int a2, __int64 a3)
; Ssl2DecryptPacket(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4)
; Tls1AeadDecrypt@<rax>(__int64 a1@<rcx>, __int64 a2@<rbx>, unsigned __int64 a3@<r8>, __int64 a4@<r9>)
; SymCryptHmacSha512StateCopy(void *Src, __int64 a2, void *a3)
; SymCryptGcmDecrypt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, unsigned __int64 a6, __int64 a7, __int64 a8, const void *a9)
; SymCryptGcmDecryptFinal(__int64 a1, const void *a2, size_t a3)
; SymCryptGcmDecryptPart(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; SymCryptGcmEncryptDecryptPart(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; SymCryptGcmStateCopy(__int64 a1, __int64 a2, __int64 a3)
; SymCryptMd2Append(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptMd2AppendBlocks(__int64 a1, __m128i *a2, unsigned __int64 a3)
; SymCryptMd5Append(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptMd5AppendBlocks(__int64 a1, __int64 a2, unsigned __int64 a3)
; SymCryptMd4Append(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptMd4AppendBlocks(__int64 a1, __int64 a2, unsigned __int64 a3)
; SymCryptHmacMd5StateCopy(__int64 a1, __int64 a2, __int64 a3)
; SymCryptParallelSha256AppendBlocks_xmm(__int64 a1, __int64 a2, unsigned __int64 a3)
; SymCryptParallelSha256AppendBytes(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)
; SymCryptParallelSha256SetNextWork(void *Dst)
; SymCryptDesxDecrypt(__int64 a1, __int64 a2, __int64 a3)
; SymCryptGHashAppendDataC(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)
; SymCryptGHashAppendDataPclmulqdq(__int64 a1, const __m128i *a2, const __m128i *a3, unsigned __int64 a4)
; SymCryptGHashAppendDataXmm(const __m128i *a1, __m128i *a2, __int64 a3, unsigned __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\CompositeBus.c ;
; Bus_EvtDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; Bus_EvtCompositeDecay(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\condrv.c ;
; CdpCancelReadIoIrp(__int64 a1, __int64 a2)
; CdpDispatchCreate(__int64 a1, __int64 a2)
; CdCreateClient(__int64 a1, unsigned int a2)
; CdReadIoInput(__int64 a1, char a2, unsigned __int64 a3, int a4, __int64 a5)
; CdpCompleteReadIoIrp(__int64 a1, __int64 a2)
; CdpCreateMdlChain(__int64 Operation, __int64 a2, unsigned int a3, KPROCESSOR_MODE a4, PMDL Operationa)
; CdpReadIoInput(__int64 a1, __int64 a2, __int64 a3)
; CdpConvertClientDesiredAccess(__int64 a1, int a2)
; CdCreateConnection(__int64 a1)
; CdpCreateServerConnectionIo(__int64 a1, __int64 a2)
; CdCreateDefaultObjectClient(PIRP Irp, int a2)
; CdpSetServerInformation(__int64 a1, KPROCESSOR_MODE a2, unsigned __int64 a3, int a4)
; CdpCreateProcess(__int64 a1, __int64 a2)
; CdCreateServer(PIRP Irp)
; CdCreateReferenceObject(PIRP Irp)
; CdCreateSecurityDescriptor(__int64 a1, __int64 a2)
; CdCreateBroker(PIRP Irp)
; CdpClientRead(__int64 a1, __int64 a2)
; CdpDispatchRead(__int64 a1, __int64 a2)
; CdpDispatchSetSecurity(__int64 a1, __int64 a2)
; CdpCreateBrokerConnectionIo(PIRP Irp)
; CdCreateDisplayObject(PIRP Irp)
; CdpSetCursorInformation(__int64 a1, unsigned __int64 a2, unsigned int a3)
; CdReadNextIo(__int64 a1, __int64 a2)
; CdpCancelReadIoIrpPaged(__int64 a1)
; CdpServerSetSecurity(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\crashdmp.c ;
; CrashdmpReady(char a1)
; LoadFilterDrivers(__int64 a1, __int64 a2)
; ReadRegString(__int64 a1, __int64 a2, __int64 a3)
; SetChangeState(char a1, char a2)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; ReadLogDataFromDisk(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; CrashdmpReadRoutine(int a1, __int64 a2, __int64 a3)
; CreateDumpFile(__int64 a1)
; CreateLogFile@<rax>(const WCHAR *a1@<rdx>, __int64 a2@<rcx>, LARGE_INTEGER a3@<rsi>, unsigned int a4@<r8d>)
; CreateSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, __int64 a2)
; FindNextSetBitRange64(ULONG *a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; CrashdmpLoadDumpStack(HANDLE Handle, __int64 a2, int a3, int a4, HANDLE Handlea)
; LoadPortDriver(__int64 a1, __int64 a2)
; CrashdmpLoadDriver(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5)
; ReadRegULongKey(__int64 a1, __int64 a2, __int64 a3, int a4)
; ReadRegistrySettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dam.c ;
; DampPowerSettingCallback(__int64 a1, __int64 a2, int a3)
; DampCreateJobInfo(void *Dst)
; DampCreateProcessCallback(__int64 a1, int a2, __int64 a3)
; DamSetState(__int64 a1)
; DamOpenRegistryEvents(UNICODE_STRING *a1)
; DamIoTrackingSetTrackingIntervalType(int a1))[3]
; PdcPortOpen(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dfsc.c ;
; DfscReferralSetCurrentAccessStatus(__int64 a1, int a2)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; DfscNetUseIncrementOpenHandleCount(__int64 a1, __int64 a2, __int64 a3)
; DfscRmGenerateDomainDcReferralFromDCName(PCUNICODE_STRING SourceString, __int64 a2, __int64 a3, char a4)
; DfscIsDomainController_filt_0(__int64 a1)
; DfscIsDomainController_filt_1(__int64 a1)
; DfscConnOpenIpcConnection(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; DfscCreateTreeConnectName(__int64 a1, __int64 a2, ULONG a3, __int64 a4)
; DfscCreateNetUseTreeConnection(UNICODE_STRING *a1, __int64 a2, __int64 a3, __int64 a4)
; DfscNetUseCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DfscCreateNetUseConnection(__int64 a1, __int64 a2, __int64 a3, __int64 a4, signed int a5)
; DfscRmSetReferralType(__int64 a1, int a2, int a3)
; DfscNetUseCopyEnumEntry(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; DfscFsctrlCreateDriveLetter(__int64 a1, __int64 a2, unsigned int a3)
; DfscDomainCacheLookup(__int64 a1, __int64 a2, __int64 a3)
; DfscSurrogateCreate(__int64 a1)
; DfscCredCreateCredentialsFromEAs(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; DfscCredCreateExplicitCredentials(__int64 *a1, __int16 a2, void *Src, size_t Size, int a5, int Srca, int Sizea, int a8, __int64 a9, __int64 a10)
; DfscCreateNameFromUnicodeString(UNICODE_STRING *a1, __int64 a2, ULONG a3)
; DfscCredCopyNonCredEAs(void *Src, __int64 a2)
; DfscRmCreateRefContext(__int64 a1, char a2, __int64 a3)
; DfscCredCreateKeymgrCredentials(__int64 a1, __int64 a2, __int64 a3)
; DfscConnOpenIpcConnectionCallout(__int64 a1)
; DfscConnOpenIpcConnectionCallin(__int64 a1, __int64 a2, __int64 a3)
; DfscCreate(__int64 a1, __int64 a2)
; DfscSetMatchingTarget(__int64 a1, __int64 a2)
; DfscCopyTargetAccessStatus(__int64 a1, __int64 a2)
; DfscIsKnownDomainName(__int64 a1, __int64 a2)
; DfscFsctrlSetDomainNameFlat(__int64 a1, __int64 a2, unsigned int a3)
; DfscSetCurrentDcContext(__int64 a1)
; DfscFsctrlSetDcName(__int64 a1, const void *a2, unsigned int a3, char a4)
; DfscFsctrlSetDomainNameDns(__int64 a1, __int64 a2, unsigned int a3)
; DfscGetDomainReferral(__int64 a1, __int64 a2, __int64 a3)
; DfscCopyDcList(__int64 a1, __int64 a2)
; DfscRmGetDomainReferral(__int64 a1, __int64 a2, __int64 a3)
; DfscRmGenerateDomainReferralsFromResponse(__int64 a1, __int64 a2, unsigned int a3)
; DfscDomainCacheStore(__int64 a1)
; DfscRmValidateDomainIterate(__int64 a1)
; DfscCredCreateTargetNameCopy(__int64 a1, UNICODE_STRING *a2, __int64 a3)
; DfscCreateCscEa(__int64 a1, __int64 a2, __int64 a3)
; DfscCreateSymbolicLink(__int16 a1, size_t a2, const wchar_t *a3)
; DfscCreateLinkedConnection(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)
; DfscCreateLinkedConnectionWorker(PVOID StartContext)
; DfscFsctrlFlushDomainCache(__int64 a1, __int64 a2, unsigned int a3)
; DfscFsctrlGetDomainCache(__int64 a1, __int64 a2, unsigned int a3, signed __int64 a4, unsigned int a5, int a6)
; DfscFsctrlSetClientInfo(__int64 a1, __int64 a2, int a3)
; DfscFsctrlSetClientInfo_fin_0(__int64 a1, __int64 a2)
; DfscFsctrlSpecialSetDc(struct _IRP *a1, unsigned __int64 a2, unsigned int a3)
; DfscGetDcListForDomain(__int64 a1, __int64 a2, signed __int64 a3, unsigned int a4, int a5)
; DfscGetDomainCacheNames(__int64 a1, void *a2, unsigned int a3)
; DfscSetActiveDcForDomain(PCUNICODE_STRING SourceString, PCUNICODE_STRING String2)
; DfscGetDomainDCReferral(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DfscRmGenerateDomainDcReferralFromResponse(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; DfscRmGetDomainDcReferral(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DfscRmGetDomainDcReferralSize(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\disk.c ;
; DiskReadWriteVerification(__int64 a1, __int64 a2)
; DiskReadDriveCapacity(__int64 a1)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; DiskIoctlSetVerify(__int64 a1, __int64 a2)
; SetSrbScsiData(__int64 a1, char a2, int a3, __int64 a4, __int64 a5, char a6)
; DiskReadFailurePredictStatus(__int64 a1, __int64 a2)
; DiskReadFailurePredictData(__int64 a1, __int64 a2)
; DiskCreateSymbolicLinks(__int64 a1)
; DiskReadSignature(__int64 a1)
; DiskCreateFdo(__int64 a1, struct _DEVICE_OBJECT *a2, unsigned int *a3, char a4)
; DiskIoctlGetCacheSetting(__int64 a1, __int64 a2)
; DiskIoctlSetCacheInformation(__int64 a1, __int64 a2)
; DiskIoctlSetCacheSetting(__int64 a1, __int64 a2)
; DiskSetCacheInformation(__int64 a1, __int64 a2)
; DiskSetInfoExceptionInformation(__int64 a1, unsigned __int64 a2)
; DiskSetSpecialHacks(__int64 a1, __int64 a2)
; DiskFdoSetWmiDataBlock(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; DiskFdoSetWmiDataItem(__int64 a1, __int64 a2, __int64 a3)
; DiskReadFailurePredictThresholds(__int64 a1, __int64 a2)
; DiskReadSmartLog(__int64 a1, unsigned __int8 a2, __int64 a3, char *a4)
; DiskSaveBusDetectInfo(__int64 a1, void *a2, unsigned int a3)
; DiskSaveDetectInfo(__int64 a1)
; DiskSaveGeometryDetectInfo(__int64 a1, void *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Diskdump.c ;
; SetupIoRequest(void *Dst, __int64 a2, __int64 a3, char a4)
; DiskDumpOpen(__int64 a1)
; DiskDumpRead(unsigned int a1, __int64 a2, __int64 a3)
; ScsiPortReadPortUchar(unsigned __int16 a1)
; ScsiPortReadPortUshort(unsigned __int16 a1)
; ScsiPortReadPortUlong(unsigned __int16 a1)
; ScsiPortReadRegisterUchar(__int64 a1)
; ScsiPortReadRegisterUshort(__int64 a1)
; ScsiPortReadRegisterUlong(__int64 a1)
; ScsiPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortConvertUlongToPhysicalAddress(__int64 a1)
; ScsiPortConvertPhysicalAddressToUlong(unsigned int a1)
; ScsiPortReadPortBufferUchar(unsigned __int16 a1, unsigned __int8 *a2, unsigned int a3)
; ScsiPortReadPortBufferUshort(unsigned __int16 a1, unsigned __int16 *a2, unsigned int a3)
; ScsiPortReadPortBufferUlong(unsigned __int16 a1, unsigned int *a2, unsigned int a3)
; StorPortReadPortUchar(__int64 a1, unsigned __int16 a2)
; StorPortReadPortUshort(__int64 a1, unsigned __int16 a2)
; StorPortReadPortUlong(__int64 a1, unsigned __int16 a2)
; StorPortReadPortBufferUchar(__int64 a1, unsigned __int16 a2, unsigned __int8 *a3, unsigned int a4)
; StorPortReadPortBufferUshort(__int64 a1, unsigned __int16 a2, unsigned __int16 *a3, unsigned int a4)
; StorPortReadPortBufferUlong(__int64 a1, unsigned __int16 a2, unsigned int *a3, unsigned int a4)
; StorPortReadRegisterUchar(__int64 a1, __int64 a2)
; StorPortReadRegisterUshort(__int64 a1, __int64 a2)
; StorPortReadRegisterUlong(__int64 a1, __int64 a2)
; StorPortReadRegisterBufferUchar(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; StorPortReadRegisterBufferUshort(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; StorPortReadRegisterBufferUlong(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Dmpusbstor.c ;
; DumpUsbStor_Setup(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dmvsc.c ;
; DmcWorkerIoReady(__int64 a1)
; PkpFreeDoubleMappedBuffer(PMDL MemoryDescriptorList)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\drmk.c ;
; DrmCreateContentMixed(__int64 a1, unsigned int a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\drmkaud.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Dumpata.c ;
; IdeDumpOpen(__int64 a1)
; IdeDumpRead(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)
; IdeDumpSetupCrb(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int16 a6)
; IdeDumpReadWriteCompletion(__int64 a1)
; IdeReadGeneralPurposeLog(__int64 a1, char a2, PMDL MemoryDescriptorList, __int64 a4, ULONG a5, PMDL MemoryDescriptorLista)
; AtaPortReadPortUchar(unsigned __int16 a1)
; AtaPortReadPortUshort(unsigned __int16 a1)
; AtaPortReadPortUlong(unsigned __int16 a1)
; AtaPortReadPortBufferUchar(unsigned __int16 a1, unsigned __int8 *a2, unsigned int a3)
; AtaPortReadPortBufferUshort(unsigned __int16 a1, unsigned __int16 *a2, unsigned int a3)
; AtaPortReadPortBufferUlong(unsigned __int16 a1, unsigned int *a2, unsigned int a3)
; AtaPortReadRegisterUchar(__int64 a1)
; AtaPortReadRegisterUshort(__int64 a1)
; AtaPortReadRegisterUlong(__int64 a1)
; AtaPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortConvertUlongToPhysicalAddress(__int64 a1)
; AtaPortConvertPhysicalAddressToUlong(unsigned int a1)
; AtaPortRegistryRead(__int64 a1, char a2, char a3, __int64 a4, char a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dumpfve.c ;
; SymCryptSha1Append(unsigned __int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptSha256Append(__int64 a1, const void *a2, unsigned __int64 a3)
; SymCryptSha256AppendBlocks_ul1(__int64 a1, __int64 a2, unsigned __int64 a3)
; FveAesCbcDecryptSectorsNormal@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int64 a3@<r8>, unsigned int a4@<r9d>, __m128i *a5@<xmm1>, __m128i *a6@<xmm2>, __m128i *a7@<xmm3>, __m128i *a8@<xmm7>, __m128i *a9@<xmm8>, __int64 a10, int a11)
; FveAesCcmDecrypt(__int64 a1, __int64 a2, __int64 a3, void *a4, int a5, __int64 a6, __int64 a7, __int64 a8)
; FvepAesCcmEncryptDecrypt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; SymCryptAesDecryptAsmInternal@<rax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, __int64 a5@<r9>, unsigned __int64 a6@<r10>, __int64 a7@<r11>, __int64 a8@<r12>)
; SymCryptAesDecryptAsm@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebp>, int a4@<edi>, int a5@<esi>, __int64 a6@<r8>)
; SymCryptAesCbcDecryptAsm(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebp>, int a4@<edi>, int a5@<esi>, unsigned __int64 a6@<r8>, __int64 a7@<r9>, __int64 a8)
; SymCryptAesDecryptXmm(__int64 a1, __m128i *a2, __int64 a3)
; SymCryptAesDecryptXmm4(__m128i *a1@<rcx>, unsigned __int64 a2@<r10>, __m128i a3@<xmm0>, __m128i a4@<xmm1>, __m128i a5@<xmm2>, __m128i a6@<xmm3>)
; SymCryptAesCbcDecryptXmm(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, __m128i a4@<xmm1>, __m128i a5@<xmm2>, __m128i a6@<xmm3>, __m128i a7@<xmm7>, __m128i a8@<xmm8>, __int64 a9)
; SymCryptAesCreateDecryptionRoundKeyXmm(__int64 a1, __int64 a2)
; SymCryptSha1AppendBlocksAsm(__int64 a1, unsigned __int64 a2, __int64 a3)
; DoubleBufferMdl(__int64 a1, __int64 a2)
; DumpRead(__int64 a1, unsigned __int64 *a2, __int64 a3)
; FveEncryptRead(__int64 a1, void *a2, unsigned __int64 a3, unsigned int a4)
; ADiffuserDecrypt(unsigned __int64 a1, int a2)
; BDiffuserDecrypt(unsigned __int64 a1, int a2)
; FveAesCbcDecryptSectors@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int64 a3@<r8>, unsigned int a4@<r9d>, __m128i *a5@<xmm1>, __m128i *a6@<xmm2>, __m128i *a7@<xmm3>, __m128i *a8@<xmm7>, __m128i *a9@<xmm8>, __int64 a10, int a11, char a12)
; FveAesCbcDecryptSectorsPageIsolation@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int64 a3@<r8>, unsigned int a4@<r9d>, __m128i *a5@<xmm1>, __m128i *a6@<xmm2>, __m128i *a7@<xmm3>, __m128i *a8@<xmm7>, __m128i *a9@<xmm8>)
; FveCryptAesDecrypt@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int64 a3@<r8>, unsigned int a4@<r9d>, __m128i *a5@<xmm1>, __m128i *a6@<xmm2>, __m128i *a7@<xmm3>, __m128i *a8@<xmm7>, __m128i *a9@<xmm8>, __int64 a10, int a11, char a12)
; FveCryptElephantDecrypt@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int64 a3@<r8>, unsigned int a4@<r9d>, __m128i *a5@<xmm1>, __m128i *a6@<xmm2>, __m128i *a7@<xmm3>, __m128i *a8@<xmm7>, __m128i *a9@<xmm8>, void *Dst, int a11, char a12)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dumpsd.c ;
; SdDumpOpen(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SdDumpRead(int a1, __int64 a2, __int64 a3)
; SdDumpBusWorkerSetTimer(__int64 a1)
; SdDumpInitializeReadWriteRequest(unsigned __int64 *a1, __int64 a2, char a3)
; SdDumpReadWriteRequestSync(unsigned __int64 *a1, __int64 a2, char a3, __int64 a4)
; SdDumpReadWriteRequestAsync(int a1, unsigned __int64 *a2, __int64 a3, __int64 a4)
; SdDumpProcessReadWriteFailure(char a1, unsigned int a2)
; SdhcSetPower(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SdhcSetClock(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)
; SdhcSetBusWidth(__int64 a1, char a2)
; SdhcSetBusWidthExplicit(__int64 a1, int a2)
; SdhcSetLed(__int64 a1, char a2)
; SdhcSetHighSpeed(__int64 a1, char a2)
; SdhcSetSignaling(__int64 a1, __int64 a2, char a3)
; SdhcSetUhsMode(__int64 a1, __int64 a2, signed __int16 a3, char a4)
; SdhcSetPresetValue(__int64 a1, char a2)
; SdhcSetBlockGapInterruptRequest(__int64 a1)
; SdhcSetEventMask(__int64 a1, unsigned int a2, int a3)
; PlSetHostAccessMode(__int64 a1, int a2)
; SdhcSetTransferParameters(__int64 a1, int a2, unsigned __int16 a3, unsigned __int16 a4, char a5, int a6)
; SdhcReadDataPort(__int64 a1, char *a2, unsigned int a3)
; SetPciConfigSpace(__int64 a1, unsigned __int8 a2, __int64 a3, int (__fastcall *a4)(_QWORD, _QWORD, _QWORD, _QWORD))
; SdhcSetInterruptAtBlockGap(__int64 a1)
; SdhcSaveContext(__int64 a1, void *a2)
; SdhcNvT40SetSavedTapValue(__int64 a1)
; SdbusReadRegisterUchar(__int64 a1, int a2)
; SdbusReadRegisterUshort(__int64 a1, unsigned __int16 a2)
; SdbusWorkerSetStateCmdExecWithFlags(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, int a9, char a10)
; SdbusSetPStateTimer(__int64 a1)
; PlSetPower(__int64 a1, __int64 a2, unsigned int a3)
; PlSetClock(__int64 a1, __int64 a2, unsigned __int8 a3, unsigned int a4)
; PlSetBusWidth(__int64 a1, unsigned __int8 a2)
; PlSetBusWidthExplicit(__int64 a1, unsigned int a2)
; ReadDataPortInternal(__int64 a1, __int64 a2, unsigned int a3)
; PlSetHighSpeed(__int64 a1, unsigned __int8 a2)
; PlSetSignaling(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PlSetUhsMode(__int64 a1, __int64 a2, __int16 a3)
; PlSetEventMask(__int64 a1, int a2, int a3)
; SdbusSetPowerWorker(__int64 a1, __int64 a2)
; SdbusMmcSetWriteGroupDef(__int64 a1, __int64 *a2)
; SdbusSetSocketCardChanged(__int64 a1)
; SdbusReadDeviceConfigWorker(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dxgkrnl.c ;
; ADAPTER_DISPLAY::SetPartOfDesktop(ADAPTER_DISPLAY *this, unsigned int a2, char a3)
; ADAPTER_DISPLAY::SetLastCddIntegerVSync(ADAPTER_DISPLAY *this, unsigned int a2, int a3)
; DXGDEVICE::SetDisplayedPrimary(DXGDEVICE *this, unsigned int a2, const struct DXGALLOCATION *a3, int a4)
; ADAPTER_DISPLAY::SetCddOutputRect(ADAPTER_DISPLAY *this, __int64 a2, const struct tagRECT *const a3)
; ADAPTER_DISPLAY::SavePointerInfo(ADAPTER_DISPLAY *this, unsigned int a2, char a3, int a4, int a5)
; IndexedSet<DMMVIDPNSOURCE>::FindById(__int64 a1, int a2)
; IndexedSet<DMMVIDEOPRESENTTARGET>::FindById(__int64 a1, int a2)
; Set<DMMVIDPNPRESENTPATH>::Remove(__int64 a1, __int64 a2)
; DMMVIDPNSOURCE::_SetEmptyCofuncModeSet(DMMVIDPNSOURCE *this)
; auto_ptr<DoublyLinkedList<DMMVIDPNTARGETMODESET>>::reset(__int64 a1, __int64 a2)
; Set<DMMVIDPNSOURCE>::Add(__int64 a1, __int64 a2)
; RtlStringCbCopyNW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbSrc)
; Set<DMMVIDPNTARGET>::Add(__int64 a1, __int64 a2)
; Set<DMMVIDPNTARGET>::IsConstructed(__int64 a1)
; DoublyLinkedList<DMM::AutoBuffer<_DMM_VIDPN_SERIALIZATION>>::IsConstructed(__int64 a1)
; AggregatedBy<VIDPN_MGR>::SetAggregator(__int64 a1, __int64 a2)
; DMMVIDPNPRESENTPATH::SetImportanceOrdinal(__int64 a1, __int64 a2)
; DMMVIDPNTOPOLOGY::_SetContainingVidPn(DMMVIDPNTOPOLOGY *this, struct DMMVIDPN *a2)
; Set<DMMVIDPNPRESENTPATH>::FindByValue(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNSOURCEMODESET>::ContainsByReference(__int64 a1, __int64 a2)
; IndexedSetElement<unsigned int>::IndexedSetElement<unsigned int>(__int64 a1, int a2)
; Set<DMMVIDPNTARGETMODE>::FindByValue(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNTARGETMODE>::InsertTail(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNTARGETMODE>::ContainsByReference(__int64 a1, __int64 a2)
; IndexedSet<DMMVIDPNTARGETMODE>::FindById(__int64 a1, int a2)
; DMMVIDPNPRESENTPATH::SetScalingSupport(DMMVIDPNPRESENTPATH *this, const struct _D3DKMDT_VIDPN_PRESENT_PATH_SCALING_SUPPORT *a2)
; DMMVIDPNPRESENTPATH::SetRotationSupport(DMMVIDPNPRESENTPATH *this, const struct _D3DKMDT_VIDPN_PRESENT_PATH_ROTATION_SUPPORT *a2)
; ContainedBy<DMMVIDPN>::SetContainer(__int64 a1, __int64 a2)
; DMMVIDPNSOURCE::ReleaseModeSet(DMMVIDPNSOURCE *this, struct DMMVIDPNSOURCEMODESET *a2)
; DMMVIDPNPRESENTPATH::DoSourceTargetResolutionsMatch(DMMVIDPNPRESENTPATH *this)
; DXGPRESENTHISTORYTOKENQUEUE::ReadPresentHistory(DXGPRESENTHISTORYTOKENQUEUE *this, __int64 a2, unsigned int *a3, struct PRESENTHISTORYBUFFERENTRY *a4, struct INDEPENDENTFLIPBITS *Dst)
; DoublyLinkedList<DMMVIDPNTARGET>::DoublyLinkedList<DMMVIDPNTARGET>(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNSOURCEMODESET>::`vector deleting destructor(void *a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNTARGETMODE>::DoublyLinkedList<DMMVIDPNTARGETMODE>(__int64 a1, __int64 a2)
; Set<DMMVIDPNTARGETMODE>::SetEnumerator<_D3DKMDT_VIDPN_TARGET_MODE>::CreateInstance(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNSOURCE>::Clear(signed __int64 a1)
; Set<DMMVIDPN>::Add(__int64 a1, __int64 a2)
; Set<DMMVIDPN>::FindByValue(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPN>::InsertTail(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPN>::ContainsByReference(__int64 a1, __int64 a2)
; Set<DMMVIDPNPRESENTPATH>::SetEnumerator<_D3DKMDT_VIDPN_PRESENT_PATH>::CreateInstance(__int64 a1, __int64 a2)
; DMMVIDPNTARGET::_SetEmptyCofuncModeSet(DMMVIDPNTARGET *this)
; IndexedSet<DMMVIDPNSOURCEMODE>::FindById(__int64 a1, int a2)
; DMMVIDPNTARGET::SetCofuncModeSet(__int64 a1, DMMVIDPNTARGETMODESET **a2)
; DMMVIDPNTARGET::CreateNewCofuncModeSet(DMMVIDPNTARGET *this, struct DMMVIDPNTARGETMODESET **a2)
; RtlStringCchCopyUnicodeString(__int64 a1, __int64 a2, __int64 a3)
; DMMVIDPNTARGET::ReleaseModeSet(DMMVIDPNTARGET *this, struct DMMVIDPNTARGETMODESET *a2)
; DMMVIDPNSOURCE::CreateNewCofuncModeSet(DMMVIDPNSOURCE *this, struct DMMVIDPNSOURCEMODESET **a2)
; ADAPTER_DISPLAY_DdiSetVidPnSourceAddress(struct ADAPTER_DISPLAY *a1, const struct _DXGKARG_SETVIDPNSOURCEADDRESS *a2, __int64 a3)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; DMMVIDPNPRESENTPATH::SetContentType(__int64 a1, __int64 a2)
; DMMVIDPNPRESENTPATH::SetCopyProtectionScheme(__int64 a1, __int64 a2)
; DMMVIDPNPRESENTPATH::IsCopyProtectionSchemeSupported(__int64 a1, __int64 a2)
; ADAPTER_DISPLAY::DdiSetVidPnSourceAddress(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETVIDPNSOURCEADDRESS *a2, __int64 a3)
; Set<DMMVIDPN>::Remove(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDEOPRESENTSOURCE>::ContainsByReference(__int64 a1, __int64 a2)
; Set<DMMVIDEOPRESENTSOURCE>::SetEnumerator<_D3DKMDT_VIDEO_PRESENT_SOURCE>::CreateInstance(__int64 a1, __int64 a2)
; ADAPTER_DISPLAY::SetDisplayModeInfo(ADAPTER_DISPLAY *this, unsigned int a2, const struct _DXGK_DISPLAYMODE_INFO *const a3)
; DXGSESSIONDATA::SetAdapterLuidInRemoteSession(DXGSESSIONDATA *this, struct _LUID *a2)
; ReadUlongFromKey(HANDLE KeyHandle, const unsigned __int16 *a2, unsigned __int32 *a3)
; DoublyLinkedList<DMMVIDPNSOURCEMODE>::ContainsByReference(__int64 a1, __int64 a2)
; Set<DMMVIDPNSOURCEMODE>::SetEnumerator<_D3DKMDT_VIDPN_SOURCE_MODE>::CreateInstance(__int64 a1, __int64 a2)
; DpiSetSchedulerCallbackState(__int64 a1, signed __int32 a2)
; Set<DMMVIDEOPRESENTTARGET>::SetEnumerator<_D3DKMDT_VIDEO_PRESENT_TARGET>::CreateInstance(__int64 a1, __int64 a2)
; Set<DMMVIDEOPRESENTTARGET>::Add(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDEOPRESENTTARGET>::ContainsByReference(__int64 a1, __int64 a2)
; Set<DMMVIDEOPRESENTSOURCE>::Add(__int64 a1, __int64 a2)
; DpiKmdDodInitialize(void *a1, const UNICODE_STRING *a2, __int64 a3)
; DoublyLinkedList<DMMVIDPNSOURCEMODESET>::Remove(__int64 a1, __int64 a2)
; DpReadDeviceSpace(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6)
; DxgkSqmCreateDwordStreamEntry(__int64 a1, int a2)
; DxgkSetPostDeviceCandidateTarget(int a1)
; VIDPN_MGR::SetConstructionStatus(__int64 a1, int a2)
; VIDPN_MGR::SetConstructionStatus(__int64 a1, int a2)
; DoublyLinkedList<VIDPN_MGR::DISPMODECHANGEREQUEST>::SetConstructionStatus(__int64 a1, int a2)
; Vector<ProtectableFromChange::ModifyingActionConstraints>::SetConstructionStatus(__int64 a1, int a2)
; ProtectableFromChange::SetConstructionStatus(__int64 a1, int a2)
; DMMVIDPNTARGET::SetConstructionStatus(__int64 a1, int a2)
; DXGADAPTER::DdiSetPowerComponentFState(DXGADAPTER *this)
; ADAPTER_DISPLAY::DdiSetVidPnSourceAddressWithMultiPlaneOverlay(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETVIDPNSOURCEADDRESSWITHMULTIPLANEOVERLAY *a2)
; DXGADAPTER::SetPowerComponentActiveCB(DXGADAPTER *this, __int64 a2, __int64 a3)
; DXGADAPTER::SetPowerComponentActiveCBInternal(DXGADAPTER *this, __int64 a2, __int64 a3)
; DXGADAPTER::SetPowerComponentActiveCBWorker(DXGADAPTER *this, unsigned int a2, __int64 a3)
; DXGADAPTER::SetPowerComponentIdleCBInternal(DXGADAPTER *this, __int64 a2, __int64 a3)
; DXGADAPTER::SetPowerComponentIdleCBWorker(DXGADAPTER *this, unsigned int a2, __int64 a3)
; DXGADAPTER::SetPowerComponentLatencyCB(DXGADAPTER *this, unsigned int a2, __int64 a3)
; DXGADAPTER::SetPowerComponentResidencyCB(DXGADAPTER *this, unsigned int a2, __int64 a3)
; VIDMM_EXPORT::VidMmSetWorkingSetInformation(VIDMM_EXPORT *this, struct DXGPROCESS *a2, struct _D3DKMT_WORKINGSETINFO *a3)
; VIDMM_EXPORT::VidMmCreateAllocation(VIDMM_EXPORT *this, struct VIDMM_DEVICE *a2, void *a3, struct DXGADAPTERALLOCATION *a4, void *a5)
; VIDMM_EXPORT::VidMmOpenAllocation(VIDMM_EXPORT *this, struct VIDMM_GLOBAL *a2, struct VIDMM_DEVICE *a3, struct _VIDMM_MULTI_GLOBAL_ALLOC *a4, unsigned int a5)
; VIDMM_EXPORT::VidMmSetAllocationPriority(VIDMM_EXPORT *this, struct VIDMM_GLOBAL *a2, struct _VIDMM_MULTI_ALLOC *a3, unsigned int a4)
; VIDMM_EXPORT::VidMmCreateContextAllocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DxgSetPowerComponentActiveNoWaitCB(__int64 a1, __int64 a2)
; DxgSetPowerComponentIdleCB(__int64 a1, __int64 a2, __int64 a3)
; DxgSetPowerComponentIdleCBInternal(__int64 a1, __int64 a2, __int64 a3)
; DxgkSetPowerComponentLatencyCB(__int64 a1, unsigned int a2, __int64 a3)
; DxgkSetPowerComponentResidencyCB(__int64 a1, unsigned int a2, __int64 a3)
; LoadEtwStackLocation(__int64 a1, __int64 a2)
; DXGGLOBAL::SetSchedulerCrossAdapterData(DXGGLOBAL *this, struct _KEVENT *a2)
; DxgkSqmCreateStringStreamEntry(__int64 a1, __int64 a2)
; DxgkSqmSetDword(int a1, int a2)
; DXGDIAGNOSTICSWITHMUTEX::ReadDiagnostics(DXGDIAGNOSTICSWITHMUTEX *this, unsigned __int8 *a2, unsigned int *a3, __int64 a4)
; BLTQUEUE::PresentDisplayOnlySetProgress(BLTQUEUE *this, const struct _DXGKARGCB_PRESENT_DISPLAYONLY_PROGRESS *a2)
; DXGDODPRESENT::PresentDisplayOnlySetProgress(DXGDODPRESENT *this, const struct _DXGKARGCB_PRESENT_DISPLAYONLY_PROGRESS *a2)
; DXGDEVICE::SetDisplayedAllMultiPlaneOverlays(DXGDEVICE *this, unsigned int a2, const struct DXGALLOCATION **a3)
; DpiSetDevicePowerTransitionState(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DpiSetDevicePowerTransitionStateAtPassiveLevel(__int64 a1, int a2, char a3)
; DpiMiracastTearDownAssociation(PVOID P, __int64 a2, __int64 a3, unsigned int a4, char a5)
; DpiSignalVideoOutputCreateCompletion(__int64 a1)
; DoublyLinkedList<VIDPN_MGR::DISPMODECHANGEREQUEST>::`scalar deleting destructor(void *a1, char a2)
; DoublyLinkedList<DMM::AutoBuffer<_DMM_COMMITVIDPNREQUEST_SERIALIZATION>>::`vector deleting destructor(void *a1, char a2)
; DoublyLinkedList<DMMVIDPN>::`vector deleting destructor(void *a1, char a2)
; IndexedSet<DMMVIDPNTARGETMODE>::`vector deleting destructor(void *a1, char a2)
; Set<DMMVIDPN>::`vector deleting destructor(void *a1, char a2)
; DoublyLinkedListElement::`scalar deleting destructor(void *a1, char a2)
; DoublyLinkedList<VIDPN_MGR::DISPMODECHANGEREQUEST>::Clear(__int64 a1)
; DoublyLinkedList<DMMVIDPN>::Clear(__int64 a1)
; DoublyLinkedList<DMMVIDPNTARGETMODESET>::ContainsByReference(__int64 a1, __int64 a2)
; DoublyLinkedList<DMMVIDPNTARGETMODESET>::Remove(__int64 a1, __int64 a2)
; Set<DMMVIDPNSOURCEMODE>::~Set<DMMVIDPNSOURCEMODE>(__int64 a1)
; Set<DMMVIDEOPRESENTTARGET>::~Set<DMMVIDEOPRESENTTARGET>(__int64 a1)
; DoublyLinkedList<DMMVIDPNSOURCEMODE>::`vector deleting destructor(void *a1, char a2)
; DoublyLinkedList<DMMVIDEOPRESENTSOURCE>::`scalar deleting destructor(void *a1, char a2)
; IndexedSet<DMMVIDPNSOURCEMODE>::`scalar deleting destructor(void *a1, char a2)
; Set<DMMVIDPNSOURCEMODE>::`vector deleting destructor(void *a1, char a2)
; Set<DMMVIDEOPRESENTTARGET>::`scalar deleting destructor(void *a1, char a2)
; DoublyLinkedList<DMM::AutoBuffer<_DMM_MONITOR_SERIALIZATION>>::Clear(__int64 a1)
; DoublyLinkedList<DMMVIDEOPRESENTSOURCE>::Clear(__int64 a1)
; Set<DMMVIDEOPRESENTTARGET>::Clear(__int64 a1)
; DoublyLinkedList<DMM::AutoBuffer<_DMM_MONITOR_SERIALIZATION>>::InsertTail(__int64 a1, __int64 a2)
; Set<DMMVIDPNSOURCEMODE>::FindByValue(__int64 a1, DMMVIDPNSOURCEMODE *a2)
; Set<DMMVIDPNPRESENTPATH>::~Set<DMMVIDPNPRESENTPATH>(__int64 a1)
; Set<DMMVIDPNSOURCE>::~Set<DMMVIDPNSOURCE>(__int64 a1)
; DoublyLinkedList<DMMVIDPNPRESENTPATH>::`vector deleting destructor(void *a1, char a2)
; DoublyLinkedList<DMMVIDPNSOURCE>::`scalar deleting destructor(void *a1, char a2)
; IndexedSet<DMMVIDPNSOURCE>::`vector deleting destructor(void *a1, char a2)
; Set<DMMVIDPNPRESENTPATH>::`vector deleting destructor(void *a1, char a2)
; Set<DMMVIDPNSOURCE>::`vector deleting destructor(void *a1, char a2)
; Set<DMMVIDPNTARGET>::Clear(__int64 a1)
; Queue<DMM::AutoBuffer<_DMM_MONITOR_SERIALIZATION>>::SetConstructionStatus(__int64 a1)
; Set<ContextDataAssignee::CONTEXT_DATA>::~Set<ContextDataAssignee::CONTEXT_DATA>(__int64 a1)
; DoublyLinkedList<ContextDataAssignee::CONTEXT_DATA>::`vector deleting destructor(void *a1, char a2)
; Set<ContextDataAssignee::CONTEXT_DATA>::`scalar deleting destructor(void *a1, char a2)
; DoublyLinkedList<ContextDataAssignee::CONTEXT_DATA>::Clear(__int64 a1)
; Set<ContextDataAssignee::CONTEXT_DATA>::Clear(__int64 a1)
; ADAPTER_DISPLAY::PurgeCopyProtectionOnVidPnSource(ADAPTER_DISPLAY *this, unsigned int a2)
; DxgkSetVidPnSourceOwner1(__int64 a1, __int64 a2, __int64 a3)
; DxgkWaitForMonitorEventDone(__int64 a1, __int64 a2, __int64 a3)
; DxgkWaitForMonitorEventDoneInternal(struct DXGADAPTER *this, __int64 a2, __int64 a3, __int64 a4)
; DxgkSetQueuedLimit(__int64 a1, __int64 a2, __int64 a3)
; DXGDEVICE::SetQueuedPresentLimit(DXGDEVICE *this, unsigned int a2)
; DxgkSetDisplayMode@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; DXGSESSIONMGR::WaitForPnPTransitionDone(DXGSESSIONMGR *this, enum _KWAIT_REASON a2, KPROCESSOR_MODE a3, union _LARGE_INTEGER *a4)
; ADAPTER_DISPLAY::SetCopyProtectionWithLock(ADAPTER_DISPLAY *this, unsigned int a2)
; ADAPTER_DISPLAY::SetCopyProtection(ADAPTER_DISPLAY *this, unsigned int a2)
; DmmUpdateCopyProtectionOnAllClientVidPnPathsFromSource(DXGADAPTER *a1, __int64 a2, int a3, int a4)
; VIDPN_MGR::CreateClientVidPnFromActive(__int64 a1, __int64 a2)
; DXGDEVICE::SetDisplayMode(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DxgkCddSetOrigin(struct DXGADAPTER *this, unsigned int a2, const struct tagPOINT *const a3)
; MANAGEDPRIMARIESTRACKER::SaveManagedPrimaryState(MANAGEDPRIMARIESTRACKER *this, struct DXGDEVICE *a2, int a3)
; SetVidPnSourceOwnerInternal(__int64 a1, __int64 a2, __int64 a3)
; DXGCONTEXT::SetSchedulingPriority(DXGCONTEXT *this, __int64 a2)
; ADAPTER_DISPLAY::SetCddPrimary(ADAPTER_DISPLAY *this, unsigned int a2, struct DXGSHAREDRESOURCE *a3, const struct _CDDDXGK_INTERFACE *const a4)
; DxgkCddSetPointerPosition(struct DXGADAPTER *this, const struct _DXGKARG_SETPOINTERPOSITION *a2, __int64 a3, __int64 a4)
; ADAPTER_DISPLAY::DdiSetPointerPosition(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETPOINTERPOSITION *a2, __int64 a3)
; ADAPTER_DISPLAY::SetVidPnSourceVisibility(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETVIDPNSOURCEVISIBILITY *a2, __int64 a3)
; ADAPTER_DISPLAY::DdiSetVidPnSourceVisibility(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETVIDPNSOURCEVISIBILITY *a2, __int64 a3)
; ADAPTER_DISPLAY::SetGammaRamp(ADAPTER_DISPLAY *this, unsigned int a2, struct DXGDEVICE *a3)
; DXGDEVICE::SetSchedulingPriorityAdjustment(DXGDEVICE *this, int a2)
; DxgkCreateDevice@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; ADAPTER_RENDER::CreateDevice(__int64 a1, __int64 a2, __int64 a3, DXGADAPTER *a4, unsigned __int8 a5, unsigned __int8 a6)
; ADAPTER_RENDER::DdiCreateDevice(ADAPTER_RENDER *this, struct _DXGKARG_CREATEDEVICE *a2, __int64 a3)
; DxgkCreateContext(__int64 a1, __int64 a2, __int64 a3)
; DXGDEVICE::OpenResource<_D3DKMT_OPENRESOURCEFROMNTHANDLE>@<rax>(DXGDEVICE *this@<rcx>, __int64 a2@<rdx>, struct _EPROCESS *a3@<rbx>, int a4@<r8d>, __int64 a5@<r9>)
; DxgkCddCreateAllocation(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; DXGDEVICE::OpenResource<_D3DKMT_OPENRESOURCE>@<rax>(DXGDEVICE *this@<rcx>, __int64 a2@<rdx>, struct _EPROCESS *a3@<rbx>, unsigned int a4@<r8d>, unsigned __int64 *a5@<r9>)
; OpenResourceFromGlobalHandleOrNtObject__D3DKMT_OPENRESOURCE__::_61_::ENSURE_SHARED_RESOURCE_DEREFERENCE::_ENSURE_SHARED_RESOURCE_DEREFERENCE(__int64 a1)
; ADAPTER_RENDER::DdiCreateContext(ADAPTER_RENDER *this, void *a2, struct _DXGKARG_CREATECONTEXT *a3)
; DXGADAPTER::CreateHandle(DXGADAPTER *this, unsigned int *a2, __int64 a3)
; CcdReadRegistryValues(void *a1, const WCHAR *a2, const void *a3, unsigned int a4, __int64 a5)
; ADAPTER_RENDER::CopyUmdFileName(ADAPTER_RENDER *this, struct _D3DKMT_UMDFILENAMEINFO *a2, __int64 a3)
; BtlPreAcquireSharedAccess__CCD_BTL_CONNECTIVITY_COLLECTOR::_AppendConnectedSetAdaptersCallback_(DXGADAPTER *this, __int64 a2)
; DmmAppendCcdConnectedSetForAdapter(DXGADAPTER *a1, __int64 a2)
; VIDPN_MGR::CreateClientVidPn(__int64 a1, __int64 a2)
; VIDPN_MGR::CreateClientVidPnFromLastClientCommitedVidPn(__int64 a1, __int64 a2)
; VIDPN_MGR::CreateVidPnCopyForClient(__int64 a1, __int64 a2, __int64 a3)
; DMMVIDPNPRESENTPATH::SetGammaRamp(DMMVIDPNPRESENTPATH *this, const struct _D3DKMDT_GAMMA_RAMP *a2)
; DxgkCreateSynchronizationObject@<rax>(struct _D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *a1@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; DxgkCreateSynchronizationObjectInternal@<rax>(struct _D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; CreateSynchronizationObjectInternal(struct DXGDEVICE *a1, struct ADAPTER_RENDER *a2, struct _D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *a3, struct DXGSYNCOBJECT **a4)
; DXGSYNCOBJECT::Open(DXGSYNCOBJECT *this, struct ADAPTER_RENDER *a2, unsigned int *a3)
; DXGK_VIDPN_INTERFACE_V1_IMPL::ReleaseSourceModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, struct D3DKMDT_HVIDPNSOURCEMODESET__ *const a3)
; DxgkCddSetPointerShape(void *const a1, const struct _DXGKARG_SETPOINTERPOSITION *a2, const struct _DXGKARG_SETPOINTERSHAPE *a3, unsigned int a4, unsigned int a5, int a6)
; DXGPRESENT::CopyPresentArgs(DXGPRESENT *this, struct DXGCONTEXT *a2, const struct _D3DKMT_PRESENT *a3, struct _D3DKMT_PRESENT *a4)
; DxgkCreateAllocation(__int64 a1, __int64 a2, __int64 a3)
; DXGDEVICE::CreateAllocation(DXGDEVICE *this, struct _D3DKMT_CREATEALLOCATION *a2, struct _DXGSHAREDALLOCOBJECT *a3, __int64 a4, struct _DXGSHAREDALLOCOBJECT *a5, const struct _D3DKM_CREATESTANDARDALLOCATION *a6, struct COREDEVICEACCESS *a7, struct _EPROCESS *a8, struct _EPROCESS *a9, unsigned int *a10, unsigned __int64 *a11)
; DXGDEVICE::CreateVidMmAllocations<_DXGK_ALLOCATIONINFO>(DXGDEVICE *this, __int64 a2, __int64 a3, __int64 a4, __int64 a5, struct COREDEVICEACCESS *a6, char a7, struct COREDEVICEACCESS *a8)
; DXGDEVICE::OpenAllocations(DXGDEVICE *this, struct _D3DKMT_CREATEALLOCATION *a2, struct _D3DDDI_ALLOCATIONINFO2 *a3, struct DXGALLOCATION *a4, struct _DXGK_OPENALLOCATIONINFO *a5, void **a6, void **a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, unsigned int a11, unsigned int *a12, unsigned __int64 *a13)
; ADAPTER_RENDER::DdiOpenAllocation(ADAPTER_RENDER *this, void *a2, const struct _DXGKARG_OPENALLOCATION *a3)
; DXGDEVICE::CreateAllocationObjects(DXGDEVICE *this, int a2, struct DXGALLOCATION **a3, struct DXGRESOURCE *a4, struct DXGALLOCATION **a5)
; DXGDEVICE::OpenResourceObject(DXGDEVICE *this, struct _D3DKMT_CREATEALLOCATION *a2, struct _D3DDDI_ALLOCATIONINFO2 *a3, char a4, struct _EPROCESS *a5, struct _DXGSHAREDALLOCOBJECT *a6, struct DXGRESOURCE **a7, unsigned __int8 *a8)
; DXGDEVICE::CreateDriverAllocations(DXGDEVICE *this, struct _D3DKMT_CREATEALLOCATION *a2, struct _D3DDDI_ALLOCATIONINFO2 *a3, struct _DXGK_ALLOCATIONINFO *a4, struct DXGALLOCATION *a5, struct DXGRESOURCE *a6, void **a7, void **a8, void *a9, int a10)
; ADAPTER_RENDER::DdiCreateAllocation(ADAPTER_RENDER *this, struct _DXGKARG_CREATEALLOCATION *a2, __int64 a3)
; DXGK_VIDPNSOURCEMODESET_INTERFACE_V1_IMPL::CreateNewModeInfo(DXGK_VIDPNSOURCEMODESET_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPNSOURCEMODESET__ *const a2, struct _D3DKMDT_VIDPN_SOURCE_MODE **a3)
; DxgkOpenAdapter(struct _D3DKMT_OPENADAPTER *a1, __int64 a2, __int64 a3)
; DXGK_VIDPNTARGETMODESET_INTERFACE_V1_IMPL::CreateNewModeInfo(DXGK_VIDPNTARGETMODESET_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPNTARGETMODESET__ *const a2, struct _D3DKMDT_VIDPN_TARGET_MODE **a3)
; OpenResourceFromGlobalHandleOrNtObject<_D3DKMT_OPENRESOURCE>(__int64 a1, __int64 a2, __int64 a3)
; OpenResourceFromGlobalHandleOrNtObject<_D3DKMT_OPENRESOURCEFROMNTHANDLE>(__int64 a1, __int64 a2, __int64 a3, int a4)
; VidMmCreateProcessX(struct DXGPROCESS *a1)
; VidSchCreateProcessX(struct DXGPROCESS *a1)
; DXGDEVICE::CreateStandardAllocation(DXGDEVICE *this, struct _D3DKM_CREATESTANDARDALLOCATION *a2, struct COREDEVICEACCESS *a3)
; BmlDoesTargetModeObeyConstraint(__int64 a1, unsigned __int16 a2, DMMVIDPNTARGETMODE *a3, char a4)
; CCD_TOPOLOGY::ClearModalitySetId(CCD_TOPOLOGY *this)
; CCD_SET_STRING_ID::GetConnectedSetStr(CCD_SET_STRING_ID *this)
; CCD_BTL::RetrieveConnectivitySetId(CCD_BTL *this, struct CCD_SET_STRING_ID *a2)
; CcdCreateMd5Checksum(const unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
; CCD_TOPOLOGY::SetConnectivityHash(CCD_TOPOLOGY *this, const struct CCD_SET_STRING_ID *a2)
; CcdRetrieveSetIdFromRegistry(HANDLE KeyHandle, const WCHAR *a2, CCD_SET_STRING_ID *a3)
; CCD_STORE::TOPOLOGY_SET_DESCRIPTOR::GetSetId(CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this)
; CcdLazyRetrieveSetIdFromRegistry(HANDLE KeyHandle, const WCHAR *a2, CCD_SET_STRING_ID *a3)
; ConvertPathModalityToDisplayConfig(struct _D3DKMT_GETPATHSMODALITY *a1, __int64 a2, __int64 a3, struct _QDC_CONTEXT *a4)
; ConvertDmmToDisplayConfigScaling(__int64 a1)
; CcdForEachSetSubkey_CCD_STORE::TOPOLOGY_SET_DESCRIPTOR_(__int64 a1, void *a2, CCD_RECENT_TOPOLOGY_RETRIEVER *a3)
; CCD_RECENT_TOPOLOGY_RETRIEVER::_FindTopologySetIdDescriptorCallback(struct CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this, CCD_RECENT_TOPOLOGY_RETRIEVER *a2)
; CcdOpenRegistrySubkey(PULONG a1, ACCESS_MASK a2, void *a3, const WCHAR *a4, ULONG *a5)
; CcdOpenRegistrySubkey_0(PULONG a1, ACCESS_MASK a2, void *a3, UNICODE_STRING *a4, ULONG *a5)
; CCD_SET_STRING_ID::_CopyString(struct _STRING *a1, const struct _STRING *a2)
; CcdCreateMd5Checksum(const unsigned __int8 *a1, unsigned int a2, unsigned __int16 *Dst)
; CcdCreateKeyFromSetIdStr(PUNICODE_STRING DestinationString, USHORT *a2)
; CCD_SET_STRING_ID::IsEnabledSetEqual(CCD_SET_STRING_ID *this, const struct CCD_SET_STRING_ID *a2)
; CCD_TOPOLOGY::SetModalitySetId(CCD_TOPOLOGY *this, const struct CCD_SET_STRING_ID *a2)
; ConvertDMMRotationToGdiRotation(int a1)
; _CcdForSetSubkey<CCD_STORE::TOPOLOGY_SET_DESCRIPTOR>(__int64 a1, USHORT *a2, int (__fastcall *a3)(_QWORD, _QWORD), __int64 a4)
; _CcdForSetSubkey<CCD_STORE::CONNECTED_SET_DESCRIPTOR>(__int64 a1, USHORT *a2, int (__fastcall *a3)(_QWORD, _QWORD), __int64 a4)
; CCD_STORE::ForConnectedSet(const struct CCD_SET_STRING_ID *a1, __int32 (__stdcall static *a2)(struct CCD_STORE::CONNECTED_SET_DESCRIPTOR *, void *), void *a3)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::AcquireTargetModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNTARGETMODESET__ **a4)
; DXGK_VIDPN_INTERFACE_V1_IMPL::CreateNewTargetModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNTARGETMODESET__ **a4)
; DXGK_VIDPN_INTERFACE_V1_IMPL::AssignTargetModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNTARGETMODESET__ *const a4)
; VIDPN_MGR::QueryDxgMiniportVidPnTargetModeSetInterface(VIDPN_MGR *this, const struct _DXGK_VIDPNTARGETMODESET_INTERFACE **a2)
; VIDPN_MGR::QueryDxgDmmVidPnTargetModeSetInterface(VIDPN_MGR *this, const struct _DXGDMM_VIDPNTARGETMODESET_INTERFACE **a2)
; BmlDoesSourceModeObeyConstraint(__int64 a1, unsigned __int16 a2, __int64 a3)
; CCD_RECENT_TOPOLOGY_RETRIEVER::_LoadTopologyDescriptorCallback(struct CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this, void *a2)
; CCD_STORE::CONNECTED_SET_DESCRIPTOR::GetRecentTopologySetId(__int64 a1, unsigned int a2)
; CCD_STORE::CONNECTED_SET_DESCRIPTOR::_GetTopologySetIdByClass(__int64 a1, int a2, char a3)
; CCD_BTL::ResolveTopologySetId(CCD_BTL *this, struct CCD_TOPOLOGY *a2, char a3)
; CCD_RECENT_TOPOLOGY_RETRIEVER::_ProcessConnectedSetDescriptorCallback(struct CCD_STORE::CONNECTED_SET_DESCRIPTOR *a1, void *a2)
; CCD_RECENT_TOPOLOGY_RETRIEVER::LoadByTopologySetId(CCD_RECENT_TOPOLOGY_RETRIEVER *this, const struct CCD_SET_STRING_ID *a2, char a3, char a4)
; CCD_RECENT_TOPOLOGY_RETRIEVER::LoadByConnectedSetId(CCD_RECENT_TOPOLOGY_RETRIEVER *this, const struct CCD_SET_STRING_ID *a2, const struct CCD_SET_STRING_ID *a3, int a4, bool a5)
; CCD_STORE::TOPOLOGY_SET_DESCRIPTOR::LoadTopology(CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this, struct CCD_TOPOLOGY *a2)
; CCD_STORE::TOPOLOGY_SET_DESCRIPTOR::_ReadPath(CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this, void *a2, unsigned int a3, struct _D3DKMT_PATHMODALITY_DESCRIPTOR *a4)
; DXGDIAGNOSTICS::ReadDiagnostics(DXGDIAGNOSTICS *this, unsigned __int8 *a2, unsigned int *a3)
; ConvertDMMScalingToGdiScaling(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CCD_TOPOLOGY::GetModalitySetId(CCD_TOPOLOGY *this)
; CCD_STORE::CONNECTED_SET_DESCRIPTOR::SetRecentTopologySetId(__int64 a1, __int64 a2, unsigned int a3)
; DXGDMM_INTERFACE_V1_IMPL::CreateVidPnFromLastClientCommittedVidPn(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDPN__ **a3, const struct _DXGDMM_VIDPN_INTERFACE **a4)
; EDIDCACHE::TestAndSetSqmDpiInfoForMonitor(EDIDCACHE *this, unsigned __int8 *a2, int a3, const struct _DPI_INFORMATION *a4, const unsigned __int8 *a5)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::ReleaseTargetModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, struct D3DKMDT_HVIDPNTARGETMODESET__ *const a3)
; DXGK_VIDPN_INTERFACE_V1_IMPL::ReleaseTargetModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, struct D3DKMDT_HVIDPNTARGETMODESET__ *const a3)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::AcquireSourceModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNSOURCEMODESET__ **a4)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::ReleaseSourceModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, struct D3DKMDT_HVIDPNSOURCEMODESET__ *const a3)
; DXGK_VIDPN_INTERFACE_V1_IMPL::CreateNewSourceModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNSOURCEMODESET__ **a4)
; DXGK_VIDPN_INTERFACE_V1_IMPL::AssignSourceModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNSOURCEMODESET__ *const a4)
; VIDPN_MGR::QueryDxgMiniportVidPnSourceModeSetInterface(VIDPN_MGR *this, const struct _DXGK_VIDPNSOURCEMODESET_INTERFACE **a2)
; VIDPN_MGR::QueryDxgDmmVidPnSourceModeSetInterface(VIDPN_MGR *this, const struct _DXGDMM_VIDPNSOURCEMODESET_INTERFACE **a2)
; ConvertGdiScalingToDMMScaling(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DXGK_VIDPN_INTERFACE_V1_IMPL::AcquireTargetModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNTARGETMODESET__ **a4)
; DXGK_VIDPN_INTERFACE_V1_IMPL::AcquireSourceModeSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HVIDPNSOURCEMODESET__ **a4)
; DpiDispatchCreate(__int64 a1, __int64 a2, __int64 a3)
; DpiGdoDispatchCreate(__int64 a1, __int64 a2)
; DxgkOpenSyncObjectFromNtHandle(__int64 a1, __int64 a2, __int64 a3)
; DxgkCddOpenSynchronizationObject(struct _D3DKMT_OPENSYNCHRONIZATIONOBJECT *a1, __int64 a2, __int64 a3)
; DxgkOpenSynchronizationObjectInternal(struct _D3DKMT_OPENSYNCHRONIZATIONOBJECT *a1, __int64 a2, __int64 a3)
; DXGGLOBAL::OpenSyncObject(DXGGLOBAL *this, unsigned int a2, struct DXGSYNCOBJECT **a3, unsigned int *a4)
; DXGSHAREDRESOURCE::CreateSharedResource(struct ADAPTER_RENDER *a1, struct DXGADAPTER *a2, char a3)
; DxgkOpenResourceFromNtHandle@<rax>(__int64 a1@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; DxgkOpenResource@<rax>(__int64 a1@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; CCD_STORE::TOPOLOGY_SET_DESCRIPTOR::SaveTopology(CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *this, const struct CCD_TOPOLOGY *a2)
; CCD_TOPOLOGY::MapModalitySetIdPath(CCD_TOPOLOGY *this, unsigned int a2, unsigned __int16 *a3)
; DxgkSetContextSchedulingPriority(__int64 a1, __int64 a2, __int64 a3)
; DxgkSetContextInProcessSchedulingPriority(__int64 a1, __int64 a2, __int64 a3)
; CCD_TOPOLOGY::_QueryTopologySetIdStr(CCD_TOPOLOGY *this, wchar_t *psz, unsigned __int16 a3)
; DxgkOpenAdapterFromLuid(struct _D3DKMT_OPENADAPTERFROMLUID *a1, __int64 a2, __int64 a3)
; CCD_TOPOLOGY::CopyInheritScope(CCD_TOPOLOGY *this, const struct CCD_TOPOLOGY *a2)
; OpenResourceFromGlobalHandleOrNtObject__D3DKMT_OPENRESOURCEFROMNTHANDLE__::_61_::ENSURE_SHARED_RESOURCE_DEREFERENCE::_ENSURE_SHARED_RESOURCE_DEREFERENCE(__int64 a1)
; DxgkCddOpenResourceFromNtHandle(struct _D3DKMT_OPENRESOURCEFROMNTHANDLE *a1, __int64 a2, struct _EPROCESS *a3, unsigned int *a4, void **a5)
; DxgkGetPresentHistoryReadyEvent(__int64 a1, __int64 a2, __int64 a3)
; DxgkCreateClose(__int64 a1, __int64 a2, __int64 a3)
; DxgkCddCreate(struct DXGADAPTER *this, struct _DXGKWIN32KENG_INTERFACE *a2, unsigned int *a3, unsigned int *a4)
; DxgkCddCreateSynchronizationObject@<rax>(struct _D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *a1@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; DxgkSetPresenterViewMode(__int64 a1, __int64 a2)
; DxgkOpmCreateHandle(DXGADAPTER *this, __int64 a2, __int64 a3)
; DXGDMM_INTERFACE_V1_IMPL::AcquireSourceSet(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDEOPRESENTSOURCESET__ **a3, const struct _DXGDMM_VIDEOPRESENTSOURCESET_INTERFACE **a4)
; DxgkCreateKeyedMutex2(__int64 a1, __int64 a2, __int64 a3)
; DxgkOpenKeyedMutex2(__int64 a1, __int64 a2, __int64 a3)
; DXGGLOBAL::OpenKeyedMutex(DXGGLOBAL *this, unsigned int a2, struct DXGKEYEDMUTEX **a3, unsigned int *a4, void *a5, unsigned int a6)
; DXGKEYEDMUTEX::Open(DXGKEYEDMUTEX *this, unsigned int *a2, void *a3, unsigned int a4)
; DxgkOpenSynchronizationObject(struct _D3DKMT_OPENSYNCHRONIZATIONOBJECT *a1, __int64 a2, __int64 a3)
; DMMVIDPNTOPOLOGY::CreateNewPath(DMMVIDPNTOPOLOGY *this, const struct _D3DKMDT_VIDPN_PRESENT_PATH *Src, struct DMMVIDPNPRESENTPATH **a3)
; VIDPN_MGR::SetTargetOwnership(__int64 a1, unsigned int a2, int a3)
; CreateFunctionalVidPnWithEnabledVidPnSource@<rax>(__int64 a1@<rdx>, unsigned int (*a2)[4]@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, __int64 a5@<r9>, unsigned __int8 a6, __int64 a7, __int64 a8, char a9, __int64 a10)
; ConvertVidPnPathToPathDescription(struct D3DKMDT_HVIDPN__ *a1, const struct _DXGDMM_VIDPN_INTERFACE *const a2, const struct _DXGDMM_VIDPNTOPOLOGY_INTERFACE *const a3, struct D3DKMDT_HVIDPNTOPOLOGY__ *a4, unsigned int a5, unsigned int a6, struct _D3DKMT_PATHMODALITY_DESCRIPTOR *a7)
; VIDPN_MGR::ConvertClientVidPnToActiveVidPn@<rax>(VIDPN_MGR *this@<rcx>, const struct DMMVIDPN *const a2@<rdx>, struct DMMVIDPN **a3@<r8>, __int64 a4@<rbp>)
; VIDPN_MGR::SetActiveVidPn(__int64 a1, __int64 *a2)
; DMMVIDPNTOPOLOGY::SaveAsLkg(DMMVIDPNTOPOLOGY *this)
; DpiReadPnpRegistryValue(__int64 a1, const WCHAR *a2, void *a3, unsigned int a4, int a5)
; DpiOpenPnpRegistryKey(__int64 a1, int a2, ACCESS_MASK a3, HANDLE *a4)
; ADAPTER_DISPLAY::SetPrimaryPath(__int64 a1, int a2, int a3, int a4)
; ADAPTER_DISPLAY::CreateModeList(ADAPTER_DISPLAY *this, struct _D3DKMT_GETDISPLAYMODELIST *a2, __int64 a3)
; DpiFdoSetAdapterPowerState(PDEVICE_OBJECT DeviceObject, POWER_STATE State, unsigned int a3, unsigned int a4, unsigned int a5)
; DpiDxgkDdiSetPowerState(__int64 a1, __int64 a2, __int64 a3, int a4, unsigned int a5)
; DpiPdoSetDevicePower(__int64 a1, int a2, unsigned int a3)
; DxgkCddSetGammaRamp(struct DXGADAPTER *this, unsigned int a2, const struct _D3DDDI_GAMMA_RAMP_RGB256x3x16 *Src)
; DxgkSetVidPnSourceOwner(__int64 a1, __int64 a2, __int64 a3)
; BLTENTRY::SetupPresentParameters(BLTENTRY *this, struct BLTQUEUE *a2, struct DXGCONTEXT *a3, const struct _D3DKMT_PRESENT *a4, const struct _DXGKARG_PRESENT *a5, struct COREDEVICEACCESS *a6)
; PRESENTDODARG::SetPresentDodArg(PRESENTDODARG *this, struct DXGCONTEXT *a2, struct DXGALLOCATION *a3, int a4, unsigned __int8 a5, const struct tagRECT *a6, const struct _D3DKMT_PRESENT *a7, const struct _DXGKARG_PRESENT *a8, struct COREDEVICEACCESS *a9)
; DmmSetViewState(DXGADAPTER *this, unsigned int a2, char a3)
; DXGSESSIONMGR::CreateSession(DXGSESSIONMGR *this, __int64 a2, __int64 a3, __int64 a4)
; DxgkSetProcessSchedulingPriorityClass(void *a1, unsigned int a2, __int64 a3)
; DXGPROCESS::SetProcessSchedulingPriorityClass(__int64 a1, unsigned int a2)
; VidSchSetPriorityClassProcessX(__int64 a1, unsigned int a2)
; DXGDMM_VIDPNTOPOLOGY_INTERFACE_V1_IMPL::RemoveCopyProtection(DXGDMM_VIDPNTOPOLOGY_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPNTOPOLOGY__ *a2, __int64 a3)
; DXGGLOBAL::CreateGlobal(__int64 a1, __int64 a2)
; CreateDxgkSharedObjectTypes(__int64 a1, __int64 a2, __int32 (__stdcall __high *a3)(enum _OB_OPEN_REASON, char, struct _EPROCESS *, void *, unsigned __int32 *, unsigned __int32))
; CreateSharedObject(PCWSTR SourceString, struct _GENERIC_MAPPING *a2, __int32 (__stdcall __high *a3)(enum _OB_OPEN_REASON, char, struct _EPROCESS *, void *, unsigned __int32 *, unsigned __int32), void (__stdcall *a4)(void *), struct _OBJECT_TYPE **a5)
; DxgkpCreateDodPresent(struct ADAPTER_DISPLAY *a1, unsigned int a2, struct _KEVENT *a3, char a4)
; CreateOutputDuplManager(__int64 a1, struct ADAPTER_DISPLAY *a2, struct OUTPUTDUPL_MGR **a3)
; OUTPUTDUPL_MGR::CreateSourceContextLists(OUTPUTDUPL_MGR *this, __int64 a2)
; VIDPN_MGR_CLASSFACTORY::CreateVidPnMgr(struct ADAPTER_DISPLAY *const a1, struct VIDPN_MGR **a2)
; VIDPN_MGR::_ReadTargetPriorityList(__int64 a1, void *a2, UNICODE_STRING *a3, __int64 a4)
; VIDPN_MGR::_ReadConfiguration(VIDPN_MGR *this)
; MonitorCreateMonitorManager(__int64 a1, __int64 a2)
; DXGGLOBAL::CreateAdapter(DXGGLOBAL *this, struct _DEVICE_OBJECT *a2, struct DXGADAPTER **a3, struct _DXGK_ADAPTER_CAPS *a4)
; ADAPTER_DISPLAY::CreateDisplayCore(struct DXGADAPTER *a1, struct ADAPTER_DISPLAY **a2)
; ADAPTER_RENDER::CreateRenderCore(struct DXGADAPTER *a1, struct ADAPTER_RENDER **a2)
; DpiFdoCreateRelatedObjects(__int64 a1, unsigned int a2)
; DpiCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString)
; DpiGdoCreateGdiObjects(__int64 a1, unsigned int a2)
; DpiAppendNumberToString(PCWSTR SourceString, ULONG Value, PUNICODE_STRING Destination)
; DpiGdoSetupGdiParameters(__int64 a1, __int64 a2, unsigned int a3)
; DpiAppendStringToString(PCWSTR Source, PCWSTR a2, PUNICODE_STRING UnicodeString)
; DpiGdoCreateServiceEntry(__int64 a1, __int64 a2)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; VIDPN_MGR::SaveInitialVidPnTopologyAsLkg(VIDPN_MGR *this)
; MonitorCreatePhysicalMonitor(DXGADAPTER *this, __int64 a2, struct _DEVICE_OBJECT *a3, char a4, unsigned __int8 a5)
; MonitorNotifyDeviceNodeReady@<rax>(DXGADAPTER *this@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, signed int a4@<r13d>)
; MONITOR_MGR::_HandleCreatePhysicalMonitor(MONITOR_MGR *this, unsigned int a2, struct _DEVICE_OBJECT *a3, char a4, unsigned __int8 a5)
; MONITOR_MGR::_HandleCreateMonitorStep2(MONITOR_MGR *this, __int64 a2, struct DXGMONITOR *a3, struct DXGMONITOR *a4)
; MONITOR_MGR::_CreatePhysicalMonitor(MONITOR_MGR *this, unsigned int a2, struct _DEVICE_OBJECT *a3, char a4, struct DXGMONITOR *a5, struct DXGMONITOR **a6)
; DXGMONITOR::_OnMonitorDeviceNodeReady@<rax>(DXGMONITOR *this@<rcx>, __int64 a2@<rdx>, signed int a3@<r13d>)
; pLoadAdditinalMode(__int64 a1, __int64 a2)
; MonitorInitializeAdapterDone(DXGADAPTER *this, __int64 a2)
; MONITOR_MGR::_OnAdapterInitializationDone(MONITOR_MGR *this, __int64 a2)
; MONITOR_MGR::_CreateBootPersistentMonitors(MONITOR_MGR *this, __int64 a2)
; MONITOR_MGR::_OpenPersistencyRegistry(MONITOR_MGR *this, ACCESS_MASK a2, void **a3)
; DxgkOpenRegistrySubkey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, void *a3, const struct _UNICODE_STRING *a4)
; CCD_BTL::CreateGlobal(__int64 a1)
; pReadDetailTimingFromReg(HANDLE KeyHandle, int a2, unsigned int a3, __int64 a4)
; ConvertMonitorModeTimingType(__int64 a1, __int64 a2)
; ConvertMonitorCapablitiesOrigin(__int64 a1, __int64 a2)
; ConvertVideoSignalInfo(__int64 a1, __int64 a2)
; ConvertFrequencyRange(__int64 a1, void *a2)
; DXGK_MONITORSOURCEMODESET_INTERFACE_V1_IMPL::CreateNewModeInfo(struct D3DKMDT_HMONITORSOURCEMODESET__ *const a1, struct _D3DKMDT_MONITOR_SOURCE_MODE **a2, __int64 a3)
; DXGMONITOR::_CreateMonitorModeEnumerator(DXGMONITOR *this, const struct DXGMONITOR::_DMMMONITORSOURCEMODE *a2, struct _D3DKMDT_MONITOR_SOURCE_MODE **a3)
; DXGPORTDMM_VIDEOPRESENTTARGETSET_INTERFACE_V1_IMPL::CreateNewTargetInfo(DXGPORTDMM_VIDEOPRESENTTARGETSET_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDEOPRESENTTARGETSET__ *const a2, struct _D3DKMDT_VIDEO_PRESENT_TARGET **a3)
; DXGPORTDMM_VIDEOPRESENTSOURCESET_INTERFACE_V1_IMPL::CreateNewSourceInfo(DXGPORTDMM_VIDEOPRESENTSOURCESET_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDEOPRESENTSOURCESET__ *const a2, struct _D3DKMDT_VIDEO_PRESENT_SOURCE **a3)
; DxgkConvertStringToWideString(PCSZ SourceString, unsigned __int64 a2, unsigned __int16 *a3)
; DpiReadSystemFirmwareTable(signed __int64 a1, __int64 a2, int a3, unsigned int a4, void *a5, __int64 a6)
; ADAPTER_DISPLAY::SetCachedModeList(ADAPTER_DISPLAY *this, struct _D3DKMT_GETDISPLAYMODELIST *a2)
; DXGK_MONITOR_INTERFACE_V1_IMPL::GetMonitorDescriptorSet(void *const a1, __int64 a2, struct D3DKMDT_HMONITORDESCRIPTORSET__ **a3, const struct _DXGK_MONITORDESCRIPTORSET_INTERFACE **a4)
; ADAPTER_RENDER::CopyDListFileName(ADAPTER_RENDER *this, unsigned __int16 *a2, __int64 a3)
; ADAPTER_DISPLAY::CreateCopyProtection(ADAPTER_DISPLAY *this, unsigned int a2, int a3, unsigned int *a4)
; ADAPTER_RENDER::CreateFormattingBuffer(ADAPTER_RENDER *this)
; ADAPTER_RENDER::DdiCreateOverlay(ADAPTER_RENDER *this, struct _DXGKARG_CREATEOVERLAY *a2, __int64 a3)
; ADAPTER_DISPLAY::DdiSetPalette(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETPALETTE *a2, __int64 a3)
; DXGADAPTER::DdiSetPowerPState(DXGADAPTER *this)
; ADAPTER_DISPLAY::DodGetScanLine(ADAPTER_DISPLAY *this, unsigned int a2, struct _DXGKARG_GETSCANLINE *a3)
; DxgkPowerSettingCallback(const struct _GUID *a1, void *a2, __int64 a3, void *a4)
; ADAPTER_DISPLAY::FindCopyProtection(ADAPTER_DISPLAY *this, int a2, int a3, struct DXGPROCESS *a4)
; ADAPTER_DISPLAY::SetQueuedPresentLimit(ADAPTER_DISPLAY *this, struct DXGDEVICE *a2, unsigned int a3)
; ADAPTER_DISPLAY::UpdateCopyProtection(ADAPTER_DISPLAY *this, unsigned int a2, int a3, unsigned int a4)
; DxgkSetModeFlags(__int64 a1, __int64 a2, char a3)
; DXGDEVICE::CreateVidMmAllocations<_DXGK_ALLOCATIONINFO2>(DXGDEVICE *this, struct DXGALLOCATION *a2, signed __int64 a3, __int64 a4, __int64 a5, struct COREDEVICEACCESS *a6, char a7, struct COREDEVICEACCESS *a8)
; DXGDEVICE::SetAllocationPriority(DXGDEVICE *this, struct _D3DKMT_SETALLOCATIONPRIORITY *a2, __int64 a3, __int64 a4)
; DxgkSetAllocationPriority@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; DxgkSetIndependentFlipMode(HANDLE Handle, __int64 a2, __int64 a3, int a4, int a5, struct _OBJECT_HANDLE_INFORMATION a6, struct _OBJECT_HANDLE_INFORMATION a7)
; DxgkCddOpenResource(struct _D3DKMT_OPENRESOURCE *a1, __int64 a2, struct _EPROCESS *a3, unsigned int *a4, void **a5)
; DxgkCddSetPalette(struct DXGADAPTER *this, const struct _DXGKARG_SETPALETTE *a2, __int64 a3)
; DxgCreateContextAllocationCB(__int64 a1)
; DxgSetPowerComponentActiveCB(__int64 a1, unsigned int a2)
; DxgSetPowerComponentActiveCBInternal(__int64 a1, unsigned int a2)
; DXGDEVICE::CreateOverlay(DXGDEVICE *this, struct _D3DKMT_CREATEOVERLAY *a2)
; DxgkSetGammaRamp(__int64 a1, __int64 a2, __int64 a3)
; ConvertD3DddiRotationToDmmRotation(__int64 a1)
; CreateFunctionalVidPnWithDisabledVidPnSource(const struct _DXGDMM_INTERFACE *a1, void *const a2, unsigned int a3, struct D3DKMDT_HVIDPN__ **a4, const struct _DXGDMM_VIDPN_INTERFACE **a5)
; CreateFunctionalVidPnWithPreservedPathFromVidPnSource(const struct _DXGDMM_INTERFACE *a1, void *const a2, unsigned int a3, unsigned int a4)
; DxgkSetStereoEnabled(__int64 a1, __int64 a2, __int64 a3)
; DXGDEVICE::UpdateDodFrontBuffer(DXGDEVICE *this, struct DXGALLOCATION *a2)
; DxgkOpenNtHandleFromName(__int64 a1, __int64 a2, __int64 a3)
; DxgkCreateOverlay@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; DXGDEVICE::OpenCddPrimaryHandle(DXGDEVICE *this, unsigned int a2)
; TranslateAndCopyDWMMoveRegionToDDAMoveRegions(unsigned int a1, const struct _D3DKMT_MOVE_RECT *a2, struct _D3DKMT_MOVE_RECT *a3)
; DxgkCreateKeyedMutex(__int64 a1, __int64 a2, __int64 a3)
; DxgkOpenKeyedMutex@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; DispConfigConvertFromVidPn(struct _DXGK_WIN32K_PARAM_DATA *a1, struct DXGADAPTER *a2, struct DMMVIDPN *a3, char a4)
; DisplayConfigHelperCreateSimulateMonitor(__int64 a1, unsigned int a2, int a3, __int64 a4)
; DxgkConvertDisplayConfigCScalingToDdiScaling(__int64 a1, __int64 a2, __int64 a3)
; DxgkSetGlobalRawmodeFlag(__int64 a1)
; OUTPUTDUPL_MGR::CreateOutputDuplication(OUTPUTDUPL_MGR *this, const struct _D3DKMT_CREATE_OUTPUTDUPL *a2, int a3, int a4)
; OUTPUTDUPL_SESSION_MGR::CreateRemoteOutputDuplMgr(OUTPUTDUPL_SESSION_MGR *this, unsigned int a2)
; DXGDXGIKEYEDMUTEX::OpenForDevice(DXGDXGIKEYEDMUTEX *this, struct DXGDEVICE *a2)
; DXGDXGIKEYEDMUTEX::OpenLocalMutex(__int64 a1, int a2, __int64 a3)
; DXGDXGIKEYEDMUTEX::OpenSharedSurfForDevice(DXGDXGIKEYEDMUTEX *this, struct DXGDEVICE *a2)
; DxgkCreateOutputDupl(struct _D3DKMT_CREATE_OUTPUTDUPL *a1, __int64 a2, __int64 a3)
; OutputDuplProcessRemoteSessionSetPointerShape(struct _DXGKARG_SETPOINTERPOSITION *a1, struct _DXGKARG_SETPOINTERSHAPE *a2, __int64 a3, __int64 a4)
; DDAMetaData::ConvertExistingDirtryRectsToGDIRegion(DDAMetaData *this)
; DDAMetaData::ConvertGdiRgnToRects(DDAMetaData *this)
; DDAMetaData::DoesRectOverlapWithExistingDirty(__int64 a1, __int64 a2, __int64 a3)
; DxgkpGetDodPrimaryInfo(struct DXGDEVICE *a1, struct DXGALLOCATION *a2, struct _D3DKMT_KMDOD_ESCAPE *a3)
; BLTENTRY::ReleasePresentDoneEvent(BLTENTRY *this, char a2)
; BLTQUEUE::SetQueuedPresentLimit(BLTQUEUE *this, unsigned int a2)
; DXGCONTEXT::CheckDevicePresentSettings(DXGCONTEXT *this, int a2, unsigned int a3)
; ConvertPackedAttributesToDDI(const struct _VIDSCH_LAYER_ATTRIBUTE *a1, struct _DXGK_MULTIPLANE_OVERLAY_ATTRIBUTES *a2)
; ConvertThunkOverlayToPackedAttributes(struct _VIDSCH_LAYER_ATTRIBUTE *a1, const struct D3DKMT_MULTIPLANE_OVERLAY_ATTRIBUTES *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; DpiMiracastDdiMiracastCreateContext(__int64 a1, __int64 a2, __int64 a3, char *a4)
; DpiMiracastHandleStartSessionDone@<rax>(PVOID P@<rcx>, __int64 a2@<rdx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; DpiMiracastHandleStopSessionDone(PVOID P, __int64 a2, __int64 a3)
; DpiBrightnessAISetBacklightOptLevel(struct _DEVICE_OBJECT *a1)
; DpiBrightnessIfSet(void *a1, char a2)
; DpiBrightnessIfSetBacklightOptimization(__int64 a1, unsigned int a2)
; DpiBrightnessIfSetState(void *a1, struct _DXGK_BRIGHTNESS_STATE *a2)
; DpiBrightnessPowerSettingCallback(const struct _GUID *a1, void *a2, __int64 a3, void *a4)
; DpiBrightnessSetBacklightOptimizationHelper(__int64 a1, unsigned int a2)
; DpiCallDrvSetBacklightOptimizationLevel(__int64 a1, __int64 a2, unsigned int a3)
; DpiCallDrvSetBrightness(__int64 a1, __int64 a2, char a3)
; DpiSetDeviceUsageType(PDEVICE_OBJECT DeviceObject, int a2, char a3)
; DpiAcpiDockEventCallback(PVOID NotificationStructure, PVOID Context)
; DpiAgpSetAgpCommand(__int64 a1, __int64 a2)
; DpOpenSpbResource(__int64 a1, int *a2, __int64 a3, ACCESS_MASK a4)
; DpReadSpbResource(__int64 a1, signed __int64 a2, __int64 a3, void *a4, PLARGE_INTEGER a5, void *a6, PIO_STATUS_BLOCK a7)
; DpiCreateSpbResourceRecord(__int64 a1, __int64 a2, void *a3)
; DpiLdaPowerDownAllAdaptersInChain(__int64 a1, __int64 a2)
; DpiTestSetBrightness(__int64 a1, unsigned __int8 a2)
; DmmSetTemporaryVideoOutputTechnology(DXGADAPTER *a1, __int64 a2, int a3)
; VIDPN_MGR::SetTargetPowerComponentIndex(VIDPN_MGR *this, int a2, int a3)
; VIDPN_MGR::_SerializeVidPnSourceModeSet(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; DmmGetMultisamplingMethodSetFromClientVidPnSource(DXGADAPTER *this, __int64 a2, int a3, int a4, void *Dst, __int64 a6, void *Dsta, __int64 a8)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::AcquireMonitorSourceModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, struct D3DKMDT_HMONITORSOURCEMODESET__ **a4)
; DXGDMM_INTERFACE_V1_IMPL::AcquireTargetSet(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDEOPRESENTTARGETSET__ **a3, const struct _DXGDMM_VIDEOPRESENTTARGETSET_INTERFACE **a4)
; DXGDMM_INTERFACE_V1_IMPL::CreateVidPn(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDPN__ **a3, const struct _DXGDMM_VIDPN_INTERFACE **a4)
; DXGDMM_INTERFACE_V1_IMPL::CreateVidPnCopy(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDPN__ *const a3, struct D3DKMDT_HVIDPN__ **a4)
; DXGDMM_VIDPN_INTERFACE_V1_IMPL::ReleaseMonitorSourceModeSet(DXGDMM_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, struct D3DKMDT_HMONITORSOURCEMODESET__ *const a3)
; DXGDMM_INTERFACE_V1_IMPL::ReleaseSourceSet(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDEOPRESENTSOURCESET__ *const a3)
; DXGDMM_INTERFACE_V1_IMPL::ReleaseTargetSet(DXGDMM_INTERFACE_V1_IMPL *this, void *const a2, struct D3DKMDT_HVIDEOPRESENTTARGETSET__ *const a3)
; DXGDMMTEST_INTERFACE_IMPL::CreateVidPn(DXGDMMTEST_INTERFACE_IMPL *this, __int64 a2, struct D3DKMDT_HVIDPN__ **a3)
; DXGDMMTEST_INTERFACE_IMPL::CreateVidPnFromActive(DXGDMMTEST_INTERFACE_IMPL *this, __int64 a2, struct D3DKMDT_HVIDPN__ **a3)
; DXGK_VIDPN_INTERFACE_V1_IMPL::AssignMultisamplingMethodSet(DXGK_VIDPN_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPN__ *const a2, __int64 a3, const struct _D3DDDI_MULTISAMPLINGMETHOD *a4)
; DXGK_VIDPNTOPOLOGY_INTERFACE_V1_IMPL::CreateNewPathInfo(DXGK_VIDPNTOPOLOGY_INTERFACE_V1_IMPL *this, struct D3DKMDT_HVIDPNTOPOLOGY__ *const a2, struct _D3DKMDT_VIDPN_PRESENT_PATH **a3)
; DMMVIDPNSOURCE::SetMultisamplingMethodSet(DMMVIDPNSOURCE *this, __int64 a2, const struct _D3DDDI_MULTISAMPLINGMETHOD *a3)
; CCD_TOPOLOGY::CopyRenewScope(CCD_TOPOLOGY *this, const struct CCD_TOPOLOGY *a2)
; `anonymous namespace::_SaveTopologySetCallback(struct CCD_STORE::TOPOLOGY_SET_DESCRIPTOR *a1, void *a2)
; anonymous_namespace_::_UpdateConnectedSetCallback(struct CCD_STORE::CONNECTED_SET_DESCRIPTOR *a1, void *a2)
; CCD_BTL::ConvertVidPnToPathsModality(CCD_BTL *this, struct DMMVIDPN *a2, struct _D3DKMT_GETPATHSMODALITY **a3)
; CCD_BTL::SetUnsupportedMonitorModesFlag(CCD_BTL *this, char a2)
; MONITOR_MGR::_CreateSimulatedMonitor@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, int a3@<r8d>, struct DXGMONITOR *a4@<r9>, signed int a5@<r13d>, __int64 a6)
; MONITOR_MGR::_HandleCreateSimulatedMonitor(__int64 a1, unsigned int a2, int a3, const struct DXGMONITOR *a4, struct DXGMONITOR *a5)
; MonitorCreateSimulatedMonitor(DXGADAPTER *this, __int64 a2, int a3, __int64 a4)
; MonitorQueryDmmSourceModeSetInterface(DXGADAPTER *this, __int64 a2)
; DXGK_MONITOR_INTERFACE_V1_IMPL::AcquireMonitorSourceModeSet@<rax>(void *const a1@<rcx>, struct D3DKMDT_HMONITORSOURCEMODESET__ **a2@<r8>, const struct _DXGK_MONITORSOURCEMODESET_INTERFACE **a3@<r9>, __int64 a4@<rdx>, __int64 a5@<rbp>)
; DXGK_MONITOR_INTERFACE_V1_IMPL::GetMonitorFrequencyRangeSet(void *const a1, __int64 a2, struct D3DKMDT_HMONITORFREQUENCYRANGESET__ **a3, const struct _DXGK_MONITORFREQUENCYRANGESET_INTERFACE **a4)
; DXGK_MONITOR_INTERFACE_V1_IMPL::ReleaseMonitorSourceModeSet(void *const a1, struct D3DKMDT_HMONITORSOURCEMODESET__ *const a2, __int64 a3)
; DxgkCreateRegistrySubkey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, void *a3, const struct _UNICODE_STRING *a4)
; DXGMONITOR::_ReadOneBlockMonitorDescriptorFromRegistry(HANDLE KeyHandle, unsigned int a2, struct DXGMONITOR::_MONITORDESCRIPTOR **a3)
; DXGMONITOR::_CopyMonitorInformation(DXGMONITOR *this, const struct DXGMONITOR *a2)
; DXGMONITOR::_CreateDefaultMonitorProfileForWDDMv1_0(DXGMONITOR *this)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\dxgmms1.c ;
; VidMmCreateAllocation(struct VIDMM_DEVICE *a1, void *a2, struct DXGADAPTERALLOCATION *a3, void *a4)
; VidSchiReadCommandFromContextQueue(__int64 a1, __int64 a2)
; VidSchiSetNextRunPacket(__int64 a1, __int64 a2)
; VidSchiDecrementContextReference(struct _VIDSCH_CONTEXT *a1)
; VidSchiSetPriorityContext(__int64 a1, unsigned int a2)
; VidSchiDelayReadyRoutine(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; VidSchiInterlockedReadUlong(__int64 a1, __int64 a2)
; VidSchiDecrementDeviceReference(__int64 a1)
; VidSchiSetTransferContextRunningTime(__int64 a1, __int64 a2, char a3)
; VidSchiConvertDeferredWaits(__int64 a1)
; VidMmCreateDmaPool(__int64 a1, int a2, __int64 a3, __int64 a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10)
; ADAPTER_DISPLAY::DdiSetVidPnSourceAddress(ADAPTER_DISPLAY *this, const struct _DXGKARG_SETVIDPNSOURCEADDRESS *a2)
; VidSchiSetInProcessPriorityContext(__int64 a1, int a2)
; ADAPTER_RENDER::DdiCreateContext(ADAPTER_RENDER *this, void *a2, struct _DXGKARG_CREATECONTEXT *a3)
; ADAPTER_RENDER::DdiCreateDevice(ADAPTER_RENDER *this, struct _DXGKARG_CREATEDEVICE *a2)
; VidSchiSetNodeResettingStateAtISR(__int64 a1)
; VidMmSetSegmentPowerState(struct VIDMM_GLOBAL *a1, unsigned int a2, int a3, char a4)
; VidMmCreateContextAllocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, unsigned __int32 a7, unsigned int a8, int a9, int a10, int a11, int a12, __int64 a13)
; VidSchiSelectReadyNode(struct _VIDSCH_GLOBAL *a1)
; VidSchiFindYieldThresholdExceededPriorityLevels(ULONGLONG Set, __int64 a2, __int64 a3, unsigned __int64 a4, __int64 a5)
; VidSchSetNodePowerState(__int64 a1, __int64 a2, char a3)
; VIDMM_GLOBAL::SetupPrimaryCpuAccess(VIDMM_GLOBAL *this, struct _VIDMM_ALLOC *a2)
; VIDMM_GLOBAL::VerifySegmentSet(VIDMM_GLOBAL *this, unsigned int a2, int a3, unsigned __int32 *a4)
; VIDMM_GLOBAL::VerifyAllocationPagingOperationDone(VIDMM_GLOBAL *this, struct _VIDMM_GLOBAL_ALLOC *a2)
; VidMmiSetPriorityForMemoryPages(struct _VIDMM_GLOBAL_ALLOC *a1, void *a2, __int64 a3)
; VIDMM_GLOBAL::SetupForBuildPagingBufferIteration(VIDMM_GLOBAL *this, __int64 a2, struct _VIDMM_GLOBAL_ALLOC *a3, struct _DXGKARG_BUILDPAGINGBUFFER *a4)
; VIDMM_GLOBAL::OpenAllocation(VIDMM_GLOBAL *this, struct VIDMM_DEVICE *a2, struct _VIDMM_MULTI_GLOBAL_ALLOC *a3, unsigned int a4, void *a5, int a6, struct DXGALLOCATION *a7, struct _VIDMM_MULTI_ALLOC **a8)
; VIDMM_GLOBAL::OpenLocalAllocation(VIDMM_GLOBAL *this, struct _VIDMM_GLOBAL_ALLOC *a2, void *a3)
; VIDMM_GLOBAL::OpenOneAllocation(VIDMM_GLOBAL *this, struct VIDMM_DEVICE *a2, struct _VIDMM_GLOBAL_ALLOC *a3, void *a4, __int64 a5, struct DXGALLOCATION *a6, struct _VIDMM_ALLOC **a7)
; VIDMM_GLOBAL::SetupForBuildPagingBuffer(VIDMM_GLOBAL *this, int a2, struct _VIDMM_GLOBAL_ALLOC *a3, struct _DXGKARG_BUILDPAGINGBUFFER *a4)
; VIDMM_PROCESS::GetProcessWorkingSetInformation(VIDMM_PROCESS *this, struct VIDMM_SEGMENT *a2, unsigned __int64 *a3, unsigned __int64 *a4)
; VIDMM_GLOBAL::AcquireGPUResourcesFromSegmentSet(__int64 a1, __int64 a2, char a3, int a4, char a5, __int64 a6, __int64 a7, signed int a8, __int64 a9, __int64 a10)
; VidSchiCreateContextInternal(__int64 a1, __int64 a2, __int64 a3)
; VidSchSetPriorityContext(__int64 a1, __int64 a2, __int64 a3)
; VidSchCreateContext(__int64 a1, __int64 a2)
; VidSchiCreateDeviceInternal(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; VidSchiOpenProcessAdapterInfo(__int64 a1, __int64 a2)
; VidSchSetQueuedPresentLimit(__int64 a1, __int64 a2)
; VidSchiReadDeviceConfiguration@<eax>(__int64 a1@<rcx>, __int64 a2@<rbx>)
; VidSchCreateDevice(__int64 a1, __int64 a2, __int64 a3)
; VidSchiSetSchedulerStatus(__int64 a1, int a2, int a3)
; VIDMM_GLOBAL::VerifySegmentSetAny(VIDMM_GLOBAL *this, unsigned int a2, int a3)
; VidSchCreateSyncObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; VIDMM_PROCESS::OpenAdapter(VIDMM_PROCESS *this, struct VIDMM_GLOBAL *a2)
; VIDMM_SEGMENT::ComputeNewWorkingSet(VIDMM_SEGMENT *this, unsigned int a2)
; VidSchCreateProcess(__int64 a1, __int64 a2, __int64 a3)
; VidSchSetVidPnSourceAddress(__int64 a1, const struct _DXGKARG_SETVIDPNSOURCEADDRESS *a2)
; VidSchSetInProcessPriorityContext(__int64 a1, __int64 a2)
; VIDMM_GLOBAL::CreateOneAllocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int32 a5, int a6, unsigned int a7, __int64 a8, __int64 a9, PVOID Object, __int64 a11, int a12, char a13, char a14, __int64 a15, __int64 a16)
; VIDMM_GLOBAL::SetupAllocationForCPUAccess(VIDMM_GLOBAL *this, struct _VIDMM_ALLOC *a2, __int64 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6)
; VIDMM_GLOBAL::AcquireGPUResourcesFromPreferredSegmentSet(__int64 a1, __int64 a2, char a3, int a4, unsigned int a5, unsigned int a6, __int64 a7, __int64 a8, signed int a9, __int64 a10, __int64 a11)
; VIDMM_POLICY::Set(VIDMM_POLICY *this)
; VidSchSetMonitorPowerState(__int64 a1, __int64 a2, __int64 a3)
; VidSchSetPriorityClassProcess(__int64 a1, __int64 a2, __int64 a3)
; VidSchiCreateNode(__int64 a1, __int64 a2, __int64 a3)
; VidSchiReadGlobalConfiguration(__int64 a1)
; CopyVidPnSourceStatistics(__int64 a1, __int64 a2)
; VidSchSetCrossAdapterData(__int64 a1, __int64 a2)
; VIDMM_GLOBAL::CreateContextAllocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, unsigned __int32 a7, unsigned int a8, int a9, int a10, int a11, int a12, __int64 a13)
; VIDMM_GLOBAL::GPUReadWritePhysical(VIDMM_GLOBAL *this, int a2, union _LARGE_INTEGER a3, unsigned __int8 a4)
; VIDMM_GLOBAL::GPUReadWritePhysicalInternal(VIDMM_GLOBAL *this, int a2, int a3, union _LARGE_INTEGER a4, unsigned __int8 a5)
; VIDMM_GLOBAL::SetAllocationPriority(VIDMM_GLOBAL *this, struct _VIDMM_MULTI_ALLOC *a2, unsigned int a3)
; VIDMM_GLOBAL::SetOneAllocationPriority(VIDMM_GLOBAL *this, struct _VIDMM_ALLOC *a2, __int64 a3)
; VIDMM_GLOBAL::VidMmSetAllocationFlipQueueReferencesPointer(VIDMM_GLOBAL *this, struct _VIDMM_MULTI_ALLOC *a2, struct VIDMM_FLIP_QUEUE_REFERENCES *a3)
; VIDMM_PROCESS::SetWorkingSetInformation(VIDMM_PROCESS *this, struct _D3DKMT_WORKINGSETINFO *a2, __int64 a3)
; VIDMM_MEMORY_SEGMENT::RotateCopyCallback(struct _MDL *a1, struct _MDL *a2, void *a3, __int64 a4)
; VIDMM_SEGMENT::SpecialLockRotateCopyCallback(struct _MDL *a1, struct _MDL *a2, void *a3)
; CopyNodeStatistics(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\e22w8x64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\EhStorClass.c ;
; FilterDeviceSetState(__int64 a1, int a2, int a3)
; ChildDeviceCreateIoTarget(__int64 a1)
; RtlStringCbCopyA(char *pszDest, size_t cbDest, const char *pszSrc)
; IoctlDeviceSetAuthzState(__int64 a1, __int64 a2)
; IoctlDeviceSetQueueState(__int64 a1, __int64 a2)
; ConvertAnsiToUnicode(PCWSTR SourceString, __int64 a2, __int64 a3, unsigned int a4)
; RtlStringCopyWorkerA(char *pszDest, size_t cchDest, const char *pszSrc)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; StorSqmCreateStringStreamEntry(__int64 a1, __int64 a2)
; ConvertSiloStringToSiloID(__int64 a1, int a2, __int64 a3)
; PolicyReadSiloAllowList(__int64 a1, __int64 a2, __int64 a3)
; ChildDeviceCreate(__int64 a1, int a2, unsigned int a3, unsigned __int8 a4)
; AppendFieldTrailingWhitespaceRemoved(const char *a1, size_t a2, __int64 a3, unsigned int a4)
; CreateProxyRequest(__int64 a1, void **a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\EhStorTcgDrv.c ;
; IoctlCreateBand(__int64 a1, __int64 a2)
; IoctlSetBandLocation(__int64 a1, __int64 a2)
; IoctlSetBandSecurity(__int64 a1, __int64 a2)
; IoctlSetBandMetadata(__int64 a1, __int64 a2)
; LoadBandTableEntries(__int64 a1, unsigned int a2, int a3, char a4)
; BmReadBandTableEntries(__int64 a1, unsigned int a2, int a3, __int64 a4, char a5)
; BmSetBandMetadata(__int64 a1, unsigned int a2, unsigned int a3, unsigned int a4, __int64 a5)
; BmConvertAlgorithmIdToOid(int a1)
; StorSqmSetIfMaxDWORD(__int64 a1, int a2, __int64 a3)
; StorSqmSetIfMinDWORD(__int64 a1, int a2, __int64 a3)
; TcglibOpenSession(int a1, __int64 a2, __int64 a3)
; TcglibSetBandLocation(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; TcglibSetBandSecurity(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; TcglibSetBandPin(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int *a5)
; TcglibSetBandMetadata(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, unsigned int a5, __int64 a6)
; TcglibpOpenSession(__int64 a1, __int64 a2)
; TcglibpOpenSessionWithRetry(__int64 a1, __int64 a2, __int64 a3)
; GenSetTPerPropertiesParams(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4)
; TcglibpSetAuthorityPin(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TcglibpSetBandLocation(__int64 *a1, __int64 a2, unsigned int a3, __int64 a4)
; TcglibpSetBandSecurity(__int64 *a1, __int64 a2, unsigned int a3, __int64 a4)
; GenSetBandMetadataParams(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 *a4)
; TcglibpSetBandMetadata(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, unsigned int a5, __int64 a6)
; TcglibpSetTableColumns(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)
; TcglibpSetTableColumnData(__int64 *a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, int a6, int a7)
; GenSetTableColumnParams(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; GenSetACEBooleanExpr(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TcglibpSetACEBooleanExpr(__int64 *a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\errdev.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ETD.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\evbda.c ;
; RtlStringCchCopyNW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, size_t cchSrc)
; win_util_KeSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\exfat.c ;
; FppReserveClusters(__int64 a1, ULONG_PTR a2, __int64 a3, RTL_BITMAP *a4, __int64 a5, int a6, ULONG NumberToSet)
; FppReadBitmapFile(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FppOpenBitmapFile(__int64 a1, __int64 a2)
; FppSetDirtyBcb(__int64 a1, __int64 a2, ULONG_PTR a3)
; FppFsdRead(__int64 a1, unsigned __int64 a2)
; FppOverflowPagingFileRead(__int64 a1, struct _KEVENT *a2)
; FppCreateBitmapFcb(__int64 a1, __int64 a2, int a3, int a4, unsigned int a5)
; FppDecompressUpcaseTable(__int64 a1, unsigned int a2, int a3, __int64 a4)
; FppSetupAllocationSupport(__int64 a1, __int64 a2)
; FppTearDownAllocationSupport(__int64 a1, __int64 a2)
; FppSetFatEntry(__int64 a1, __int64 a2, unsigned int a3, int a4)
; FppSetFatRun(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4)
; FppReadVolumeFile(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FppReadDirectoryFile(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; FppOpenDirectoryFile(__int64 a1, __int64 a2)
; FppFsdCreate(__int64 a1, __int64 a2)
; FppCommonCreate(__int64 a1, __int64 a2)
; FppOpenVolume(__int64 a1, __int64 a2, __int64 a3, ULONG_PTR a4, ACCESS_MASK *a5, unsigned __int16 a6, int a7)
; FppOpenRootDcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int16 a6, int a7)
; FppOpenExistingDcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, ACCESS_MASK *a6, unsigned __int16 a7, int a8, char a9, char a10, __int64 a11)
; FppOpenExistingFcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int16 a7, ULONG_PTR a8, char a9, ULONG_PTR BugCheckParameter2, char a11, char a12, __int64 a13)
; FppOpenTargetDirectory(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ACCESS_MASK *a5, unsigned __int16 a6, char a7)
; FppOpenExistingDirectory(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, int a9, int a10, int a11, char a12, __int64 a13, __int64 a14, __int64 a15, unsigned __int16 a16, int a17, __int64 a18, char a19)
; FppOpenExistingFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, __int64 a8, int a9, int a10, int a11, char a12, __int64 a13, __int64 a14, ACCESS_MASK *a15, unsigned __int16 a16, ULONG_PTR a17, char a18, int BugCheckParameter2, char a20, char a21, char a22)
; FppCreateNewDirectory(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, ACCESS_MASK *a8, unsigned __int16 a9, char a10, char a11, char a12)
; FppCreateNewFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, ACCESS_MASK *a8, unsigned __int16 a9, ULONG_PTR a10, char a11, char a12, char a13, char a14, char a15)
; FppSetFullNameInFcb(__int64 a1, __int64 a2, __int64 a3)
; FppNonCachedNonAlignedRead(PIRP Irp, __int64 a2, __int64 a3, __int64 a4, int a5)
; FppCreateNewFileRecord(__int64 a1, __int64 a2, unsigned int a3)
; FppSetFileSizeInFileRecord(__int64 a1, __int64 a2, char a3)
; FppFastQueryNetworkOpenInfo(__int64 a1, BOOLEAN a2, __int64 a3, __int64 a4)
; FppFsdSetInformation(__int64 a1, __int64 a2)
; FppCommonSetInformation(__int64 a1, __int64 a2)
; FppSetBasicInfo(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)
; FppSetDispositionInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FppSetRenameInfo(__int64 a1, __int64 a2, __int64 a3, ULONG_PTR a4, __int64 a5)
; FppSetAllocationInfo(__int64 a1, __int64 a2, ULONG_PTR a3, __int64 a4)
; FppSetEndOfFileInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ULONG_PTR a5)
; FppSetValidDataLengthInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FppSetFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FppDecodeFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FppPerformVerifyDiskRead(__int64 a1, __int64 a2, void *a3, LARGE_INTEGER a4, ULONG Length, char a6)
; FppSetPurgeFailureMode(__int64 a1, __int64 a2)
; FppSetFullFileNameInFcb(__int64 a1, __int64 a2)
; FppPostStackOverflowRead(__int64 a1, __int64 a2, __int64 a3)
; FppStackOverflowRead(__int64 a1, struct _KEVENT *a2)
; FppCommonRead(PIRP Irp, __int64 a2)
; FppAcquireFcbForReadAhead(__int64 a1, BOOLEAN a2)
; FppReleaseFcbFromReadAhead(__int64 a1)
; FppFilterCallbackAcquireForCreateSection(__int64 a1)
; FppTearDownVcb(__int64 a1, __int64 a2)
; FppCreateRootDcb(__int64 a1, __int64 a2)
; FppCreateFcb(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, char a12)
; FppCreateDcb(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11)
; FppCreateIrpContext(__int64 a1, char a2)
; FppGetNextFcbTopDown(__int64 a1, __int64 a2, __int64 a3)
; FppFsdSetVolumeInformation(__int64 a1, __int64 a2)
; FppCommonSetVolumeInfo(__int64 a1, __int64 a2)
; FppSetFsLabelInfo(__int64 a1, __int64 a2, unsigned int *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fastfat.c ;
; FatSetDirtyBcb(__int64 a1, __int64 a2, __int64 a3, char a4)
; FatFsdRead(__int64 a1, unsigned __int64 a2)
; FatOverflowPagingFileRead(__int64 a1, struct _KEVENT *a2)
; FatSetupAllocationSupport(__int64 a1, __int64 a2)
; FatTearDownAllocationSupport(__int64 a1, __int64 a2)
; FatSetFatEntry(__int64 a1, __int64 a2, unsigned int a3, signed int a4)
; FatSetFatRun(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, char a5)
; FatReadVolumeFile(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4)
; FatReadDirectoryFile(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; FatOpenDirectoryFile(__int64 a1, __int64 a2)
; FatOpenEaFile(__int64 a1, __int64 a2)
; FatFsdCreate(__int64 a1, __int64 a2)
; FatCommonCreate(__int64 a1, __int64 a2)
; FatOpenVolume(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ACCESS_MASK *a5, unsigned __int16 a6, int a7)
; FatOpenRootDcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int16 a6, int a7)
; FatOpenExistingDcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int16 a7, int a8, char a9, char a10, char a11, char a12, __int64 a13)
; FatOpenExistingFcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, ACCESS_MASK *a6, unsigned __int16 a7, int a8, __int64 a9, unsigned int a10, char a11, ULONG_PTR BugCheckParameter2, char a13, char a14, char a15, char a16, __int64 a17)
; FatOpenTargetDirectory(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ACCESS_MASK *a5, unsigned __int16 a6, char a7, char a8)
; FatOpenExistingDirectory(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, __int64 a7, int a8, int a9, __int64 a10, __int64 a11, unsigned __int16 a12, int a13, char a14, int a15, char a16, char a17)
; FatOpenExistingFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4, _QWORD *a5, ULONG_PTR a6, __int64 a7, __int64 a8, __int16 a9, int a10, _DWORD *a11, int a12, __int64 a13, int a14, int a15, char a16, int BugCheckParameter2, ULONG_PTR a18, char a19, int a20, char a21, int a22)
; FatCreateNewDirectory(__int64 a1, __int64 a2, struct _FILE_OBJECT *a3, __int64 a4, __int64 a5, __m128i *a6, __int64 a7, ACCESS_MASK *a8, unsigned __int16 a9, __int64 a10, unsigned int a11, char a12, char a13, char a14, char a15)
; FatCreateNewFile(__int64 a1, __int64 a2, struct _FILE_OBJECT *a3, __int64 a4, __int64 a5, __m128i *a6, __int64 a7, ACCESS_MASK *a8, __int64 a9, int a10, __int64 a11, unsigned int a12, char a13, __int64 a14, char a15, char a16, char a17, char a18, char a19)
; FatSetFullNameInFcb(__int64 a1, __int64 a2, signed __int64 a3)
; FatNonCachedNonAlignedRead(PIRP Irp, __int64 a2, __int64 a3, unsigned int a4, ULONG a5)
; FatCreateNewDirent(__int64 a1, __int64 a2, unsigned int a3)
; FatSetFileSizeInDirent(__int64 a1, __int64 a2, __int64 a3)
; FatSetFileSizeInDirentNoRaise(__int64 a1, __int64 a2, __int64 a3)
; FatCreateEa(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; FatReadEaSet(__int64 a1, __int64 a2, unsigned __int16 a3, __int64 a4, __int64 a5, __int64 a6)
; FatDeleteEaSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int16 a5)
; FatAddEaSet(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; FatAppendPackedEa(__int64 a1, const void **a2, __int64 a3, __int64 a4, __int64 a5, int a6)
; FatFastQueryNetworkOpenInfo(__int64 a1, BOOLEAN a2, __int64 a3, __int64 a4)
; FatFsdSetInformation(__int64 a1, __int64 a2)
; FatCommonSetInformation(__int64 a1, __int64 a2)
; FatSetBasicInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FatSetDispositionInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FatSetRenameInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FatSetAllocationInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FatSetEndOfFileInfo(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4, __int64 a5)
; FatSetValidDataLengthInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FatSetFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FatDecodeFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FatPerformVerifyDiskRead(__int64 a1, __int64 a2, void *a3, LARGE_INTEGER a4, ULONG Length, char a6)
; FatSetPurgeFailureMode(__int64 a1, __int64 a2)
; FatSetFullFileNameInFcb(__int64 a1, __int64 a2)
; FatPostStackOverflowRead(__int64 a1, __int64 a2, __int64 a3)
; FatStackOverflowRead(__int64 a1, struct _KEVENT *a2)
; FatCommonRead(PIRP Irp, __int64 a2)
; FatAcquireFcbForReadAhead(__int64 a1, BOOLEAN a2)
; FatReleaseFcbFromReadAhead(__int64 a1)
; FatFilterCallbackAcquireForCreateSection(__int64 a1)
; FatTearDownVcb(__int64 a1, __int64 a2)
; FatCreateRootDcb(__int64 a1, __int64 a2)
; FatCreateFcb(LARGE_INTEGER a1, __int64 a2, __int64 a3, int a4, char a5, int a6, char a7, char a8, char a9)
; FatCreateDcb(LARGE_INTEGER a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7)
; FatCreateIrpContext(__int64 a1, char a2)
; FatGetNextFcbTopDown(__int64 a1, __int64 a2, __int64 a3)
; FatFsdSetVolumeInformation(__int64 a1, __int64 a2)
; FatCommonSetVolumeInfo(__int64 a1, __int64 a2)
; FatSetFsLabelInfo(__int64 a1, __int64 a2, unsigned __int16 *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fdc.c ;
; FdcCreateFloppyPdo(__int64 a1, unsigned __int8 a2)
; FdcCreateClose(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fileinfo.c ;
; FIPreReadWriteCallback(__int64 a1, __int64 a2, __int64 a3)
; FIPreSetInformationCallback(__int64 a1, __int64 a2, __int64 a3)
; FIPostReadWriteCallback(__int64 a1, __int64 a2, unsigned __int64 a3, char a4)
; FIPostSetInformationCallback(__int64 a1, __int64 a2, unsigned __int64 a3, char a4)
; FIPfOpenAttemptsRundownEnd(__int64 a1)
; FIETWLogMdlReadWrite(__int64 a1, __int64 a2)
; FIETWLogPreSetInformation(__int64 a1, __int64 a2)
; FIPfUserOpenFind(__int64 a1)
; FIPfUserOpenDispatchCleanup(__int64 a1)
; FIPostCreateCallback(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4)
; FIPreCreateCallback(__int64 a1, __int64 a2, __int64 a3)
; FIPfFileFSOpPostCreate(__int64 a1, __int64 a2, WCHAR **a3)
; FIStreamSetFileInfo(__int64 a1, __int64 *a2, __int64 a3)
; FIStreamCreate(__int64 a1)
; FIPfInterfaceOpen(__int64 a1)
; FIPfDriverCreateContextSetup(__int64 a1)
; FIPfOpenAttemptsOpenStart(__int64 a1, __int64 a2)
; FIPfOpenAttemptsOpenEnd(__int64 a1, __int64 a2)
; FIPfFileOpenAdd(__int64 a1, __int64 a2)
; FIPfFileOpenRemove(__int64 a1, __int64 a2, __int64 a3)
; FIPfVolumeOpenAdd(__int64 a1, __int64 a2)
; FIPfVolumeOpenRemove(__int64 a1, __int64 a2, __int64 a3)
; FIPfOpenListRemove(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FIPfFileFSOpPostSetInformation(__int64 a1, __int64 a2)
; FIPfFileGetFileObjectPostFailedCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FIVolumeCreate(__int64 a1)
; FIPfOpenAttemptsRundownStart(__int64 a1, int a2)
; FIPfOpenAttemptsInitialize(void *a1)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(struct _DRIVER_OBJECT *a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; FIETWLogFileCreate(__int64 a1, __int64 a2, unsigned int a3, unsigned __int16 a4)
; FIPfDisableUntilTickMsSet(__int64 a1, unsigned int a2, __int64 a3)
; FIPfFileFSOpPreventOpensForFailedStreamGet(__int64 a1, int a2, __int64 a3, __int64 a4)
; FIPfOpenListNotifyConflict(__int64 a1, __int64 a2, int a3)
; FIPfUserOpenCleanup(__int64 a1)
; FIPfUserOpenDispatchIOCTL(__int64 a1)
; FIPfUserOpenInitialize(void *a1)
; FIPfUserOpenNotifyConflict(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\filetrace.c ;
; SetCallResult(__int64 a1, __int64 a2, __int64 a3)
; CreateParameterBlob(__int64 a1, __int64 a2, __int64 a3)
; FTInstanceSetup(__int64 a1, __int64 a2, int a3)
; UpdateDosDriveLetter(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\flpydisk.c ;
; FloppyCreateClose(__int64 a1, __int64 a2)
; FloppyReadWrite(__int64 a1, __int64 a2)
; FlReadWriteTrack(__int64 a1, __int64 a2, int a3, char a4, char a5, unsigned __int8 a6, char a7, unsigned __int8 a8, char a9)
; FlReadWrite(__int64 a1, __int64 a2, char a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fltMgr.c ;
; FltpSetBufferAndMdlBasedOnBufferingMode(__int64 a1, __int64 a2, __int64 a3)
; FltDecodeParameters(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FltpSetUpIrpCallControl(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; FltpSetupPerformIo(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5)
; FltpSetIrpCtrlIoPriority(__int64 a1)
; FltpFastIoMdlReadComplete(__int64 a1, __int64 a2, __int64 a3)
; FltpSaveFileObjectFileName(__int64 a1)
; SetContextIntoStreamList(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned __int64 a5, unsigned __int64 a6, __int64 a7)
; FltSetStreamContext(unsigned __int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; DoFreeContextMemory(PVOID P)
; DoFreeContext(PVOID P)
; DoReleaseContext(ULONG_PTR BugCheckParameter3)
; FltSetStreamHandleContext(unsigned __int64 a1, unsigned __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; FltSetCallbackDataDirty(signed __int32 *a1)
; FltpSetCallbacksForInstance(__int64 a1, __int64 a2, int a3)
; FltSetInstanceContext(__int64 a1, int a2, __int64 a3, __int64 a4)
; FltSetVolumeContext(__int64 a1, int a2, __int64 a3, __int64 a4)
; TreeUnlinkMultiDoWalk(__int64 a1, unsigned __int64 a2, unsigned __int64 a3)
; SetContextIntoStreamList_fin_0(__int64 a1, __int64 a2)
; FltSetInstanceContext_fin_0(__int64 a1, __int64 a2)
; FltSetVolumeContext_fin_0(__int64 a1, __int64 a2)
; FltSetActivityIdCallbackData(__int64 a1)
; FltSetFileContext(unsigned __int64 a1, ULONG_PTR a2, int a3, __int64 a4, ULONG_PTR a5)
; SetContextIntoFileList(__int64 a1, ULONG_PTR BugCheckParameter3, int a3, __int64 a4, unsigned __int64 a5, ULONG_PTR BugCheckParameter3a)
; SetContextIntoFileList_fin_0(__int64 a1, __int64 a2)
; FltpFastIoMdlReadCompleteCompressed(__int64 a1, __int64 a2, __int64 a3)
; FltFastIoMdlRead(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7)
; FltFastIoMdlReadComplete(__int64 a1, __int64 a2, __int64 a3)
; FltReadFile(__int64 a1, __int64 a2, ULONG_PTR *a3, int a4)
; FltReadFileEx(__int64 a1, __int64 a2, ULONG_PTR *a3, int a4)
; FltSetIoPriorityHintIntoCallbackData(__int64 a1)
; FltDoCompletionProcessingWhenSafe(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int (__fastcall *a5)(_QWORD, _QWORD, _QWORD, _QWORD), __int64 a6)
; FltSetCancelCompletion(__int64 a1, __int64 a2)
; RtlStringCbCopyA(char *pszDest, size_t cbDest, const char *pszSrc)
; FltpCreate(__int64 a1, __int64 a2)
; FltpSetIoTargetInFileObject(__int64 a1)
; FltpFastIoQueryOpen(__int64 a1, __int64 a2, __int64 a3)
; FltpFastIoRead(__int64 a1, ULONG_PTR *a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; FltFindExtraCreateParameter(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FltpCreateFileNameInformation(__int64 a1)
; FltpGetOpenedFileName(__int64 a1)
; FltpCallOpenedFileNameHandler(__int64 a1)
; FltpSetStreamListStandardInformationFlags@<rax>(int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6)
; FltpFastIoQueryNetworkOpenInfo(__int64 a1, __int64 a2, ULONG_PTR a3, __int64 a4, __int64 a5)
; FltpCreateFile(__int64 DesiredAccess, __int64 a2, HANDLE *a3, __int64 a4, __int64 DesiredAccessa, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, int a13, __int64 a14, int a15, __int64 a16)
; FltCreateFileEx2(__int64 DesiredAccess, __int64 a2, HANDLE *a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, __int64 a16)
; FltpFreeNameCacheCreateCtrl(PVOID Entry, __int64 a2)
; FltpCacheCreateNames(__int64 a1)
; FltpAllocateNameCacheCreateCtrl(__int64 a1)
; FltpSetPurgeFailureMode@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; FltpSetSectionContext(__int64 a1, __int64 a2, __int64 a3)
; FltCreateSectionForDataScan(__int64 a1, __int64 a2, ULONG_PTR a3, __int64 a4, int a5, int a6, int a7, int a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; FltAllocateExtraCreateParameterList(__int64 a1, unsigned int a2, __int64 a3)
; FltInsertExtraCreateParameter(__int64 a1, __int64 a2, __int64 a3)
; FltFreeExtraCreateParameterList(__int64 a1, __int64 a2)
; FltAllocateExtraCreateParameterFromLookasideList(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; FltpFastIoMdlRead(__int64 a1, __int64 a2, int a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; FltpCopyOffloadCapable(struct _DEVICE_OBJECT *a1, int a2)
; FltCreateFileEx(__int64 a1, __int64 a2, HANDLE *a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, __int64 a13, __int64 a14, int a15)
; FltpCreatePreserveFileObject(__int64 a1)
; FltSetTransactionContext(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5)
; CreateTemporaryFileNameInformation(__int64 a1)
; FltpSetVolumeNameCachingState(__int64 a1)
; FltpCreateVolumeDeviceObject(__int64 a1, void *a2, const UNICODE_STRING *a3, const UNICODE_STRING *a4, const UNICODE_STRING *a5, __int64 a6, __int64 a7)
; FltpCreateInstanceFromName@<rax>(__int64 a1@<rcx>, __int64 a2@<rbx>, unsigned int a3@<r8d>, void *a4@<r9>)
; FltpDoInstanceSetupNotification(__int64 a1, unsigned int a2)
; FltpDoFilterNotificationForNewVolume(__int64 a1)
; FltpOpenInstancesRegistryKey(PCUNICODE_STRING Source, PHANDLE KeyHandle)
; FltOpenVolume(__int64 a1, HANDLE *a2, __int64 a3)
; FltpSetAndEnlistTxVolContext(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; FltpCreateKtmResourceManager(__int64 a1, volatile signed __int64 *a2, __int64 a3, __int64 a4)
; FltCreateFile(__int64 a1, __int64 a2, HANDLE *a3, int a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10, int a11, __int64 a12, __int64 a13, int a14)
; FltpDoVolumeNotificationForNewFilter(__int64 a1)
; FltpCopyUnicodeString(__int64 a1, unsigned __int16 *a2)
; FltpGetLoadedLegacyFiltersList(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FltpCleanupLoadedLegacyFiltersList(PVOID P, unsigned int a2, void *a3)
; FltpCreateControlDeviceObject(__int64 a1, const UNICODE_STRING *a2, const UNICODE_STRING *a3, __int64 a4, __int64 a5)
; FltCreateCommunicationPort(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8)
; FltInitExtraCreateParameterLookasideList(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; FltpOpenClientPort(__int64 a1, __int64 a2)
; FltpLoadFilter(__int64 a1, __int64 a2)
; FltLoadFilter(PCUNICODE_STRING Source)
; FltpDoInstanceDetachNotification(__int64 a1)
; FltpDoFilterNotificationForNewVolume_fin_0(__int64 a1, __int64 a2)
; FltAllocateExtraCreateParameterFromLookasideList_fin_0(__int64 a1, __int64 a2)
; FltpCreateFile_fin_0(__int64 a1, __int64 a2)
; FltpCreateVolumeDeviceObject_fin_0(__int64 a1, __int64 a2)
; FltSetTransactionContext_fin_0(__int64 a1, __int64 a2)
; FltpSetAndEnlistTxVolContext_fin_0(__int64 a1, __int64 a2)
; FltpCreateControlDeviceObject_fin_0(__int64 a1, __int64 a2)
; FltpGetLoadedLegacyFiltersList_fin_0(__int64 a1, __int64 a2)
; FltpOpenClientPort_fin_0(__int64 a1, __int64 a2)
; FltpDoVolumeNotificationForNewFilter_fin_0(__int64 a1, __int64 a2)
; FltCreateCommunicationPort_fin_0(__int64 a1, __int64 a2)
; FltpSetTxVolVolNameCachePurge(unsigned __int64 a1, __int64 a2)
; FltAllocateExtraCreateParameter(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; FltAllocateExtraCreateParameter_fin_0(__int64 a1, __int64 a2)
; FltDeleteExtraCreateParameterLookasideList(__int64 a1, __int64 a2, unsigned int a3)
; FltFreeExtraCreateParameter(__int64 a1, __int64 a2)
; FltGetNextExtraCreateParameter(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FltRemoveExtraCreateParameter(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FltSetEcpListIntoCallbackData(__int64 a1, __int64 a2, __int64 a3)
; FltCheckLockForReadAccess(__int64 a1, __int64 a2)
; FltpFastIoReadCompressed(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9, __int64 a10)
; FltpFsControlLoadFileSystem(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; FltpDoAltitudeAdjustment(__int64 a1, __int64 a2)
; FltCancelFileOpen(__int64 a1, ULONG_PTR a2)
; FltCreateMailslotFile(__int64 DesiredAccess, __int64 a2, __int64 a3, __int64 a4, int DesiredAccessa, __int64 a6, __int64 a7, int a8, int a9, int a10, __int64 a11, __int64 a12)
; FltCreateMailslotFile_fin_0(__int64 a1, __int64 a2)
; FltCreateNamedPipeFile(__int64 DesiredAccess, __int64 a2, __int64 a3, __int64 a4, int DesiredAccessa, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, __int64 a17, __int64 a18)
; FltCreateNamedPipeFile_fin_0(__int64 a1, __int64 a2)
; FltSetEaFile@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, int a5@<r9d>)
; FltSetInformationFile(__int64 a1, __int64 a2, __int64 a3, int a4, signed int a5)
; FltSetQuotaInformationFile@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, int a5@<r9d>)
; FltSetSecurityObject@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, int a4@<r8d>, __int64 a5@<r9>)
; FltpCancelFileOpen(__int64 a1, ULONG_PTR a2, __int64 a3)
; FltpOpenLinkOrRenameTarget(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FltpDoUnloadFilter(__int64 a1, unsigned int a2, char a3)
; FltpDoUnloadFilter_fin_0(__int64 a1, __int64 a2)
; FltpGetFileNameOpenById(__int64 a1)
; FltpGetOpenedDestinationFileName(__int64 a1)
; FltpIsOpenByObjectId(__int64 a1, __int64 a2)
; FltpOpenFileForFailedSupersede(__int64 a1, __int64 a2)
; FltCreateSystemVolumeInformationFolder(__int64 a1, __int64 a2, __int64 a3)
; FltpSysVolCreateSecurityDescriptor(__int64 a1, __int64 a2, __int64 a3)
; FltSetVolumeInformation(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FltvAllocateExtraCreateParameter(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, int a6, __int64 a7)
; FltvAllocateExtraCreateParameterFromLookasideList(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; FltvCancelFileOpen(__int64 a1, __int64 a2)
; FltvCreateFile(size_t a1, __int64 a2, HANDLE *a3, int a4, __int64 a5, __int64 a6, int a7, int a8, int a9, int a10, int a11, __int64 a12, int a13, int a14)
; FltvCreateFileEx(size_t a1, __int64 a2, HANDLE *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, __int64 a13, __int64 a14, int a15)
; FltvCreateFileEx2(__int64 DesiredAccess, __int64 a2, HANDLE *a3, __int64 a4, int a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16)
; FltvCreateSectionForDataScan(__int64 a1, __int64 a2, ULONG_PTR a3, unsigned int a4, int a5, int a6, int a7, int a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; FltvCreateSystemVolumeInformationFolder(__int64 a1)
; FltvInstanceSetup(__int64 a1, unsigned int a2, unsigned int a3, unsigned int a4)
; FltvOpenVolume(__int64 a1, HANDLE *a2, __int64 a3)
; FltvSetEaFile(__int64 a1, __int64 a2, __int64 a3, int a4)
; FltvSetInformationFile(__int64 a1, __int64 a2, __int64 a3, int a4, unsigned int a5)
; FltvSetSecurityObject(__int64 a1, __int64 a2, int a3, __int64 a4)
; FltpvDoLostObjectCheck(size_t *a1)
; FltpvValidateReadWriteParameters(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, char a6, __int64 a7, char a8)
; FltvDoCompletionProcessingWhenSafe(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int (__fastcall *a5)(_QWORD, _QWORD, _QWORD, _QWORD), __int64 a6)
; FltvReadFile(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, char a6)
; FltvReadFileEx(__int64 a1, __int64 a2, unsigned __int64 *a3, __int64 a4, __int64 a5, char a6, int a7, int a8, int a9, int a10, __int64 a11)
; FltvSetFileContext(unsigned __int64 a1, ULONG_PTR a2, int a3, __int64 a4, ULONG_PTR a5)
; FltvSetInstanceContext(__int64 a1, int a2, __int64 a3, unsigned __int64 *a4)
; FltvSetStreamContext(unsigned __int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; FltvSetStreamHandleContext(unsigned __int64 a1, unsigned __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; FltvSetTransactionContext(__int64 a1, unsigned __int64 a2, int a3, __int64 a4, __int64 a5)
; FltvSetVolumeContext(__int64 a1, int a2, __int64 a3, unsigned __int64 *a4)
; FltpReadDriverParameters(UNICODE_STRING *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fsdepends.c ;
; DepFSPreCreate(__int64 a1, __int64 a2)
; DepFSPostCreate(__int64 a1, __int64 a2, __int64 a3, char a4)
; DepFSInstanceSetup@<rax>(__int64 a1@<rcx>, unsigned int a2@<r8d>, int a3@<r9d>, int a4@<r14d>)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fs_rec.c ;
; FsRecReadBlock(PDEVICE_OBJECT DeviceObject, PLARGE_INTEGER StartingOffset, unsigned int a3, unsigned int a4, PVOID *a5, __int64 a6)
; UdfsRecGetOpenSessionStart(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FsRecCreate(__int64 a1, __int64 a2)
; FsRecLoadFileSystem(__int64 a1, const WCHAR *a2)
; UdfsReadTrackInfo(struct _DEVICE_OBJECT *a1, char a2, void *a3)
; FsRecCreateAndRegisterDO(PDRIVER_OBJECT DriverObject, PCWSTR SourceString, __int64 a3, const WCHAR *a4, ULONG DeviceType, int a6, char DeviceTypea, char a8)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fvevol.c ;
; FveDatumUpdateCreateFromDataset(__int64 a1, __int64 a2, __int64 a3)
; FveDatumUpdateCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FveDatumCreateComplex(unsigned __int16 a1, __int64 a2, unsigned __int16 a3, __int64 a4)
; FveWorksetCreateWithLength(void *Src, size_t a2, __int64 a3, __int64 a4)
; FveDatasetAppendDatum(__int64 a1, __int64 a2, __int16 a3)
; FveDatasetCreate(void *Dst, unsigned __int64 a2, __int64 a3)
; FveRangeListQueryLastSet(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; FveRangeListAppend(__int64 a1, __int64 a2)
; FveAesCbcDecryptSectorsPageIsolation(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FveAesCbcDecryptSectorsNormal(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, unsigned int a6)
; FveAesCbcDecrypt(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FveRangeListQueryNextSet(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; StRtlIoStorInfoSetHybridWriteThrough(__int64 a1)
; FveFilteredRead(int a1, __int64 a2, __int64 a3, unsigned int a4, const void *Src, void *Dst)
; FveDecryptRegion(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; FveCryptAesDecrypt(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, unsigned int a6, char a7)
; FveAesCbcDecryptSectors(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, unsigned int a6, char a7)
; FveAesEcbDecrypt(__int64 a1, __int64 a2, __int64 a3)
; FveAesCcmDecrypt(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; FveDatumCopy(__int64 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int64 *a4, __int64 a5)
; FveDatumVirtualizationInfoCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FveDatumCreateAndCopy(unsigned __int16 a1, const void *a2, unsigned __int16 a3, __int64 a4)
; FveDatasetVmkGetAndDecryptDatum(__int64 a1, unsigned __int64 *a2, __int16 a3, __int64 a4, unsigned __int64 *a5)
; FveDatumKeyCreate(__int16 a1, const void *a2, unsigned __int16 a3, __int64 a4)
; FveDatumAesCcmEncCreate(__int64 a1, const void *a2, unsigned __int64 *a3, __int64 a4)
; FveInformationCreate(void *Dst, __int64 a2, __int64 a3, __int64 a4)
; FveFailReadWriteIrp(__int64 a1, __int64 a2, unsigned int a3)
; FveRangeListSet(__int64 a1, __int64 a2, __int64 a3)
; FvepRangeListCreateEntry(__int64 a1, __int64 a2)
; FveOpenAlgorithmProvider(__int64 a1, __int64 a2, unsigned int a3)
; MorBitSet(PVOID ClientIdentificationAddress, char a2, char a3)
; FveControlFileCreate2(__int64 a1, GUID *a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9, __int64 a10)
; FveFailReadWriteIrpQueue(__int64 a1, __int64 **a2, KSPIN_LOCK *a3)
; FveKeyringCreate(__int64 a1, signed __int64 a2, __int64 a3)
; FveFilteredDecrypt(int a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; FvepRangeListSetIntersecting(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FveDatumExternalInfoCreate(__m128i *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FvepDoKeyStretch(__int64 a1, __int16 a2, __int64 a3)
; FveDatumUnicodeCreate(__int64 a1, __int64 a2)
; ADiffuserDecrypt(unsigned __int64 a1, int a2)
; BDiffuserDecrypt(unsigned __int64 a1, int a2)
; FveCryptElephantDecrypt(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, void *Dst, unsigned int a6, char a7)
; FveFilterRundownRead(__int64 a1, __int64 a2)
; FveFilterRundownReadWrite(__int64 a1, __int64 a2, char a3)
; FveManageDataSetAttributes@<rax>(struct _IRP *a1@<rdx>, __int64 a2@<rcx>, int a3@<esi>, __int64 a4@<r8>)
; FveFailRundownReadWriteIrp(__int64 a1, __int64 a2, unsigned int a3, unsigned __int8 a4)
; FveResumeAllReadsAndWrites(__int64 a1)
; FveRundownAllReadsAndWrites(__int64 a1)
; FveTestRwStorageReadWrite(__int64 a1, __int64 a2)
; FvePerfDevCreateInstance(__int64 a1, UNICODE_STRING *a2)
; FveFilterCreate(__int64 a1, __int64 a2)
; BlCdoFilterCreate(__int64 a1, __int64 a2)
; BlRootDcbFilterCreate(__int64 a1, __int64 a2)
; FveDcbXeiFilterCreate(__int64 a1, __int64 a2, __int64 a3)
; ActionFveConvOpen(__int64 Tag, __int64 a2, __int64 a3)
; FveFsCreateSystemVolumeInformationFolder(PCUNICODE_STRING SourceString)
; FveConvLogFileOpened(__int64 a1)
; IoctlFveSetDataset(__int64 a1, __int64 a2, __int64 a3)
; FveSetFsMounted(__int64 a1, char a2, __int64 a3, char a4, int a5)
; FveControlFilesCreate(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; FveSaveFsMounted(__int64 a1, int a2, __int64 a3)
; FvepWipeInfoFilesLoadPin(__int64 a1, int *a2, __int64 a3)
; FveLoadWipeInfo(void *a1, void *a2, __int64 a3, __m128i *a4)
; FveWipeInfoFileCreate(__int64 a1, char *a2, int a3, char a4, __int64 a5)
; FveRemoveCopyFreeExtents(__int64 a1, struct _IO_STATUS_BLOCK *a2)
; FveFileOpen(const UNICODE_STRING *a1, GUID *a2, UNICODE_STRING *a3, const WCHAR *a4, char a5, unsigned int a6, ULONG a7, char a8, unsigned __int64 a9, __int64 a10)
; FveFileOpenEx(PCUNICODE_STRING SourceString, GUID *Guid, PUNICODE_STRING DestinationString, const WCHAR *a4, char a5, ULONG a6, unsigned int a7, ULONG a8, char a9, unsigned __int64 a10, __int64 a11, __int64 a12)
; FveFileSetSize(HANDLE FileHandle, __int64 a2)
; FveControlFileCreate(__int64 a1, GUID *a2, unsigned int a3, const WCHAR *a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9, __int64 a10)
; FveConvOpen(__int64 a1, __int64 a2)
; FveConvSetInitialConvStatus(__int64 a1, __int64 a2)
; FveConvCreateUsedBitmap(unsigned __int64 a1, unsigned __int64 a2, __int64 a3)
; FvepRegOpenKey(GUID *Guid, ACCESS_MASK DesiredAccess, char a3, HANDLE *a4)
; FveDcbSysFilterCreate(__int64 a1, __int64 a2, __int64 a3)
; FveFileSetLocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ActionFveUserFlagsRead(__int64 a1, __int64 a2, __int64 a3)
; ActionFveUnvirtualizedReadWrite(__int64 a1, __int64 a2, __int64 a3)
; FveFsOpenRoot(PCUNICODE_STRING SourceString, PHANDLE FileHandle)
; FvePowerSettingCallback(__int64 a1, int *a2, __int64 a3, __int64 a4)
; FveUpdatePowerSettings(__int64 a1)
; FveLoadIoCryptoConfig(void *a1, __int64 a2)
; FveLoadConfig(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)
; FveLoadRegistrySettings(__int64 a1, const GUID *a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; FveCreateDcbVol(PVOID Tag)
; BlCreateDcb(__int64 a1, __int64 a2, __int64 a3)
; BlCreateDcbImpl(__int64 a1, const wchar_t *a2, __int64 a3, int a4, __int64 a5, __int64 a6, ULONG Tag)
; FveLoadRegistryQueryRoutine(PCWSTR SourceString, int a2, const void *a3, unsigned int a4, __int64 a5, signed __int64 a6)
; ActionFveConvDecryptEDrv(__int64 a1, __int64 a2, __int64 a3)
; ActionFveSetManagement(__int64 a1, __int64 a2, __int64 a3, char a4)
; ActionFveWipeOpen(__int64 a1, __int64 a2, __int64 a3)
; FvepAutoUnlockSetNonce(__int64 a1)
; FvepCreateSecurityDescriptor(__int64 a1)
; FvepRegSetAutoUnlockExternalInfoDatum(GUID *Guid, PVOID Data)
; FveRegOpenCreateKey(UNICODE_STRING *a1, __int64 a2, HANDLE *a3)
; FveSetOrResetModifiedWriterMaximumIoSize(char a1)
; FveSetRegistryValue(UNICODE_STRING *a1, __int64 a2, ULONG a3, char a4, PVOID a5, ULONG a6)
; FveSetStatsValue(PCWSTR SourceString, __int64 a2, void *a3)
; IoctlFveSetDatasetEDrv(__int64 a1, __int64 a2, __int64 a3)
; MorBitAssumeSet(PDRIVER_OBJECT DriverObject)
; FveCreateDEOptOutFile(__int64 a1, __int64 a2, __int64 a3)
; FveFilterCsvSetTargetPath(__int64 a1, __int64 a2, __int64 a3)
; FveFilterCsvSetTargetPathWorker(PIRP Irp, __int64 a2, __int64 a3)
; FveWipeAdvanceConversionSliderReadOnly(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)
; FveWipeOpen(__int64 a1)
; FveWipeSetConversionSlider(__int64 a1, __int64 a2, signed __int64 a3)
; FveWipeSetNextRange(__int64 a1, __int64 a2, signed int a3, __int64 a4)
; FveConfigProviderCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FveConfigProviderGlobalEowSetConfig(__int64 a1, __int64 a2, void *a3)
; FveConfigProviderSetConfig(__int64 a1, __int64 a2)
; FveConfigSubscriberCreate(__int64 a1, PLARGE_INTEGER a2, __int64 a3, __int64 a4, __int64 a5, PLARGE_INTEGER a6, __int64 a7)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; FvepTestCrashSystemWhileConverting(__int64 a1, unsigned int a2)
; FveConvBlockConvert(__int64 a1, __int64 a2, __int64 a3)
; InitializeNextReadSubrequest(__int64 a1, ULONG_PTR a2)
; ReadCompletionRoutine(__int64 a1, __int64 a2, __int64 a3)
; FveConvSetNextRange(__int64 a1, __int64 a2, __int64 a3)
; FveConvSetConversionSlider(__int64 a1, __int64 a2, signed int a3)
; FveFilterReadWrite(ULONG_PTR a1, __int64 a2, char a3, unsigned __int64 a4, unsigned int a5)
; FveSetSubrequestState(__int64 a1, ULONG_PTR a2, int a3, char a4, char a5)
; ReadDecrypt(ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter2)
; ReadIssueDirect(ULONG_PTR a1)
; ProcessResourcedReadRequest(ULONG_PTR BugCheckParameter2)
; FveInitiateFveInfoCopyUpdate(__int64 a1, const void *a2)
; FvepReadInformationAndValidation(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; FveCompleteFveInfoCopyUpdate(__int64 a1)
; FvePrepareForFveInfoCopyUpdate(__int64 a1, unsigned int a2, unsigned __int8 a3)
; FvepLoadInformation(PVOID P, unsigned __int64 a2, __int64 a3, __int64 *a4, __int64 Pa, __int64 a6, __int64 a7, __int64 a8)
; FveConvSetUsedBitmap(__int64 a1, __int64 a2, __int64 a3)
; SetFveState(__int64 a1, unsigned int a2, __int64 a3, int a4, int a5)
; FveReadWriteDeviceCleanup(__int64 a1)
; FveInitialDataReadPhase2(PVOID P, void *a2, __int64 a3, int a4)
; FveReadWriteDeviceInit(__int64 a1)
; SetInitialFveState(__int64 a1, __int64 a2, __int64 a3)
; FveInitialDataRead(PVOID P, __int64 a2)
; FveInitialDataReadPhase1(__int64 a1, __int64 a2, void *a3)
; SetFveStateEx(__int64 a1, unsigned int a2, __int64 a3, int a4, char a5, int a6)
; WindDownFveVolume(__int64 a1)
; WindDownFveVolumeEDrv(__int64 a1)
; FveConvLoadConvLog(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FveInitialDataReadEDrv(PVOID Context, __int64 a2)
; FveReadInformationEDrv(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SetBandSecurityInfo(__int64 a1, const void *a2, unsigned int a3, const void *a4)
; FveReadWriteDriverCleanup(__int64 a1)
; FveEowFilterRundownReadWrite(__int64 a1, ULONG_PTR a2, __int64 a3, unsigned __int64 a4, unsigned int a5)
; FveEowFinalSweepConvertChunk(PVOID Tag, char a2)
; FveEowLoad(__int64 a1, __int64 *a2)
; FveEowLoadConvLog(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4)
; FveEowRegionSetRequest(ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter4, PVOID Object, signed int a4, int a5, char a6, int a7, int a8, int a9, int a10)
; FveEowSetDecryptMode(__int64 a1, unsigned __int8 a2)
; FveEowSetHibernate(__int64 a1, char a2, __int64 a3)
; FveEowSetKey(__int64 a1, __int64 a2, __int64 a3)
; FveEowSetSpecialRangesEncrypted(__int64 a1, ULONG_PTR a2, __int64 a3, int a4, ULONG a5)
; BlCreateOrRefDriverCdo(PDRIVER_OBJECT DriverObject, __int64 a2, __int64 a3, __int64 a4)
; FveCreateOrRefDriverCdo(__int64 a1, __int64 a2)
; FveCreateDcbVolType(PDRIVER_OBJECT *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FveLoadDriverTestConfig(__int64 a1)
; FveReadWriteDriverInit(__int64 a1)
; FveReadWriteSubrequestTransitionsInit(__int64 a1)
; FveLoadCryptoThrottleConfig(void *Dst)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\FWPKCLNT.c ;
; FwpsClassifyOptionSet0(__int64 a1, int a2, __m128i *a3)
; FwppProxyEngineOpen(__int64 a1)
; FwpsVirtualIfTunnelInfoSet0(__int64 a1, __m128i *a2)
; FwppSetPacketInfo(__int64 a1, __int64 a2)
; FwpsInjectionHandleCreate0(__int64 a1, __int64 a2, __int64 a3)
; FwpsTcpIpDispatchTableAndGlobalsSet0(unsigned __int64 a1, __int64 a2, int a3)
; FwpsL2DispatchTableAndGlobalsSet0(__int64 a1)
; FwppDPDispatchTableAndGlobalsSet0(__int64 a1)
; FwppvSwitchNotifyCompletionFnSet(__int64 a1, __int64 a2)
; WfpCreateLookasideListSimple(struct _NPAGED_LOOKASIDE_LIST *a1, SIZE_T a2, ULONG a3)
; WfpMidlObjectDecode(void (__fastcall *a1)(_QWORD, _QWORD), __int64 a2, unsigned int a3, __int64 a4)
; BFE_PERSISTENT_OBJECT_MARSHAL_Decode(__int64 a1)
; FWPM_CALLOUT0_MARSHAL_Decode(__int64 a1)
; WfpMidlObjectDecode_filt_0(__int64 a1)
; FwpmConnectionSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; FwpmNetEventCreateEnumHandle0(__int64 a1)
; IkeextSaCreateEnumHandle0(__int64 a1)
; IkeextSaDbSetSecurityInfo0(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; FwppSecurityDescriptorSetInfo(PSECURITY_DESCRIPTOR SecurityDescriptor, PACL Dacl, __int64 a3, __int64 a4, ACL *Dacla, __int64 a6)
; FWPM_PROVIDER_CONTEXT0_MARSHAL_Decode(__int64 a1)
; FWPM_PROVIDER_CONTEXT1_MARSHAL_Decode(__int64 a1)
; FWPP_IKEEXT_SA_DETAILS0_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FWPP_IKEEXT_SA_DETAILS1_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FWPP_IPSEC_SA_CONTEXT0_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FWPP_IPSEC_SA_DETAILS0_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FWPP_PROVIDER_CONTEXT0_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FWPP_PROVIDER_CONTEXT1_ENUM_RESULT_MARSHAL_Decode(__int64 a1)
; FwppProxyAleEndpointCreateEnumHandle(__int64 a1)
; FwppProxyAleEndpointSetSecurityInfo(__int64 a1)
; FwppProxyBfeIPsecDospGetSecurityInfo(__int64 a1)
; FwppProxyBfeIPsecDospGetStatistics(__int64 a1)
; FwppProxyBfeIPsecDospSetSecurityInfo(__int64 a1)
; FwppProxyBfeIPsecDospStateCreateEnumHandle(__int64 a1)
; FwppProxyBfeIPsecDospStateDestroyEnumHandle(__int64 a1)
; FwppProxyBfeIPsecDospStateEnum(__int64 a1)
; FwppProxyBfeIPsecSaContextCreate(__int64 a1)
; FwppProxyBfeIPsecSaContextCreateEnumHandle(__int64 a1)
; FwppProxyBfeIPsecSaContextGetOrSetSpi(__int64 a1)
; FwppProxyBfeIPsecSaCreateEnumHandle(__int64 a1)
; FwppProxyBfeIPsecSaDbSetSecurityInfo(__int64 a1)
; FwppProxyCalloutCreateEnumHandle(__int64 a1)
; FwppProxyCalloutSetSecurityInfoByKey(__int64 a1)
; FwppProxyConnectionCreateEnumHandle(__int64 a1)
; FwppProxyEngineSetOption(__int64 a1)
; FwppProxyEngineSetSecurityInfo(__int64 a1)
; FwppProxyFilterCreateEnumHandle(__int64 a1)
; FwppProxyFilterSetSecurityInfoByKey(__int64 a1)
; FwppProxyLayerCreateEnumHandle(__int64 a1)
; FwppProxyLayerSetSecurityInfoByKey(__int64 a1)
; FwppProxyProviderContextCreateEnumHandle(__int64 a1)
; FwppProxyProviderContextSetSecurityInfoByKey(__int64 a1)
; FwppProxyProviderCreateEnumHandle(__int64 a1)
; FwppProxyProviderSetSecurityInfoByKey(__int64 a1)
; FwppProxySessionCreateEnumHandle(__int64 a1)
; FwppProxySubLayerCreateEnumHandle(__int64 a1)
; FwppProxySubLayerSetSecurityInfoByKey(__int64 a1)
; FwppProxyvSwitchEventsSetSecurityInfo(__int64 a1)
; IKEEXT_SA_DETAILS0_MARSHAL_Decode(__int64 a1)
; IKEEXT_SA_DETAILS1_MARSHAL_Decode(__int64 a1)
; IPSEC_SA_CONTEXT0_MARSHAL_Decode(__int64 a1)
; FwppAllocAndCopyCriteriaToRootConfig(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT1(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_CERTIFICATE_CREDENTIAL1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_EM_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_EM_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_DOSP_OPTIONS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_TRANSPORT_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_TUNNEL_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWPM_PROVIDER_CONTEXT1(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_BYTE_BLOB(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IKEEXT_EM_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IKEEXT_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_DOSP_OPTIONS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_TRANSPORT_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_TUNNEL_POLICY1(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_SID(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_WSTR(unsigned __int64 a1, __int64 a2)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IKEEXT_AUTHENTICATION_METHOD1(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL_PAIR0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL_PAIR1(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_UINT64(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IKEEXT_AUTHENTICATION_METHOD1(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_UINT64(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT1(__m128i **a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS1(__int64 *a1, unsigned int a2, __int64 a3)
; FwppConvertCertAuthFromVerIndependent(int a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, char a6)
; FwppConvertCertAuthToVerIndependent(int a1, __int64 a2, __int64 a3, int a4, __int64 a5, unsigned int a6, int a7)
; FwppConvertEmPolicyCertAuthFromVerIndependent(__int64 a1, unsigned int *a2, __int64 a3, __int64 a4, __int64 a5, char a6)
; FwppConvertEmPolicyCertAuthToVerIndependent(int a1, unsigned int *a2, unsigned int *a3, __int64 a4, __int64 a5, unsigned int a6)
; FwppConvertIkeeExtPolicyCertAuthFromVerIndependent(int a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, char a6)
; FwppConvertIkeeExtPolicyCertAuthToVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6)
; FwppConvertOutCriteriaToRootConfig(char a1, __int64 a2, int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; FwppConvertProvCtxtArrayCertAuthFromVerIndependent(int a1, unsigned int a2, __int64 *a3, __int64 *a4, __int64 a5)
; FwppConvertProvCtxtCertAuthFromVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4)
; FwppConvertProvCtxtCertAuthToVerIndependent(unsigned int a1, __int64 a2, __int64 a3, __int64 a4)
; FwppConvertTransportPolicyCertAuthFromVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, char a6)
; FwppConvertTransportPolicyCertAuthToVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FwppConvertTunnelPolicyCertAuthFromVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, char a6)
; FwppConvertTunnelPolicyCertAuthToVerIndependent(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FwppCopyCriteriaToRootConfig(__int64 a1, __int64 a2, __int64 a3)
; FwppCopyCriteriaToRootConfigArray(unsigned int a1, __int64 a2, __int64 a3)
; FwppCreateRootConfigFromCriteria(signed int a1, unsigned int a2, __int64 a3, __int64 a4, __int64 a5)
; FwppDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT1(__m128i *a1, __m128i *a2)
; FwppDeepCopyFromVerIndependent_FWP_V6_ADDR_AND_MASK(__m128i *a1, __m128i *a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_AUTHENTICATION_METHOD1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CERTIFICATE_CREDENTIAL1(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIALS1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL_PAIR1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_EM_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION1(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_AGGREGATE_SA_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_AH_DROP_PACKET_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_DOSP_OPTIONS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_ESP_DROP_PACKET_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TRAFFIC_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TRANSPORT_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TUNNEL_ENDPOINTS1(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TUNNEL_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWPM_PROVIDER_CONTEXT1(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_FWP_BYTE_BLOB(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyToVerIndependent_FWP_IPV4_ADDRESS(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_IPV6_ADDRESS(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_IKEEXT_AUTHENTICATION_METHOD1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_EM_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION1(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyToVerIndependent_IPSEC_DOSP_OPTIONS0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TRANSPORT_POLICY1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TUNNEL_ENDPOINTS1(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TUNNEL_POLICY1(__int64 a1, __int64 a2)
; FwpsRedirectHandleCreate0(__int64 a1, int a2, __int64 a3)
; WfpAleDecrementWaitRef(__int64 a1)
; FwppSetTaggedContextList(__int64 a1, __int64 a2)
; FwppvSwitchCreateClientSaveList(__int64 a1)
; FwppvSwitchCreateNotify(__int64 a1, __int64 a2)
; FwppvSwitchDeleteClientSaveList(__int64 a1)
; FwppvSwitchRuntimeStateSaveNotify(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, __int64 a7)
; FwppvSwitchRuntimeStateSaveNotifyComplete(__int64 a1, __int64 a2)
; WfpSetNblflag(__int64 a1)
; WfpMidlObjectCopy(void (__fastcall *a1)(_QWORD, _QWORD), __int64 a2, void (__fastcall *a3)(_QWORD, _QWORD), __int64 a4)
; WfpBufferCopy(unsigned __int64 a1, SIZE_T a2, __int64 a3, __int64 a4)
; WfpStringCopy(unsigned __int64 a1, __int64 a2, __int64 a3)
; WfpHashtableIteratorCreate(__int64 a1, __int64 a2)
; FwpmEngineOpen0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FwppSessionCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; FwppRpcBindingCreateLocal(__int64 a1, __int64 a2, __int64 a3)
; FwpmCalloutCreateEnumHandle0(__int64 a1)
; FwpmCalloutSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmConnectionCreateEnumHandle0(__int64 a1)
; FwpmEngineSetOption0(__int64 a1)
; FwpmEngineSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; FwpmFilterCreateEnumHandle0(__int64 a1)
; FwpmFilterSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmLayerCreateEnumHandle0(__int64 a1)
; FwpmLayerSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmProviderContextCreateEnumHandle0(__int64 a1)
; FwpmProviderContextSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmProviderCreateEnumHandle0(__int64 a1)
; FwpmProviderSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmSessionCreateEnumHandle0(__int64 a1)
; FwpmSubLayerCreateEnumHandle0(__int64 a1)
; FwpmSubLayerSetSecurityInfoByKey0(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, ACL *a6, __int64 a7)
; FwpmvSwitchEventsSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; FwpsAleEndpointCreateEnumHandle0(__int64 a1)
; FwpsAleEndpointSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; IPsecDospGetSecurityInfo0(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; IPsecDospGetStatistics0(__int64 a1, __int64 a2)
; IPsecDospSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; IPsecDospStateCreateEnumHandle0(__int64 a1)
; IPsecDospStateDestroyEnumHandle0(__int64 a1, __int64 a2)
; IPsecDospStateEnum0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IPsecSaContextCreate0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IPsecSaContextCreate1(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IPsecSaContextCreateEnumHandle0(__int64 a1)
; IPsecSaContextSetSpi0(__int64 a1, __int64 a2, __int64 a3, int a4)
; IPsecSaCreateEnumHandle0(__int64 a1)
; IPsecSaDbSetSecurityInfo0(__int64 a1, ACL *a2, __int64 a3, __int64 a4, ACL *a5, __int64 a6)
; FwppDoesMmUserAuthSaExist(__int64 a1, __int64 a2, __int64 a3)
; FwppDoesRecentAuthIpFailureExist(__int64 a1, __int64 a2, __int64 a3)
; FwppAllocAndDeepCopyFromVerIndependent_FWPM_CLASSIFY_OPTIONS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWPM_FILTER0(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT0(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWP_BYTE_ARRAY16(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWP_BYTE_ARRAY6(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_FWP_TOKEN_INFORMATION(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_GUID(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_CERTIFICATE_CREDENTIAL0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_NAME_CREDENTIAL0(unsigned __int64 *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_INT64(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_AUTH_AND_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_AUTH_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_ID0(unsigned __int64 *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_KEYING_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_KEYMODULE_STATE0(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_SA_AUTH_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_SA_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_SA_CONTEXT0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_SA_DETAILS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_TRANSPORT_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_TUNNEL_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_IPSEC_V4_UDP_ENCAPSULATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_UINT64(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyFromVerIndependent_double(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWPM_CLASSIFY_OPTIONS0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWPM_PROVIDER_CONTEXT0(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_BYTE_ARRAY16(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_BYTE_ARRAY6(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_RANGE0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_TOKEN_INFORMATION(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_V4_ADDR_AND_MASK(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_FWP_V6_ADDR_AND_MASK(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_GUID(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IKEEXT_EM_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IKEEXT_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_INT64(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_AUTH_AND_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_AUTH_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_GETSPI0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_ID0(unsigned __int64 *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_KEYING_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_KEYMODULE_STATE0(__m128i *a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_SA_AUTH_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_SA_BUNDLE0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_SA_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_TRAFFIC0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_TRANSPORT_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_TUNNEL_POLICY0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_IPSEC_V4_UDP_ENCAPSULATION0(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_UINT64(__int64 a1, __int64 a2)
; FwppAllocAndDeepCopyToVerIndependent_double(__int64 a1, __int64 a2)
; FwppArrayAllocAndDeepCopyFromVerIndependent_FWPM_CLASSIFY_OPTION0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_GUID(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IKEEXT_AUTHENTICATION_METHOD0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IKEEXT_PROPOSAL0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IPSEC_PROPOSAL0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IPSEC_SA0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IPSEC_SA_TRANSFORM0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_IPSEC_TOKEN0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyFromVerIndependent_SID_AND_ATTRIBUTES(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_FWPM_CLASSIFY_OPTION0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_FWPM_FILTER_CONDITION0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_GUID(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IKEEXT_AUTHENTICATION_METHOD0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IKEEXT_PROPOSAL0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IPSEC_PROPOSAL0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IPSEC_SA0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IPSEC_SA_TRANSFORM0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_IPSEC_TOKEN0(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayAllocAndDeepCopyToVerIndependent_SID_AND_ATTRIBUTES(__int64 a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT0(__m128i **a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS0(__int64 *a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_IPSEC_SA_CONTEXT0(__int64 *a1, unsigned int a2, __int64 a3)
; FwppArrayOfPtrsAllocAndDeepCopyFromVerIndependent_IPSEC_SA_DETAILS0(__int64 *a1, unsigned int a2, __int64 a3)
; FwppDeepCopyFromVerIndependent_FWPM_ACTION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_FWPM_CLASSIFY_OPTION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_FWPM_CLASSIFY_OPTIONS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_FWPM_DISPLAY_DATA0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_FWPM_FILTER0(__m128i *a1, __m128i *a2)
; FwppDeepCopyFromVerIndependent_FWPM_PROVIDER_CONTEXT0(__m128i *a1, __m128i *a2)
; FwppDeepCopyFromVerIndependent_FWP_TOKEN_INFORMATION(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_FWP_VALUE0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_AUTHENTICATION_METHOD0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CERTIFICATE_CREDENTIAL0(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyFromVerIndependent_IKEEXT_CIPHER_ALGORITHM0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_COMMON_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_COOKIE_PAIR0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIALS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_CREDENTIAL_PAIR0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_EM_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_IPV6_CGA_AUTHENTICATION0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_KEYMODULE_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_NAME_CREDENTIAL0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION0(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyFromVerIndependent_IKEEXT_PROPOSAL0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_SA_DETAILS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_STATISTICS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_TRAFFIC0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_AUTH_AND_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_AUTH_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_ID0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_KEYING_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_KEYMODULE_STATE0(__m128i *a1, __m128i *a2)
; FwppDeepCopyFromVerIndependent_IPSEC_PROPOSAL0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_AUTH_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_BUNDLE0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_CONTEXT0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_DETAILS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_IDLE_TIMEOUT0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_SA_LIFETIME0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TOKEN0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TRAFFIC0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TRANSPORT_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TUNNEL_ENDPOINTS0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_TUNNEL_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IPSEC_V4_UDP_ENCAPSULATION0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_SID_AND_ATTRIBUTES(__int64 *a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_UINT16(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_UINT64(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_UINT8(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWPM_CLASSIFY_OPTION0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWPM_CLASSIFY_OPTIONS0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWPM_DISPLAY_DATA0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWPM_FILTER_CONDITION0(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_FWPM_PROVIDER_CONTEXT0(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_FWP_CONDITION_VALUE0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_RANGE0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_TOKEN_INFORMATION(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_V4_ADDR_AND_MASK(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_V6_ADDR_AND_MASK(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_FWP_VALUE0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_FWP_BYTE_ARRAY16(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_IKEEXT_AUTHENTICATION_METHOD0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_CIPHER_ALGORITHM0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_EM_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_ERROR_FREQ_TABLE(unsigned __int64 a1, char *a2)
; FwppDeepCopyToVerIndependent_IKEEXT_IPV6_CGA_AUTHENTICATION0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyFromVerIndependent_IKEEXT_POLICY_FLAGS(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IKEEXT_PRESHARED_KEY_AUTHENTICATION0(__int64 a1, __int64 a2, __int64 a3)
; FwppDeepCopyToVerIndependent_IKEEXT_PROPOSAL0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_AUTH_AND_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_AUTH_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_CIPHER_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_GETSPI0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_ID0(unsigned __int64 *a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_KEYING_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_KEYMODULE_STATE0(__m128i *a1, __m128i *a2)
; FwppDeepCopyToVerIndependent_IPSEC_PROPOSAL0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_AUTH_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_BUNDLE0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_CIPHER_INFORMATION0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_IDLE_TIMEOUT0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_LIFETIME0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_SA_TRANSFORM0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TOKEN0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TRAFFIC0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TRANSPORT_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TUNNEL_ENDPOINTS0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_TUNNEL_POLICY0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_IPSEC_V4_UDP_ENCAPSULATION0(__int64 a1, __int64 a2)
; FwppDeepCopyToVerIndependent_SID_AND_ATTRIBUTES(__int64 *a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\fxppm.c ;
; InstantaneousFrequencyRead(__int64 a1, __int64 a2)
; DifferentialFrequencyRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; InstantaneousPerfRead(__int64 a1, __int64 a2)
; DifferentialPerfRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FxPpmRegisterSpmSettings(ULONG_PTR a1)
; RegisterPerfDomain(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\GAGP30KX.c ;
; AgpSetAperture(__int64 a1, __int64 a2, __int64 a3)
; Gagp30KxSetRate(__int64 a1, unsigned int a2, __int64 a3)
; KxSetGartBase(signed __int64 a1)
; KxSetApertureSize(int a1)
; KxSetApertureEnable(char a1, char a2, char a3)
; ApGetSetDeviceBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; AgpLibReadAgpTargetConfig(__int64 a1, __int64 a2, unsigned int a3)
; AgpLibSetAgpCapability(__int64 a1, __int64 a2, __int64 a3)
; ApSetExtendedAgpCapability(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ApSetTargetCapability(__int64 a1, __int64 a2)
; ApLegacySetBusData(__int64 a1, __int64 a2, __int64 a3)
; AgpVerifierSetTargetCapability(__int64 a1, __int64 a2)
; AgpSetEventCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; Gagp30KxCreateGart(__int64 a1)
; AgpInterfaceSetRate(__int64 a1, int a2, __int64 a3)
; AgpOpenKey(PCWSTR SourceString, void *a2, HANDLE *a3, __int64 a4)
; AgpSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hcmon.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hdaudbus.c ;
; HdaBusInterface::ConvertHandleToLong(HdaBusInterface *this, void *a2, __int32 *a3)
; HdaController::SetDmaEngineState(HdaController *this, int a2, char a3)
; HdaBusInterface::SetDmaEngineState(__int64 a1, int a2, unsigned int a3, __int64 a4)
; HdaController::SetDmaEngineState(__int64 a1, int a2, unsigned int a3, int *a4)
; HdaController::SetRirbDmaState(HdaController *this, char a2, __int64 a3)
; HdaController::PowerDown(HdaController *this, __int64 a2, __int64 a3)
; HdaController::SetCorbDmaState(HdaController *this, char a2, __int64 a3)
; HdaController::SetupDmaEngineWithBdl(HdaController *this, unsigned int a2, unsigned int a3, __int64 a4, void (__stdcall *a5)(void *, unsigned __int32), void *a6, unsigned __int8 *a7, unsigned __int32 *a8)
; HdaBusInterfaceBdl::SetupDmaEngineWithBdl(void *a1, void *a2, unsigned int a3, unsigned int a4, void (__stdcall static *a5)(void *, unsigned __int32), void *a6, unsigned __int8 *a7, unsigned __int32 *a8)
; HdaController::BuildHDAudioConverterFormat(HdaController *this, struct _HDAUDIO_STREAM_FORMAT *a2, struct _HDAUDIO_CONVERTER_FORMAT *a3, __int64 a4)
; HdAudBusPowerDown(__int64 a1, int a2)
; HdAudBusChildPowerDown(__int64 a1, signed int a2, __int64 a3)
; SetNonSnoop(struct WDFDEVICE__ *a1)
; HdAudBusCreateChildDevice(struct WDFCHILDLIST__ *a1, struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *a2, struct WDFDEVICE_INIT *a3)
; ReadPciDeviceId(struct WDFDEVICE__ *a1, unsigned __int64 *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\HECIx64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidbatt.c ;
; HidBattOpen(__int64 a1, __int64 a2)
; CUString::Append(PCUNICODE_STRING SourceString, PCUNICODE_STRING Source)
; HidBattSetStatusNotify(__int64 a1, int a2, __int64 a3)
; CHidDevice::OpenHidDevice(CHidDevice *this, PDEVICE_OBJECT DeviceObject)
; ReadCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; ReadThread(PVOID StartContext)
; CUsage::SetValue(CUsage *this, ULONG a2)
; DoIoctl(PDEVICE_OBJECT DeviceObject, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID a5, ULONG a6, struct CHidDevice *a7)
; SetupHidData(PHIDP_PREPARSED_DATA PreparsedData, struct _HIDP_CAPS *a2, struct _HIDP_LINK_COLLECTION_NODE *a3)
; CBattery::GetSetValue(__int64 a1, int a2, ULONG *a3, char a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidbth.c ;
; HidBthSetDeviceState(__int64 a1, int a2)
; HidBthSetConnectionState(__int64 a1, int a2)
; HidBthSetupRegKeys(__int64 a1)
; HidBthSetRegParams(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HidBthSaveBthAddr(__int64 a1)
; HidBthDecrementPendingRequestCount(__int64 a1, __int64 a2)
; HidBthReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidBthReadReport(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetReportFlowCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetReportCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetReport(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetIdleFlowCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetIdleCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidBthSetIdle(__int64 a1, __int64 a2)
; HidBthReadControlPacket(PDEVICE_OBJECT DeviceObject, __int64 a2)
; HidBthGetQosSetting(__int64 a1)
; HidBthReadStoredSettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidclass.c ;
; DequeueInterruptReadIrp(__int64 a1, __int64 a2)
; HidpFdoUpdateOpenHandleCount(__int64 a1, char a2)
; HidpInterruptReadComplete(__int64 a1, __int64 a2, __int64 a3)
; HidpCopyInputReportToUser(__int64 a1, int *a2, __int64 a3, __int64 a4, void *Dst)
; HidpSubmitInterruptRead(__int64 a1, __int64 a2, __int64 a3)
; HidpIrpMajorRead(__int64 a1, __int64 a2)
; EnqueueInterruptReadIrp(__int64 a1, __int64 a2, __int64 a3)
; HidpIrpMajorCreate(__int64 a1, __int64 a2)
; HIDSM_FindAndSetTargetState(__int64 a1, __int64 a2)
; HidpFdoPowerDownPoCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context)
; HidpFdoSetIoStateToPass(__int64 a1)
; HIDSM_SettingIoStateToPass(__int64 a1)
; HidpGetSetReport(__int64 a1, ULONG_PTR a2, int a3, __int64 a4)
; HIDSM_SettingIoStateToQueueOnSx(__int64 a1)
; HidpCancelReadIrp(__int64 a1, __int64 a2)
; HIDSM_CompletingIdleCallbackDuringTransientPowerDown(__int64 a1)
; HIDSM_SettingIoStateToQueueAndFlushSentIoOnStop(__int64 a1)
; HidpFdoSetIoStateToQueueAndFlushSentIo(__int64 a1)
; HidpSetMaxReportSize(__int64 a1)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; HIDSM_SettingIoStateToPassOnStart(__int64 a1)
; HidpSetRegistryValue(PDEVICE_OBJECT DeviceObject, const WCHAR *a2, __int64 a3, void *a4)
; CompleteAllPendingReadsForCollection(__int64 a1)
; AynchronousReadCompletionWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HidpPolledReadComplete(__int64 a1, __int64 a2, __int64 a3)
; HidpPolledReadComplete_TimerDriven(__int64 a1, __int64 a2, __int64 a3)
; ReadPolledDevice(__int64 a1, char a2)
; PolledReadCancelRoutine(__int64 a1, __int64 a2)
; EnqueuePolledReadIrp(__int64 a1, __int64 a2)
; DequeuePolledReadSessionIrp(__int64 a1)
; DequeuePolledReadSystemIrp(__int64 a1)
; DequeuePolledReadIrp(__int64 a1)
; HidpFdoSetIoStateToFailAndFlushSentIo(__int64 a1)
; HIDSM_SettingIoStateToFailAndFlushSentIo(__int64 a1)
; HidpSetProperties(__int64 a1)
; HidpFdoConfigureIdleSettings(__int64 a1)
; HidpCreateClientPDOs(__int64 a1)
; HidpCreateRemoteWakeIrpWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HidpCreateRemoteWakeIrp(PVOID Context)
; HidpSetWmiDataItem(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, unsigned int a6, char *a7)
; HidpSetWmiDataBlock(__int64 a1, __int64 a2, __int64 a3, int a4, unsigned int a5, char *a6)
; SetPnpFailureDescription(SIZE_T a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidi2c.c ;
; SpbWritelessRead(struct WDFIOTARGET__ *a1, struct WDFREQUEST__ *a2, unsigned __int8 *a3, unsigned int a4)
; SpbRead(struct WDFIOTARGET__ *a1, __int64 a2, unsigned __int8 *a3, unsigned __int32 a4)
; SpbWriteRead(struct WDFIOTARGET__ *a1, __int64 a2, unsigned __int8 *a3, unsigned __int16 a4)
; HidSetReport(__int64 a1, __int64 a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidir.c ;
; HidIrReadBaseReportMappingTables(__int64 a1, unsigned __int16 a2, void *a3)
; HidIrReadAdditionalReportMappings(__int64 a1, unsigned __int16 a2, void *a3)
; HidIrSortDecodersByPriority(__int64 a1)
; HidIrDecrementPendingRequestCount(__int64 a1)
; HidIrFindDecoder(__int64 a1, __int64 a2)
; HidIrReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; HidIrReadReport(__int64 a1, __int64 a2, __int64 a3)
; SetDeviceWakePattern(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5)
; HidIrReadDecoderCfg(HANDLE KeyHandle, __int64 a2, unsigned __int16 a3)
; HidIrReadAllDecoderCfg(HANDLE KeyHandle, __int64 a2)
; HidIrReadRegULong(HANDLE KeyHandle, const WCHAR *a2, __int64 a3)
; HidIrReadRegULongOrULongLong(HANDLE KeyHandle, const WCHAR *a2, __int64 a3)
; HidIrReadDefaultWakeKeysFromRegistry(PCUNICODE_STRING SourceString)
; HidIrReadWakePatternConfigurationFromRegistry(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidparse.c ;
; HidP_SetUsages(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, PUSAGE UsageList, PULONG UsageLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength)
; HidP_SetUnsetOneUsage(__int64 a1, __int16 a2, __int16 a3, unsigned __int16 a4, __int64 a5, __int64 a6, unsigned int a7, char a8)
; HidP_SetUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, ULONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength)
; HidP_SetUsageValueArray(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PCHAR UsageValue, USHORT UsageValueByteLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength)
; HidP_SetScaledUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, LONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength)
; HidP_SetOneData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)
; HidP_SetData(HIDP_REPORT_TYPE ReportType, PHIDP_DATA DataList, PULONG DataLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hidusb.c ;
; HumGetSetReportCompletion(__int64 a1, __int64 a2, __int64 a3)
; HumDecrementPendingRequestCount@<eax>(char a1@<sf>, __int64 a2@<rcx>)
; HumReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; HumSetIdle(PDEVICE_OBJECT DeviceObject)
; HumCreateClose(__int64 a1, __int64 a2)
; HumSetIdleWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HumGetSetReport(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\HpSAMD.c ;
; SetSecurity(__int64 a1, __int64 a2)
; CissReadWriteRegistry(__int64 a1, __int64 a2, unsigned int a3, void *a4, size_t *a5, const void *Src)
; CissSetInterruptMode(__int64 a1)
; SetTransportMethod(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\http.c ;
; UlSetSendIrpCancelRoutine(__int64 a1, __int64 _RDX)
; UlSetPreSendState(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5)
; UlHttpIoReadyEvent(__int64 a1)
; UlSetBundleTimerEx(__int64 a1, __int64 a2, __int64 a3, char a4)
; UlProbeForRead(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RtlStringCchCatNExW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, size_t cchMaxAppend, wchar_t **ppszDestEnd, size_t *pcchRemaining, unsigned __int32 dwFlags)
; RtlStringCchCopyExW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, wchar_t **ppszDestEnd, size_t *pcchRemaining, unsigned __int32 dwFlags)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; UxTlCreateEndpointRequest(__int64 a1, __int64 a2, int a3, __int64 a4)
; UxpTlCreateAddressEndpoint(__int64 a1, __int64 a2, int a3, __int64 a4)
; UxpTlCreateListenEndpoint(__int64 a1, __int64 a2, int a3, __int64 a4)
; UlScCopyGlobalCounters(void *a1)
; UlSetSendCompleteState(__int64 a1, char a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, unsigned __int64 a8, __int64 a9)
; UlLargeMemSetData(__int64 a1, const void *a2, unsigned int a3, unsigned int a4)
; UxpTpRestartMdlRead(__int64 a1, __int64 a2, __int64 a3)
; UxpRestartReadFileEntry(__int64 a1, __int64 a2, __int64 a3)
; UlSetLogTimer(PKTIMER Timer)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; UlSetPostSendState(__int64 a1, __int64 a2, __int64 a3)
; UlSetZeroLengthSendState(__int64 a1, char a2, char a3, __int64 a4, __int64 a5, __int64 a6)
; UxpWskCreateIoContext(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; UlCreateAutoConfigGroup(__int64 a1, volatile signed __int32 *a2)
; StringCchCopyW(__int64 a1, __int64 a2, __int64 a3)
; UlpCreateHeaderMask(unsigned int a1, unsigned int a2)
; deflateSetDictionary(__int64 a1, __int64 a2, unsigned int a3)
; PplCreateLookasideList(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, ULONG a6)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, int a5, ULONG Tag, int a7, __int64 Taga, __int64 a9, char a10)
; UlpSetRequestQueueLengthLimit(__int64 a1, __int64 a2, __int64 a3)
; UlpCreateLoggingConfig(__int64 a1, __int64 a2, __int64 a3)
; UlSetBufferTimer(PKTIMER Timer)
; UlCreateLogFile(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; UlpCreateDirectory(__int64 a1, __int64 a2, char a3, __int64 a4, char a5, char a6, __int64 a7, __int64 a8)
; UlpRestartCacheMdlRead(__int64 a1, __int64 a2, __int64 a3)
; UlCopyRequestQueueCounters(__int64 a1, __int64 a2)
; UxDuoIoReadyEvent(__int64 a1)
; UxDuoSetConnectionError(__int64 a1, signed __int32 a2, int a3)
; UxDuoSettingsHandler(__int64 a1, __int64 a2, unsigned int a3)
; UxDuoAppendDataFrameMdlToChain(__int64 a1, __int64 a2, __int64 a3)
; UxDuoCreateDataFrames(__int64 a1, __int64 a2, __int64 a3)
; UxDuoCreateNavaBlock(__int64 a1, __int64 a2)
; UxDuoCreateSendFrames(__int64 a1, __int64 a2, __int64 a3)
; UxDuoCreateSynReply(__int64 a1, __int64 a2)
; UxDuoCreateTerminatorFrame(__int64 a1, __int64 a2)
; UxDuoDecompressNavaBlock(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; UxDuoSetStreamError(__int64 a1, signed __int32 a2, int a3)
; UlCopyHttpVersion(__int64 a1, int a2, int a3, char a4)
; UlCopyTimeStamp(__int64 a1, unsigned int a2, __int64 a3, char a4)
; UlSetResponseDisconnectFlags(__int64 a1, __int64 a2, __int64 a3)
; UxpRestartReadCompleteFileEntry(__int64 a1, __int64 a2, __int64 a3)
; UlCreateRequestBuffer(unsigned int a1, __int64 a2, char a3)
; UlSetErrorCode(__int64 a1, __int64 a2, __int64 a3)
; UlSetErrorCodeEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UlCopyLoggingProperty(__int64 a1, __int64 a2, void **a3, void **a4, int a5, __int64 a6, __int64 a7)
; UlpConvertTimeLimits(char a1, TIME_FIELDS *a2, TIME_FIELDS *a3, LARGE_INTEGER *a4, LARGE_INTEGER *Time)
; UlpCreateLogFile(__int64 a1)
; UxCopyMdlChainToBuffer(PMDL MemoryDescriptorList, ULONG a2, __int64 a3, int a4)
; UxCreateSingleRunMdl(PMDL SourceMdl, unsigned int a2, ULONG a3, unsigned int a4, ULONG a5)
; UlpCopyUrl(void *Dst, int a2, __int64 a3, __int64 a4, void *Dsta, __int64 a6)
; UxpTpSetFlowOnConnection(__int64 a1)
; UlAuthCopyKnownAuthHeaderToBuffer(int a1, __int16 a2, const void *a3, unsigned int a4, void *Dst, __int64 a6, __int64 a7, void *Src, unsigned __int16 a9, __int64 a10)
; UlAuthCopyUnconfiguredAuthHeaderToBuffer(__int16 a1, const void *a2, unsigned __int16 a3, const void *a4, unsigned int a5, void *Dst, __int64 a7)
; UlCopyAuthConfigProperty(__int64 a1, __int64 a2, __int64 a3, void **a4, int a5, __int64 a6, __int64 a7)
; UlCopyAuthConfigToIrp(__int64 a1, __int64 a2, __int64 a3)
; UlpCopyBasicParam(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int64 a5)
; UlHkeCompleteExtensionRead(__int64 *a1, unsigned int a2, __int64 a3)
; UlHkeCreateCalloutContext(int a1, __int64 a2, __int64 a3)
; UlHkeExtensionRead(__int64 *a1)
; RtlStringCbCopyNExA(char *pszDest, size_t cbDest, const char *pszSrc, size_t cbSrc, char **ppszDestEnd, size_t *pcbRemaining, unsigned __int32 dwFlags)
; RtlStringCbCopyNExW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbSrc, wchar_t **ppszDestEnd, size_t *pcbRemaining, unsigned __int32 dwFlags)
; RtlStringCopyWorkerW_0(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; UlpCopyEtwFieldA(char *psz, unsigned __int16 a2, const char *a3, size_t pcch, __int64 a5, __int64 a6, size_t pccha, __int64 a8)
; UlpCopyEtwFieldW(wchar_t *psz, unsigned __int16 a2, const wchar_t *a3, size_t pcch, __int64 a5, __int64 a6, size_t pccha, __int64 a8)
; UlpCopyField(__int64 a1, int a2, __int64 a3, __int64 a4, unsigned int a5, char a6, char a7, int a8)
; UlpCopyUnicodeField(signed __int64 a1, unsigned int a2, __int64 a3, unsigned int a4, char a5, char a6, char a7, int a8)
; UlCopyContentType(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; UlCopyHttpVerb(void *Dst, unsigned int a2, __int64 a3)
; RtlUnicodeStringCbCopyStringN(__int64 a1, __int64 a2, unsigned __int64 a3)
; RtlUnicodeStringCopyString(__int64 a1, __int64 a2)
; RtlWideCharArrayCopyStringWorker(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; inflateSetDictionary(__int64 a1)
; UlpOpenCoupling(__int64 a1, __int64 a2, __int64 a3)
; UlpCopyRequestToBuffer(void *Dst, PIRP Irp, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, char a8, __int64 a9)
; UlpCopyRequestInformation(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, char a7, __int64 a8)
; UlCopyRequestToIrp(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UlpSetUrlInfo(__int64 a1, __int64 a2, __int64 a3)
; UxpSslLoadEndpointCertificate(__int64 a1, __int64 a2, char a3)
; UxpSslCreateChildConfig(__int64 a1, __int64 a2)
; HttppCleanAndCopyUrlByType(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; UlCreateConsumer(int a1, __int64 a2, char a3, __int64 a4, ACCESS_MASK a5, __int64 a6, __int64 a7, void *a8, __int64 a9)
; UlpCreateRequestQueue(int a1, __int64 a2, __int64 a3, __int64 a4, int a5, void *a6, __int64 a7)
; UlCreate(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3)
; UlCreateCommChannel(int a1, __int64 a2)
; UlpCreateConfigGroup(__int64 a1, __int64 a2)
; UxpWskOpenListenSocket(__int64 a1, __int64 a2, __int64 a3)
; UlSetConfigGroupProperty(PIRP Irp, __int64 a2, unsigned __int64 a3, signed int a4, __int64 a5, int a6)
; UlSetUrlGroupIoctl(PIRP Irp, __int64 a2)
; UlCreateServerSessionIoctl(__int64 a1, __int64 a2)
; UlCreateServerSession(__int64 a1, int a2, __int64 a3)
; UlCreateUrlGroupIoctl(__int64 a1, __int64 a2)
; UlCreateConfigGroup(__int64 a1, unsigned __int64 a2, __int64 a3)
; UlpTreeCreateSite(__int64 a1, __int64 a2, __int64 a3)
; UxpSslFindEndpointAndLoadCert(__int64 a1, __int64 a2)
; UlCreateAuthCache(__int64 a1, int a2, __int64 a3)
; UlpOpenCryptoAlgorithm(__int64 a1, __int64 a2, __int64 a3)
; UlCopyUrlGroupCounters(__int64 a1, void *a2)
; UlCopyRequestToBuffer(void *a1, __int64 a2, int a3, __int64 a4, int a5, __int64 a6)
; UlExtractAndAppendAuthenticationResponseInfo(__int64 a1, __int64 a2, struct _IRP *a3, char a4, char a5, __int64 a6)
; UxCreateFileCacheEntry(HANDLE Handle, void *Dst)
; UxReadCompleteFileEntryFast(__int64 a1, __int64 a2)
; UlCreateCacheEntryFromResponse(__int64 a1, unsigned int a2, __int64 a3, char a4, volatile signed __int32 *a5, __int64 a6)
; UlCopyLogDataToCache(__int64 a1, __int64 a2, void *a3, unsigned __int16 a4, __int64 a5)
; UxpTpMdlReadProbeCompleteWorker(__int64 a1)
; UxReadFileEntry(__int64 a1, __int64 a2)
; UlCopyAuthConfig(__int64 a1, __int64 a2, char a3, unsigned __int8 a4)
; UxCopyMdlChainToMdlChain(PMDL MemoryDescriptorList, unsigned int a2, unsigned int a3, __int64 a4)
; UxSslCreateConfiguration(int a1, __int64 a2)
; UxpSslCopyIpConfigurationToUser(__int64 a1, struct _IRP *a2, __int64 a3)
; UxpSslCopyVariableConfigurationPropertiesToUser(PIRP Irp, __int64 a2, __int64 a3, __int64 a4)
; UlCreateAutoServerSession(void *a1, KPROCESSOR_MODE a2, __int64 a3)
; UlCreateSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, __int64 a2, unsigned int a3, char a4)
; UlCGCreateHashTable(unsigned int a1, __int64 a2, __int64 a3)
; UlOpenNamedEvent(PCWSTR SourceString, __int64 a2)
; UxpSslCreateCcsConfiguration(__int64 a1)
; UxpSslReadConfigurationPropertiesFromRegistry(__int64 a1, void *a2, __int64 a3, void *a4)
; UxReadRegistryKeyValue(HANDLE KeyHandle, void *Src, size_t Size, void *Dst, __int64 Srca, ULONG Sizea, void *Dsta, ULONG a8)
; UlReadBooleanParameter(void *a1, __int64 a2, unsigned __int8 a3, __int64 a4)
; UlReadLongParameter(HANDLE KeyHandle, __int64 a2, int a3)
; UxOpenSubKeyByIndex(PCWSTR SourceString, ULONG Index, __int64 a3, __int64 a4)
; UlReadStringParameter(void *a1, __int64 a2, __int64 a3, __int64 a4)
; UlReadGenericParameter(HANDLE KeyHandle, __int64 a2, __int64 a3)
; UxSslSetEndpointConfig(__int64 a1, char a2)
; UlOpenRegistry(UNICODE_STRING *a1, HANDLE *a2, __int64 a3)
; UlpSetRequestQueueState(__int64 a1, int a2, __int64 a3)
; UlSetConnectionsProperty(__int64 a1, __int64 a2)
; UlSetServerSessionIoctl(PIRP Irp, __int64 a2)
; UlSetServerSessionProperty(PIRP Irp, __int64 a2, unsigned __int64 a3, int a4, __int64 a5, int a6)
; UlSetRequestQueueIoctl(PIRP Irp, __int64 a2)
; UlSetRequestQueueProperty(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, unsigned int a5)
; UlpSetRequestQueue503Verbosity(__int64 a1, int a2, __int64 a3)
; UlSetSecurityDispatch(__int64 a1, __int64 a2)
; UlSetRequestQueueSecurityDescriptor(__int64 a1, __int64 a2, __int64 a3)
; UlSetSecurity(PSECURITY_DESCRIPTOR *a1, __int64 a2, __int64 a3)
; UlSetTimestampRange(int a1, int a2, char a3, LARGE_INTEGER *a4, LARGE_INTEGER *a5)
; UlCreateSafeDirectory(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5)
; UlpCreateErrorLogFile(__int64 a1)
; UlpCacheMdlReadCompleteWorker(__int64 a1)
; UlBuildTrackerSetData(__int64 a1, const void *a2, unsigned int a3)
; UlCopyAllRequestQueuesInfo(__int64 *a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5)
; UlpCopyRequestQueueInfo(__int64 a1, __int64 *a2, unsigned int a3, __int64 *a4, __int64 a5, __int64 a6, __int64 a7)
; UlpCopyRequestQueueProcessesInfo(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; UlpOpenRequestQueue(int a1, __int64 a2, __int64 a3, ACCESS_MASK a4, __int64 a5, unsigned int a6, __int64 a7)
; HttpCleanAndCopyHost(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, unsigned int *a6, __int64 a7, __int64 a8, __int64 a9)
; HttpCleanAndCopyUrl(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int *a6, __int64 a7, __int64 a8, __int64 a9)
; HttpCopyHost(int a1, unsigned __int64 a2, unsigned int a3, __int64 a4, unsigned int a5, __int64 a6)
; HttppCopyHostAce(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned __int16 *a5, unsigned int a6, __int64 a7, __int64 a8)
; HttppCopyHostByType@<eax>(int a1@<edx>, int a2@<ecx>, __int64 a3@<rbx>, __int64 a4@<r8>, unsigned int a5@<r9d>)
; UlCopyAllCacheEntryInfo(__int64 a1, int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, int a7, __int64 a8, __int64 a9)
; UlReadFragmentFromCache(__int64 a1, unsigned __int64 a2, unsigned int a3, void *a4, unsigned int a5, struct _IRP *Irp, char a7, __int64 a8)
; UlpCopyCacheEntryInfo(__int64 a1, __int64 a2)
; UlpCreateFragmentCacheEntry(volatile signed __int32 *a1, __int64 a2, int a3, unsigned int a4, __int64 a5, __int64 a6)
; UlpSetResponseCacheClassification(__int64 a1, __int64 a2, int a3)
; UlCopyAllConfigGroupsInfo(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; UlpCopyAllRegisteredUrls(__int64 a1, __int64 a2, __int64 a3, void **a4, int a5, __int64 a6, __int64 a7)
; UlpCopyConfigGroupInfo(__int64 a1, __int64 *a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; UlpCopyConfigGroupProperty(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; UlpCopyRegisteredUrl(__int64 a1, unsigned int a2, void **a3, __int64 a4)
; UlCopyAllServerSessionsInfo(__int64 *a1, void **a2, __int64 a3, __int64 a4, __int64 a5)
; UlpCopyServerSessionInfo(__int64 a1, __int64 a2, unsigned int a3, void **a4, __int64 a5, __int64 a6, void *a7)
; UlpCopyServerSessionProperty(__int64 a1, __int64 a2, void **a3, void **a4, __int64 a5, __int64 a6, __int64 a7)
; UlReadFragmentFromCacheFastIo(__int64 a1, unsigned __int64 a2, unsigned int a3, void *a4, unsigned int a5, __int64 a6, char a7)
; UxReadCompleteFileEntry(__int64 a1, __int64 a2)
; UxReadFileEntryFast(__int64 a1)
; UlFlCopyFlowRateParamsToCache(__int64 a1, __int64 a2)
; UlpFlSetFlowSpec(__int64 a1, unsigned int a2, unsigned int a3, unsigned int a4)
; UlSetReceiveEntityBodyIrpCancelRoutine(__int64 a1, __int64 _RDX)
; UlReadFragmentFromCacheIoctl(__int64 a1, __int64 a2)
; UlSetServiceConfigIoctl(PIRP Irp, __int64 a2)
; UlpCopyConfigCertInfo(__int64 a1, __int64 a2)
; UlpCopyFragmentInfo(__int64 a1, __int64 a2)
; UlpCopySslSniSet32(__int64 a1, __int64 a2)
; UlEventLogCreateFailure(int a1, int a2, __int64 a3, unsigned int a4)
; UlpReadAndCopyCacheEntries(__int64 a1, void *a2, unsigned int a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; UlpReadAndCopyServiceState(__int64 a1, void *a2, unsigned int a3, __int64 a4, __int64 a5)
; UxCopyFlatBufferToMdlChain(PMDL MemoryDescriptorList, unsigned __int64 a2, unsigned int a3, const void *a4, __int64 a5)
; UlSetRegistryValue(HANDLE KeyHandle, __int64 a2, ULONG a3, void *a4, ULONG a5)
; UlFastCreateRangeCacheTracker(__int64 a1, __int64 a2, unsigned int a3, char a4)
; UlSetCacheParameters(__int64 a1)
; UlpConvertResponse200To206(__int64 a1, __int64 a2, unsigned int *a3)
; UlpCreateCacheRangeSliceTracker(unsigned int a1, unsigned int a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, char a8)
; UlpRawCopyCacheNotification(int *a1, __int64 a2, unsigned int a3)
; UlpRawCopyForLogCacheHit(__int64 a1, signed __int64 a2, unsigned int a3)
; UlpRawCopyForLogCacheMiss(__int64 a1, __int64 a2, unsigned int a3)
; UlpRawCopyLogHeader(__int64 a1)
; UlpCopyEntityBodyToBuffer(__int64 a1, __int64 a2, int a3, __int64 a4)
; UlProbeAndCopyIpPortAddressToStringW(PIRP Irp, __int64 a2, unsigned __int64 a3, __int64 a4, PIRP Irpa)
; UlSetIpListenList(__int64 a1, struct _IRP *a2, __int64 a3, __int64 a4)
; UlpCopyIpListenList(__int64 a1, unsigned int a2, __int64 a3)
; UlpCopyTokenIntegrityLevel(__int64 a1, __int64 a2)
; UlpSqmNormalizeCounterSets(__int64 a1, __int64 a2)
; UxSslOpenConfigRegistryKey(__int64 a1, int a2, __int64 a3)
; UxpSslLoadEndpointCertificateWorker(__int64 a1)
; UxSslReadConfigurationPropertiesFromUser(__int64 a1, struct _IRP *a2, __int64 a3)
; UxpSslCopyCcsConfigurationToUser(__int64 a1, struct _IRP *a2, __int64 a3)
; UxpSslCopyHostConfigurationToUser(__int64 a1, struct _IRP *a2, __int64 a3)
; UlpCopyChannelBindTokenToIrp(__int64 a1, __int64 a2)
; UxpSslCopyClientCertToIrp(PIRP Irp, __int64 a2)
; UxpSslSetIrpCancelRoutine(__int64 a1, __int64 a2)
; UlSetTimerConfiguration(__int64 a1)
; UxpTpCopyMdlChainToExtension(__int64 a1, int a2, unsigned int a3, unsigned int *a4, __int64 a5, __int64 a6, int (__fastcall *a7)(__int64, __int64 *, signed __int64, unsigned __int64 *), __int64 a8, __int64 a9, __int64 a10)
; UxpTpCopyPacketToExtension(__int64 a1)
; UxpTpRestartMdlReadExtension(__int64 a1, int a2, __int64 a3)
; UlCopyAuthHeader(__int64 a1, void *a2, unsigned int a3, __int64 a4)
; UlCopyChannelBindConfig(__int64 a1, __int64 a2)
; UlCopyChannelBindConfigToIrp(__int64 a1, __int64 a2, __int64 a3)
; UlCopyUserAuthInfo(void *Dst, unsigned int a2, __int64 a3, __int64 a4, __int64 Dsta, __int64 a6, char a7, __int64 *a8, __int64 a9)
; UlCopyUserChannelBindInfo(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; UlpCreateBasicTokenCacheKey(__int64 a1, __int64 a2)
; UlpCreateTargetServiceName(void *Src)
; UlHkeBuilderCopyFixedHeaders(__int64 a1, unsigned int a2, void *a3, __int64 a4)
; UlHkeBuilderCopyVariableHeaders(__int64 a1, unsigned int a2, void *a3, __int64 a4)
; UlpHkeCopyKnownHeader(__int64 a1, int a2, unsigned int a3, void *a4, __int64 a5)
; UlAppendHeaderValue(__int64 a1, __int64 a2, void *a3, unsigned __int16 a4)
; UlPcwBaseAddGlobalCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UlPcwBaseAddRequestQueueCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UlPcwBaseAddUrlGroupCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UlpCleanupCounterSet(int a1)
; UlpPcwCreateInstance(int a1, __int64 a2, __int64 a3)
; UxTlQosSetFlowOnConnection(__int64 a1, __int64 a2)
; UxSslIoReadyEvent(__int64 a1)
; UxpSslCopyDataIndicationToBuffer(__int64 a1, __int64 a2)
; UxpSslRestartReadData(PSLIST_ENTRY ListEntry, signed __int32 a2, __int64 a3)
; UxpSslFreeReadMdl(char a1, void *a2)
; UlpReadErrorLogConfig(HANDLE KeyHandle)
; UlpReadUrlC14nConfig(HANDLE KeyHandle)
; UlpReadRegistry(void *a1)
; UlpCreateWriteRestrictedSid(__int64 a1)
; UlpCreatePpl(int a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; UxpSslLoadConfigurations(int a1)
; UlpSetDeviceObjectSecurity(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hwpolicy.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\hyperkbd.c ;
; HkEvtFileCreate(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\HyperVideo.c ;
; SynthVidpReadCompleted(__int64 a1, __int64 a2, __int64 a3)
; DlpLoadDxgkrnl(PFILE_OBJECT *FileObject, PDEVICE_OBJECT *DeviceObject)
; HvdDdiSetPointerPosition(__int64 a1, __int64 a2)
; HvdDdiSetPointerShape(__int64 a1, __int64 a2)
; HvdReadHyperVideoConfigurationSettings(UNICODE_STRING *a1)
; SynthVidpIssueRead(PDEVICE_OBJECT DeviceObject, PVOID Context)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\i8042prt.c ;
; I8xSetPowerFlag(int a1, char a2)
; I8xSetDataQueuePointer(PVOID SynchronizeContext, __int64 a2)
; I8xReadPortUchar(unsigned __int16 a1)
; I8xReadRegisterUchar(__int64 a1)
; I8xDecrementTimer(PVOID SynchronizeContext)
; I8xConvertTypematicParameters(unsigned __int16 a1, __int64 a2)
; I8xKeyboardSynchReadPort(__int64 a1, __int64 a2)
; I8xCreate(__int64 a1, __int64 a2)
; I8xSetWmiDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iaLPSSi_GPIO.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iaLPSSi_I2C.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iaStorA.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iaStorAV.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iaStorV.c ;
; DoesRegistryKeyExist(__int64 a1, __int64 a2, const WCHAR *a3)
; PCI_ReadCfgDword(__int64 a1, unsigned __int16 a2, char a3, char a4, unsigned __int16 a5, __int64 a6)
; PCI_ReadCfgByte(__int64 a1, unsigned __int16 a2, char a3, char a4, unsigned __int16 a5, __int64 a6)
; PCI_ReadCfgWord(__int64 a1, unsigned __int16 a2, char a3, char a4, unsigned __int16 a5, __int64 a6)
; IaSetDiskDevicePowerState(__int64 a1, POWER_STATE a2)
; IaSetDiskCachingState(__int64 a1, __int64 a2, int a3, int a4)
; IaSetReadyDriveAttributes(__int64 a1, char a2, char a3, char a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, char a12, char a13)
; SpReadyDriveIdentifyHandler(__int64 a1, __int64 a2)
; SpProcessReadyDriveIoctl(__int64 a1, __int64 a2, __int64 a3)
; AHCI_IOCTL_GetSetDebugInfo(struct _AHCI_MINIPORT_EXTENSION *a1, struct _SCSI_REQUEST_BLOCK *a2)
; AHCI_IOCTL_GetSetCapabilities(struct _AHCI_MINIPORT_EXTENSION *a1, struct _SCSI_REQUEST_BLOCK *a2)
; SetDeviceBitsCompleteRequest(struct _AHCI_MINIPORT_EXTENSION *a1)
; AHCICheckForDoubleBuffer(struct _AHCI_MINIPORT_EXTENSION *a1, struct _SCSI_REQUEST_BLOCK *a2)
; SendReadLogExt(__int64 a1, struct _AHCI_MINIPORT_EXTENSION *a2)
; AHCISetFeatures(struct _AHCI_MINIPORT_EXTENSION *a1, char a2, char a3, char a4)
; AHCISetMultiple(struct _AHCI_MINIPORT_EXTENSION *a1, unsigned int a2)
; AHCISetLinkStateRegisters(void *a1, int a2, unsigned int a3)
; AHCICopyGesnResult(void *a1, struct _SCSI_REQUEST_BLOCK *a2)
; AHCIIsMarkedReadOnly(struct _AHCI_MINIPORT_EXTENSION *a1, struct _SCSI_REQUEST_BLOCK *a2)
; CacheMgr::initializeDone(CacheMgr *this, int a2)
; ReadCfgMgr::getCfgDisk(ReadCfgMgr *this, int a2)
; ReadCfgMgr::readConfig(ReadCfgMgr *this, const struct Event *a2, int a3)
; ReadCfgMgr::readNextConfig(ReadCfgMgr *this)
; ReadCfgMgr::volDeleteDone(ReadCfgMgr *this)
; ReadCfgMgr::readConfig2(ReadCfgMgr *this)
; ReadCfgMgr::diskClaimDoneEH(void *a1)
; ReadCfgMgr::readConfig3(ReadCfgMgr *this, struct Disk *a2)
; ReadCfgMgr::readErrorLogDone(ReadCfgMgr *this)
; ReadCfgMgr::readFsLogDoneEH(void *a1)
; ReadCfgMgr::diskFoundDoneEH(void *a1)
; ReadCfgMgr::maybeFinishReadConfig(ReadCfgMgr *this)
; ReadCfgMgr::noticeDeleteDone(ReadCfgMgr *this)
; CfgRaidMap::copy(CfgRaidMap *this, struct MpbRaidMap *a2, struct ReadCfgMgr *a3)
; CfgRaidVol::copy(CfgRaidVol *this, struct MpbRaidVol *a2, struct ReadCfgMgr *a3, int a4)
; CfgRaidDev::copy(CfgRaidDev *this, struct MpbRaidDev *a2, struct ReadCfgMgr *a3)
; RaidCfgMgr::createCfgRaidDev(RaidCfgMgr *this, struct MpbRaidDev *a2, struct ReadCfgMgr *a3)
; ReadCfgMgr::createCfgDevices(ReadCfgMgr *this)
; MpbMgr::readMpbDevDone(MpbMgr *this, struct Disk *a2)
; MpbMgr::readMpbDev2Done(MpbMgr *this, struct Disk *a2)
; MpbMgr::storeMpbDone(MpbMgr *this)
; DiskMpbMgr::storeMpbBodyDone(DiskMpbMgr *this, struct Disk *a2)
; ArrayMpbMgr::writeFsLogDone(ArrayMpbMgr *this)
; ArrayMpbMgr::storeMpbBodyDone(ArrayMpbMgr *this, struct Disk *a2)
; RaidVol::getSrcReadReq(RaidVol *this)
; RaidVol::gotSrcReadReqEH(void *a1, __int64 a2)
; MigrRecord::migrReadsDoneEH(void *a1)
; MigrRecord::migrRaid1WritesDoneEH(void *a1)
; MigrRecord::migrWritesDoneEH(MigrRecord *this)
; MigrRecord::migrXorsDone(MigrRecord *this)
; MigrRecord::migrWriteParityDoneEH(MigrRecord *this)
; MigrRecord::startCopyPhase(MigrRecord *this)
; MigrRecord::gotCopyMemory(MigrRecord *this)
; MigrRecord::migrCopyReadsDoneEH(void *a1)
; MigrRecord::migrCopyWritesDoneEH(MigrRecord *this)
; MigrRecord::writeCkptDoneEH(void *a1)
; CkptMgr::flushBeforeCkptDone(CkptMgr *this, int a2)
; CkptMgr::writeCkptRecDoneEH(void *a1)
; CkptMgr::writeCkptDoneEH(CkptMgr *this)
; RaidIsm::suspendedForReadConfig(RaidIsm *this)
; RaidIsm::readAndUpdateDoneEH(void *a1)
; RaidIsm::volumeDeletedDoneEH(void *a1, __int64 a2)
; RaidIsm::smartIntervalDoneEH(RaidIsm *this, __int64 a2)
; RaidIsm::smartAttributesDoneEH(void *a1, __int64 a2)
; RaidMap::gotReadReqEH(void *a1, __int64 a2)
; RaidDev::shutdownWriteCleanDoneEH(void *a1)
; CfgArray::endLoadBalancing(CfgArray *this)
; RaidDev::diskDeviceResetsDoneEH(void *a1, IsmIoReq *a2)
; RaidDev::dsRecoveryDone(RaidDev *this)
; RaidDev::fsAllocDone(RaidDev *this)
; RaidDev::ioPathReadyEH(void *a1)
; Raid5Map::acquireReadReassignLock(Raid5Map *this, struct RaidReq *a2)
; Raid5Req::gotReadReassignLockEH(void *a1)
; Raid5Req::lockedReadReplyEH(void *a1)
; Raid5Req::readDgDmaDone(Raid5Req *this)
; Raid5Req::oldParityDoneEH(void *a1)
; Raid5Req::dmaNewDataDoneEH(void *a1)
; Raid5Req::readOldDataDoneEH(void *a1)
; Raid5Req::writeDsRecordDoneEH(void *a1)
; Raid5Req::writeNewDataDoneEH(void *a1)
; Raid5Req::partialParityXorDoneEH(void *a1)
; Raid5Req::partialParityWriteDoneEH(void *a1)
; Raid5Req::writeXorDoneEH(void *a1)
; Raid5Req::writeNewParityDoneEH(void *a1)
; Raid5Req::write5or0DoneEH(struct RaidReqBase *a1)
; RaidDgReq::writeDgDmaDoneEH(void *a1)
; RaidDgReq::writeXorDoneEH(void *a1)
; RaidDgReq::writeParityDoneEH(void *a1)
; RaidDgReq::readDgNextRead(RaidDgReq *this)
; RaidDgReq::xorDone(RaidDgReq *this)
; RaidDgReq::multiReadDoneEH(void *a1)
; RaidDgReq::allocReadMemBlocks(RaidDgReq *this, int a2, int a3, const struct Event *a4)
; RaidDgReq::freeReadMemBlocks(__int64 a1, int a2, int a3)
; RaidDgReq::reassignNextRead(RaidDgReq *this)
; RaidDgReq::reassignWriteDoneEH(void *a1)
; Raid5Req::raid3_ReadPrefixDoneEH(void *a1)
; Raid5Req::raid3_ReadSuffixDoneEH(void *a1)
; Raid5Req::raid3_DmaNewDataDoneEH(void *a1)
; Raid5Req::raid3_writeDsRecordDoneEH(void *a1)
; Raid5Req::raid3_WriteNewDataDoneEH(void *a1)
; Raid5Req::raid3_WriteXorDone(Raid5Req *this)
; Raid5Req::raid3_WriteNewParityDoneEH(void *a1)
; Raid5Req::raid3_WriteDone(Raid5Req *this)
; Raid5Req::raid3_StartDgReadPrefix(Raid5Req *this)
; Raid5Req::raid3_PrefixDgDmaDone(Raid5Req *this)
; Raid5Req::raid3_StartDgReadSuffix(Raid5Req *this)
; Raid5Req::raid3_SuffixDgDmaDone(Raid5Req *this)
; RaidMap::getRaid1GoodDataSetParity(RaidMap *this, unsigned int *a2, int *a3)
; RaidReq::raid1GotReadLock(RaidReq *this, int a2)
; RaidReq::raid1ReadReply(RaidReq *this)
; RaidReq::raid1NextReadRetry(RaidReq *this)
; RaidReq::raid1ReadRetry(RaidReq *this)
; RaidReq::raid1ReadRetryReplyEH(RaidReq *this)
; RaidReq::raid1GotReadReassignLockEH(void *a1)
; RaidReq::raid1ReadGotDgReqEH(void *a1, __int64 a2)
; RaidDgReq::raid1ReadReassign(RaidDgReq *this, struct RaidMap *a2, void *Src, int a4, int a5, const struct Event *Srca)
; RaidDgReq::raid1ReassignNextRead(RaidDgReq *this)
; RaidReq::raid1WriteDataDoneEH(void *a1)
; RaidReq::raid1WriteParityDoneEH(void *a1)
; RaidReq::raid1WriteAltParityDoneEH(void *a1)
; RaidReq::fsLogDone(RaidReq *this)
; RaidDev::powerDownEH(void *a1, int a2)
; CfgArray::powerMgmtDoneEH(void *a1)
; RaidIsm::diskPowerMgmtDoneEH(void *a1)
; CfgArray::diskPowerMgmtDoneEH(void *a1)
; RaidVol::parityOpDone(__int64 a1, signed int a2, __int64 a3)
; RaidVol::raid0VerifyReadsDoneEH(void *a1, __int64 a2)
; Raid5Map::computeParityDoneEH(void *a1, __int64 a2)
; Raid1Map::computeParityDoneEH(struct RaidMap *a1, RaidDgReq *this)
; MemorySet::getFreeMemoryBlocks(MemorySet *this, struct MemoryReq *a2, int a3, int a4)
; MemorySet::putFreeMemoryBlocks(MemorySet *this, struct MemoryReq *a2, int a3, void *a4)
; MemorySet::putFreeMemoryBlocks(MemorySet *this, struct MemoryReq *a2, struct MemoryReqPair *a3)
; LbaLockSet::insert(LbaLockSet *this, struct LbaLock *a2)
; LbaLockSet::acquire(LbaLockSet *this, struct LbaLock *a2, int a3)
; LbaLockSet::release(LbaLockSet *this, struct LbaLock *a2)
; IoPathMgr::initIoPathVolCacheDone(IoPathMgr *this, struct HostIoTarget *a2)
; IoPathMgr::initIoPathIoCoalescerDoneEH(void *a1, __int64 a2)
; IoPathMgr::initIoPathMgrDoneEH(void *a1)
; IoPathMgr::shutDown(IoPathMgr *this, struct IsmIoReq *a2)
; IoPathMgr::utilCmdDoneEH(void *a1, __int64 a2)
; IoPathMgr::syncFlushDoneEH(void *a1)
; RaidGetSetConfig(struct _IRP *a1, __int64 a2)
; IsmToHost_GetSetParamsDone(void *Src, __int64 a2)
; powerStateSuspendDone(void *a1, int a2)
; removeSuspendDone(__int64 a1, struct _KEVENT *a2)
; pmSuspendDone(__int64 a1, __int64 a2)
; RaidVol::gotCopyDataEH(RaidVol *this, struct RaidReqBase *a2)
; DsMgr::clearPpLogDone(DsMgr *this)
; DsMgr::flushPpLogDone(DsMgr *this)
; DsMgr::readDsRecordDone(DsMgr *this)
; DsMgr::computeParityDoneEH(void *a1)
; DsMgr::readPpLogHdrDone(DsMgr *this)
; DsMgr::readPpLogTrailerDone(DsMgr *this)
; DsMgr::readPpDone(DsMgr *this)
; DsMgr::readDataDone(DsMgr *this)
; DsMgr::ppXorDoneEH(DsMgr *this)
; DsMgr::writeParityDone(DsMgr *this)
; IoCoalescer::shutDown(IoCoalescer *this, struct IsmIoReq *a2)
; IoCoalescer::handDownIo(IoCoalescer *this, struct IsmIoReq *a2)
; IoCoalescer::setupToStartReadCoalescing(IoCoalescer *this)
; FsMgr::allocDoneEH(void *a1)
; FsLog::allocDone(FsLog *this, int a2)
; FsLogMin::writePageDoneEH(void *a1, unsigned int a2)
; FsLogMin::readPageDone(FsLogMin *this, unsigned int a2)
; FsLogMpb::readDoneEH(void *a1)
; FsLogMpb::writeDoneEH(void *a1)
; RaidDev::cngSyncPowerUpDone(RaidDev *this, struct Disk *a2)
; RaidDev::cngSyncFixDiskDone(RaidDev *this)
; RaidDev::breakCngCloneMpbWriteDoneEH(void *a1, __int64 a2)
; RaidDev::breakCngClonePowerDownDone(RaidDev *this, struct Disk *a2)
; RaidDev::breakCngCloneFailDiskDone(RaidDev *this)
; RaidDev::mountCngPartnerDiskMpbDoneEH(void *a1, Disk *a2)
; RaidDev::mountCngPartnerMpbDoneEH(void *a1, __int64 a2)
; RaidDev::dismountCngPartnerPowerDownDone(RaidDev *this, struct CfgDisk *a2)
; RaidDev::convertToCngAllocDoneEH(void *a1, __int64 a2)
; RaidDev::convertToCngStoreMpbDoneEH(void *a1, CfgArray *a2)
; RaidDev::updateCngForMigrDone(RaidDev *this)
; CfgArray::volHostNotifyDoneEH(void *a1, __int64 a2)
; CfgArray::volActionDone(CfgArray *this, struct CfgRaidDev *a2)
; RaidCfgMgr::notifyCfgActionsDone(RaidCfgMgr *this)
; RaidCfgMgr::diskActionDone(RaidCfgMgr *this, struct CfgDisk *a2)
; RaidCfgMgr::spareTestDoneEH(void *a1, __int64 a2)
; RaidCfgMgr::claimDiskStoreMpbDoneEH(RaidCfgMgr *this, struct CfgDisk *a2)
; RaidCfgMgr::resetConfigVolDeletesDone(RaidCfgMgr *this)
; RaidCfgMgr::gotSemsForCreateVol(__int64 a1)
; RaidCfgMgr::getArraySemForCreateVolEH(void *a1)
; RaidCfgMgr::gotArraySemForCreateVol(RaidCfgMgr *this)
; RaidCfgMgr::createErasePrtnDoneEH(void *a1, __int64 a2)
; CfgArray::diskFailUpdateDoneEH(void *a1, __int64 a2)
; RaidCfgMgr::mergeReadConfigDoneEH(RaidCfgMgr *this)
; RaidCfgMgr::setCachePolicyDoneEH(void *a1, __int64 a2)
; ReadCfgMgr::readErrorLogs(ReadCfgMgr *this)
; ArrayErrorLog::readyForSave(ArrayErrorLog *this)
; RaidIsm::getSetParms(RaidIsm *this, struct _GET_SET_RAID_PARAMS_PRV *a2)
; VolCache::execRead(VolCache *this, struct IsmIoReq *a2)
; VolCache::compNormalReadEH(void *a1, struct IsmIoReq *a2)
; VolCache::destageMgrDone(VolCache *this, struct DestageMgr *a2)
; VolCache::updateReadyForNewReqs(VolCache *this)
; CacheDmaReq::dmaDoneEH(void *a1)
; CacheEntry::updateLoadedMask(CacheEntry *this, unsigned __int64 a2, unsigned int a3)
; SpSpinDown_Up_Drives(struct _COMMON_CHANNEL_INFO *a1)
; SendDownStreamIrp(PDEVICE_OBJECT DeviceObject, PVOID a2, void *a3, __int64 a4, void *a5, unsigned __int32 a6)
; SpCreateDeviceObject(int a1, struct _DRIVER_OBJECT *a2, const WCHAR *a3, __int64 a4, ULONG a5, ULONG DeviceExtensionSize, ULONG DeviceType)
; DevQueueMgr::insertListByKey(DevQueueMgr *this, struct _DoubleLnkList *a2, unsigned int a3)
; Csmi_GetRaidInfoDone(PSLIST_ENTRY ListEntry, __int64 a2)
; LedController::SetLed(__int64 a1, int a2)
; LedController::SetActive(LedController *this, char a2)
; SpSetCompletionStatus(struct _COMMON_CHANNEL_INFO *a1, struct _SCSI_REQUEST_BLOCK *a2, struct _IRP *a3)
; SpCreateClose(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; SpCreateAdapterObject(struct _COMMON_FDO_INFO *a1)
; SpCreateChildPdo(struct _DRIVER_OBJECT *a1, __int64 a2, __int64 a3, __int64 a4, const void *Src, int a6, void *a7, unsigned __int8 a8, unsigned __int8 a9, unsigned __int8 a10, char a11)
; ConfigInfoSetup(struct _PORT_CONFIGURATION_INFORMATION *a1, struct _COMMON_CHANNEL_INFO *a2)
; SpCreateIDs(struct _INTELPORT_PDO_DEVICE_EXT *a1, void *a2)
; CreateHwIds(struct _INTELPORT_PDO_DEVICE_EXT *a1, unsigned __int8 *a2, unsigned __int8 *a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\igdkmd64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\intelaud.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\intelide.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\intelpep.c ;
; PepNotifyPpmQueryLpSettings(__int64 a1, __int64 a2)
; PepReadRegister(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\intelppm.c ;
; PerfReadActualMasterCount(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ProcLibTracePStateDomainRundown(__int64 a1)
; PerfReadWrappingCounter(__int64 a1, char a2, __int64 a3, __int64 a4)
; SetEfficientTurboDisablePolicy(int a1, __int64 a2)
; SetPerformanceEnergyBiasPolicy(int a1, __int64 a2)
; EvtDeviceSetPower(__int64 a1, __int64 a2)
; SetGV3PerfState(__int64 a1, __int64 a2)
; SetFFHThrottleState(__int64 a1, unsigned __int64 a2)
; SetTurboDisablePolicy(int a1, __int64 a2)
; ProcLibTraceCStateDomainRundown(__int64 a1)
; ReadGenAddr(__int64 a1)
; ReadIoMemRaw(__int64 a1)
; PepRegisterSpmSettings(__int64 a1)
; SetPerfStateFFH(__int64 a1, __int64 a2)
; SetPerfStateIO(__int64 a1, unsigned int a2, __int64 a3)
; CpcReadFeedback(int (*a1)(void))
; CpcReadFeedbackAcquireCallback(__int64 a1, int (*a2)(void))
; DecodeAcpi2CState(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; RegisterKernelIdleDomains(__int64 a1)
; DeregisterKernelIdleDomains(__int64 a1)
; InitAcpiProcessorDomains(__int64 a1)
; InitAcpiPerfDomain(__int64 a1)
; InitAcpiIdleDomain(__int64 a1, __int64 a2, __int64 a3)
; ValidatePerfDomainSymmetry(__int64 a1)
; GetPerfDomain(__int64 a1, __int64 a2, __int64 a3)
; ProcLibDeviceCreate(PVOID DeferredContext)
; DecodeDoorbellAddressIo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DecodeDoorbellAddressMemory(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DeregisterIdleDomain(__int64 a1, __int64 a2)
; RegisterIdleDomain(__int64 a1, unsigned int a2)
; UpdateKernelIdleDomains(__int64 a1)
; InitAcpiThrottleDomain(__int64 a1)
; PepNotifyQuerySettingHandle(__int64 a1, __int64 a2)
; DecodeAcpiPStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeAcpiTStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeControlStatusRegisterIo(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
; ValidateAcpiIdleDomain(unsigned int *a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ipfltdrv.c ;
; SetInterfaceBinding2(__int64 a1, __int64 a2)
; CreateCommonInterface(__int64 a1, int a2, int a3, char a4)
; OpenNewHandle(__int64 a1)
; SetupExternalNaming(PUNICODE_STRING DeviceName)
; SetupAclOnDevice(__int64 a1)
; IpfShimSetFilterState(__int64 a1)
; FcbLockDown(__int64 a1)
; CreateMaskFor(void *a1, int a2)
; DoIpIoctl(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; SetFiltersEx(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; OpenRegKey(PHANDLE KeyHandle, __int64 a2)
; UnSetFiltersEx(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; PFReadRegistryParameters(UNICODE_STRING *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\IPMIDrv.c ;
; SetDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; Func_IPMIReadOneByte(__int64 a1, unsigned __int8 a2)
; DispatchCreate(__int64 a1, __int64 a2)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ipnat.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\irda.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\irenum.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\isapnp.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\iwdbus.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\kbdclass.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\kbdhid.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\kdnic.c ;
; CreateNetworkAdapter@<eax>(__int64 a1@<rcx>, __int64 a2@<rbp>)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ks.c ;
; KsSetDefaultClockState(PKSDEFAULTCLOCK DefaultClock, KSSTATE State)
; KsSetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock, LONGLONG Time)
; KsGenerateEventList(GUID *Set, ULONG EventId, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock)
; KsSetPowerDispatch(KSOBJECT_HEADER Header, PFNKSCONTEXT_DISPATCH PowerDispatch, PVOID PowerContext)
; KsDecrementCountedWorker(PKSWORKER Worker)
; KsDeviceSetBusData(PKSDEVICE Device, ULONG DataType, PVOID Buffer, ULONG Offset, ULONG Length)
; KsGenerateEvents(PVOID Object, const GUID *EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext)
; KsPinGetCopyRelationships(PKSPIN Pin, PKSPIN *CopySource, PKSPIN *DelegateBranch)
; KsPinSetPinClockTime(PKSPIN Pin, LONGLONG Time)
; KsStreamPointerSetStatusCode(PKSSTREAM_POINTER StreamPointer, NTSTATUS Status)
; KsPropertyHandler(PIRP Irp, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet)
; KsEnableEvent(PIRP Irp, ULONG EventSetsCount, const KSEVENT_SET *EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock)
; KsSetTargetDeviceObject(KSOBJECT_HEADER Header, PDEVICE_OBJECT TargetDevice)
; KsSetMajorFunctionHandler(PDRIVER_OBJECT DriverObject, ULONG MajorFunction)
; KsSetDevicePnpAndBaseObject(KSDEVICE_HEADER Header, PDEVICE_OBJECT PnpDeviceObject, PDEVICE_OBJECT BaseObject)
; KsCreateDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject, const KSDEVICE_DESCRIPTOR *Descriptor, ULONG ExtensionSize, PKSDEVICE *Device)
; KsAllocateObjectCreateItem(KSDEVICE_HEADER Header, PKSOBJECT_CREATE_ITEM CreateItem, BOOLEAN AllocateEntry, PFNKSITEMFREECALLBACK ItemFreeCallback)
; KsServiceBusEnumCreateRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; ItemFreeCallback(PKSOBJECT_CREATE_ITEM CreateItem)
; KsCreateBusEnumObject(PWCHAR BusIdentifier, PDEVICE_OBJECT BusDeviceObject, PDEVICE_OBJECT PhysicalDeviceObject, PDEVICE_OBJECT PnpDeviceObject, const GUID *const InterfaceGuid, PWCHAR ServiceRelativePath)
; KsCreateFilterFactory(PDEVICE_OBJECT DeviceObject, const KSFILTER_DESCRIPTOR *Descriptor, PWCHAR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags, PFNKSFILTERFACTORYPOWER SleepCallback, PFNKSFILTERFACTORYPOWER WakeCallback, PKSFILTERFACTORY *FilterFactory)
; KsSetTargetState(KSOBJECT_HEADER Header, KSTARGET_STATE TargetState)
; KsCreateAllocator(HANDLE ConnectionHandle, PKSALLOCATOR_FRAMING AllocatorFraming, PHANDLE AllocatorHandle)
; KsCreateDefaultAllocator(PIRP Irp)
; KsCreateDefaultAllocatorEx(PIRP Irp, PVOID InitializeContext, PFNKSDEFAULTALLOCATE DefaultAllocate, PFNKSDEFAULTFREE DefaultFree, PFNKSINITIALIZEALLOCATOR InitializeAllocator, PFNKSDELETEALLOCATOR DeleteAllocator)
; KsValidateAllocatorCreateRequest(PIRP Irp, PKSALLOCATOR_FRAMING *AllocatorFraming)
; KsCreateDefaultSecurity(PSECURITY_DESCRIPTOR ParentSecurity, PSECURITY_DESCRIPTOR *DefaultSecurity)
; KsAllocateDefaultClockEx(PKSDEFAULTCLOCK *DefaultClock, PVOID Context, PFNKSSETTIMER SetTimer, PFNKSCANCELTIMER CancelTimer, PFNKSCORRELATEDTIME CorrelatedTime, const KSRESOLUTION *Resolution, ULONG Flags)
; KsCreateClock(HANDLE ConnectionHandle, PKSCLOCK_CREATE ClockCreate, PHANDLE ClockHandle)
; KsCreateDefaultClock(PIRP Irp, PKSDEFAULTCLOCK DefaultClock)
; KsValidateClockCreateRequest(PIRP Irp, PKSCLOCK_CREATE *ClockCreate)
; KsCreatePin(HANDLE FilterHandle, PKSPIN_CONNECT Connect, ACCESS_MASK DesiredAccess, PHANDLE ConnectionHandle)
; KsEnableEventWithAllocator(PIRP Irp, ULONG EventSetsCount, const KSEVENT_SET *EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock, PFNKSALLOCATOR Allocator, ULONG EventItemSize)
; KsAddObjectCreateItemToObjectHeader(KSOBJECT_HEADER Header, PDRIVER_DISPATCH Create, PVOID Context, PWCHAR ObjectClass, PSECURITY_DESCRIPTOR SecurityDescriptor)
; KsDispatchFastReadFailure(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject)
; KsDispatchSetSecurity(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; KsFreeObjectCreateItem(KSDEVICE_HEADER Header, PUNICODE_STRING CreateItem)
; KsFreeObjectCreateItemsByContext(KSDEVICE_HEADER Header, PVOID Context)
; KsQueryObjectCreateItem(KSOBJECT_HEADER Header)
; KsReadFile(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG Key, KPROCESSOR_MODE RequestorMode)
; KsSetInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass)
; KsiQueryObjectCreateItemsPresent(KSDEVICE_HEADER Header)
; KsFastMethodHandler(PFILE_OBJECT FileObject, PKSMETHOD Method, ULONG MethodLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet)
; KsMethodHandler(PIRP Irp, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet)
; KsMethodHandlerWithAllocator(PIRP Irp, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet, PFNKSALLOCATOR Allocator, ULONG MethodItemSize)
; KsFastPropertyHandler(PFILE_OBJECT FileObject, PKSPROPERTY Property, ULONG PropertyLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet)
; KsPropertyHandlerWithAllocator(PIRP Irp, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet, PFNKSALLOCATOR Allocator, ULONG PropertyItemSize)
; KsCreateTopologyNode(HANDLE ParentHandle, PKSNODE_CREATE NodeCreate, ACCESS_MASK DesiredAccess, PHANDLE NodeHandle)
; KsValidateTopologyNodeCreateRequest(PIRP Irp, PKSTOPOLOGY Topology, PKSNODE_CREATE *NodeCreate)
; KsLoadResource(PVOID ImageBase, POOL_TYPE PoolType, ULONG_PTR ResourceName, ULONG ResourceType, PVOID *Resource, PULONG ResourceSize)
; KoCreateInstance(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; KsFilterFactoryAddCreateItem(PKSFILTERFACTORY FilterFactory, PWCHAR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags)
; KsFilterFactorySetDeviceClassesState(PKSFILTERFACTORY FilterFactory, BOOLEAN NewState)
; KsFilterCreateNode(PKSFILTER Filter, const KSNODE_DESCRIPTOR *const NodeDescriptor, PULONG NodeID)
; KsFilterCreatePinFactory(PKSFILTER Filter, const KSPIN_DESCRIPTOR_EX *const PinDescriptor, PULONG PinID)
; KsCopyObjectBagItems(KSOBJECT_BAG ObjectBagDestination, KSOBJECT_BAG ObjectBagSource)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ksecdd.c ;
; SspiCopyAuthIdentity(__int64 a1, __int64 a2)
; SecSetPagingMode(char a1)
; SetCredentialsAttributesW(__int64 a1, int a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ksecpkg.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ksthunk.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\lltdio.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\lsi_sas.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\lsi_sas2.c ;
; SymWaitForDoorBell(__int64 a1, unsigned int a2)
; ReadAndSetSASPages(__int64 a1, int a2)
; ContinueIDReadsForPhyEvents(__int64 a1, int a2)
; ReadIDs(__int64 a1, int a2)
; ContinueIDReadsForIrElements(__int64 a1, unsigned int a2, unsigned int a3)
; ReadIrIDs(__int64 a1, unsigned int a2)
; CsmiSasFirmwareDownload_sm(__int64 a1, __int64 a2, int a3)
; CsmiSasSetPhyInfo_sm(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\lsi_sas3.c ;
; SymWaitForDoorBell(__int64 a1, unsigned int a2)
; ReadAndSetSASPages(__int64 a1, int a2)
; ContinueIDReadsForPhyEvents(__int64 a1, int a2)
; ReadIDs(__int64 a1, int a2)
; ContinueIDReadsForIrElements(__int64 a1, unsigned int a2, unsigned int a3)
; ReadIrIDs(__int64 a1, unsigned int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\lsi_sss.c ;
; SymWaitForDoorBell(__int64 a1, unsigned int a2)
; ReadAndSetSASPages(__int64 a1, int a2)
; ContinueIDReadsForPhyEvents(__int64 a1, int a2)
; ReadIDs(__int64 a1, int a2)
; ContinueIDReadsForIrElements(__int64 a1, int a2, unsigned int a3)
; ReadIrIDs(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\luafv.c ;
; LuafvCopySaclWithAudit(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; LuafvPostReadWrite(__int64 a1, __int64 a2, __int64 a3)
; LuafvPostSetInformation(__int64 a1, __int64 a2, __int64 a3)
; LuafvPostCreate(__int64 a1, __int64 a2, __int64 a3)
; LuafvInstanceSetup(__int64 a1, __int64 a2, __int64 a3, int a4)
; CreateChildTable(__int64 a1)
; LuafvCopyNextDirectoryEntry(__int64 a1, signed int a2, __int64 a3, unsigned __int64 a4, char a5, __int64 a6, __int64 a7)
; LuafvCopyDirectoryEntry(__int64 a1, int a2, unsigned int a3, void *a4, unsigned __int64 a5, char a6, char a7, __int64 a8, __int64 a9)
; LuafvOpenDirectory(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; LuafvPreCreate(__int64 a1, __int64 a2, __int64 a3)
; LuafvReadAndCacheSecurityDescriptor(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, char a4@<r9b>, __int64 a5@<r12>)
; CreateTableNode(__int64 a1, __int64 a2, int a3, __int64 a4)
; LuafvCreateUserStorePath(__int64 a1, __int64 a2, __int64 a3)
; LuafvPreSetInformation(__int64 a1, __int64 a2, __int64 a3)
; LuafvCreateVirtualFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; LuafvCreateVirtualPath(__int64 a1, __int64 a2, __int64 a3)
; LuafvCopyFile(__int64 a1, __int64 a2, __m128i *a3, __m128i *a4, __int64 a5, char a6)
; LuafvCreateTrustedInstallerSid(__int64 a1)
; LuafvReadDwordValue(void *a1, UNICODE_STRING *a2, __int64 a3)
; LuafvOpenKey(__int64 a1, __int64 a2, HANDLE *a3)
; LuafvCopyFile_fin_0(__int64 a1, __int64 a2)
; LuafvCopyShortName(__int64 a1, __int64 a2, __int64 a3)
; LuafvCopyStreamData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6)
; FindOrCreateDvfcb(PCUNICODE_STRING String2, __int64 a2)
; LuafvLogVirtualCreate(__int64 a1, __int64 a2)
; LuafvSetFileCreateEvent(__int64 a1, __int64 a2, __int64 a3)
; LuafvPostSetInformationSafe(__int64 a1, __int64 a2, __int64 a3)
; LuafvSetEcp(__int64 a1, __int64 a2)
; LuafvCreateStoreRootPath(__int64 a1, __int64 a2)
; LuafvCreateStoreRootPathWorker(__int64 a1, __int64 a2, __int64 a3)
; LuafvCreateStoreRootSecurityDescriptor(__int64 a1)
; LuafvCreateUserStoreSecurityDescriptor(__int64 a1, __int64 a2)
; LuafvReadFileTable(__int64 a1)
; CreateStaticEntry(__int64 a1)
; LuafvReadSettings(__int64 a1)
; LuafvReadSettings_fin_0(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\MBfilt64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mcd.c ;
; ChangerReadWriteVerification(__int64 a1, __int64 a2)
; ChangerFdoSetWmiDataItem(__int64 a1, __int64 a2, unsigned int a3)
; ChangerClassCreateClose(__int64 a1, __int64 a2)
; CreateChangerDeviceObject(__int64 a1, struct _DEVICE_OBJECT *a2, char a3)
; ChangerCreateSymbolicName(__int64 a1, char a2)
; ChangerCreateUniqueId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ChangerCreateNewDeviceSubKey(void *a1, unsigned int *a2, HANDLE *a3)
; ChangerCreateNonPersistentSymbolicName(void *a1, unsigned int *a2, __int64 a3, wchar_t *a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\megasas.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\megasr.c ;
; EncryptionDecrypt(__int64 a1, unsigned __int64 a2, signed int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\modem.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\monitor.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mouclass.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mouhid.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mountmgr.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mpsdrv.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mrxdav.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mrxsmb.c ;
; MRxSmbDeallocateForSrvOpen(__int64 a1, __int64 a2)
; MRxSmbCreateVNetRoot(__int64 a1)
; SmbCeSetConnectionKeepalive(int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>, int a4@<r8d>)
; SmbCeSetExchangeExpiryTimeEx(__int64 a1, int a2, char a3, char a4)
; SmbCeSetServerBufferSizes(__int64 a1, signed int a2, signed int a3, signed int a4)
; CopyBufferToMdl(PMDL MemoryDescriptorList, unsigned __int64 a2, ULONG a3)
; RxCeTearDownVC(__int64 a1, __int64 a2)
; VctCreateAndCacheEncryptionKey(__int64 a1, __int64 a2, int *a3, int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mrxsmb10.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mrxsmb20.c ;
; Smb2ReconnectOpen_Finalize(__int64 a1, signed __int64 a2, __int64 a3)
; Smb2CompleteSrvOpenReconnectionCallback(__int64 a1, __int64 a2, __int64 a3)
; Smb2ProcessResponseCreateContextBuffer(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; Smb2Create_Finalize(__int64 a1)
; Smb2CreateSuccessCompletion(PLARGE_INTEGER Timeout, __int64 a2, __int64 a3, __int64 a4)
; Smb2CompleteSrvOpenInitialization(__int64 a1, char a2, __int64 a3)
; MRxSmb2Create(PLARGE_INTEGER Timeout, signed __int64 a2, __int64 a3, __int64 a4)
; Smb2AttemptDeferredOpen(PLARGE_INTEGER Timeout, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21, __int64 a22, __int64 a23, __int64 a24, __int64 a25, __int64 a26, __int64 a27, __int64 a28, __int64 a29, __int64 a30, __int64 a31, __int64 a32, __int64 a33, char a34)
; Smb2FindOrCreateDirCacheObject(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, __int64 a6)
; Smb2DoesSrvOpenContributeToOplockState(__int64 a1)
; Smb2Create_Start(__int64 a1)
; Smb2AddCreateContextsToRequest(__int64 a1, size_t a2, __int64 a3, PDEVICE_OBJECT a4)
; Smb2WaitForActiveSrvOpen(__int64 a1)
; Smb2ReconnectSrvOpenAsync(__int64 a1, __int64 a2, char a3)
; Smb2ReconnectOpenAsync(__int64 a1, __int64 a2, __int64 a3)
; MRxSmb2ProcessSmbCopyData(__int64 a1, int a2, unsigned int a3)
; MRxSmb2SessionSetup(__int64 a1, __int64 a2, char a3, __int64 a4)
; Smb2SessionSetup_Finalize(__int64 a1)
; ValidateSessionSetupSecurityBlob(__int64 a1, __int64 a2, __int64 a3)
; Smb2SessionSetup_Start(__int64 a1)
; BuildSessionSetupSecurityBlob(__int64 a1, __int64 a2, __int64 a3, int a4)
; Smb2Read_Start(__int64 a1)
; BuildReadChunk(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, ULONG Length, char a8, char a9, char a10, __int64 a11)
; Smb2Read_Finalize(__int64 a1, signed __int64 a2, __int64 a3)
; Smb2SessionSetup_Receive(SIZE_T NumberOfBytes, __int64 a2, void *Src, unsigned int a4, unsigned int NumberOfBytesa, __int64 a6, void *Srca)
; Smb2Read_Receive(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6, __int64 a7)
; Smb2Create_Receive(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6, __int64 a7)
; MRxSmb2CheckForCollapsibleOpen(__int64 a1)
; MRxSmb2CollapseOpen(__int64 a1)
; MRxSmb2PreProcessOpen(__int64 a1)
; MRxSmb2ProbeAndReconnectSrvOpen(__int64 a1, __int64 a2)
; Smb2Read_CopyData(__int64 a1, __int64 _RDX, __int64 a3, unsigned int a4)
; Smb2BuildCreateContextEx(size_t Size, void *a2, __int64 a3, const void *a4, unsigned int Sizea, const void *a6, unsigned int a7)
; Smb2SetInfo_Start(__int64 a1)
; MRxSmb2SetFileInformation(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Smb2SetInfo_Receive(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5, __int64 a6, __int64 a7)
; Smb2SetInfo_Finalize(__int64 a1, __int64 a2, __int64 a3)
; Smb2CreateShadowSrvOpen(PLARGE_INTEGER Timeout)
; Smb2CloseShadowSrvOpen(__int64 a1)
; Smb2TreeConnect_CopyData(__int64 a1, __int64 a2, __int64 a3)
; MRxSmb2UndeferOpen(__int64 a1)
; Smb2Create_CopyData(__int64 a1, __int64 a2, __int64 a3)
; Smb2Create_Restart(__int64 a1)
; Smb2ValidateAndReconnectSrvOpen(__int64 a1)
; Smb2QueryDir_CopyData(__int64 _RCX, __int64 a2, __int64 a3, int a4)
; Smb2Read_Continue(__int64 a1)
; Smb2Read_Restart(__int64 a1)
; Smb2SessionSetup_CopyData(__int64 a1, __int64 a2, __int64 a3, int a4)
; MRxSmb2SetEaInformation(__int64 a1)
; MRxSmb2SetFsInformation(__int64 a1)
; MRxSmb2SetQuotaInformation(__int64 a1)
; MRxSmb2SetSecurityInformation(__int64 a1)
; Smb2SetInformation(__int64 a1, int a2, int a3)
; MRxSmb2QueryNetworkOpenInformationByName(__int64 a1, __int64 a2)
; Smb2AttemptToCancelSrvOpenReconnect(__int64 a1)
; Smb2CancelSuspendedExchangeOnSrvOpen(__int64 _RCX, __int64 a2, __int64 a3, __int64 a4)
; Smb2DecrementActiveHandleCount(__int64 a1)
; Smb2InvalidateSrvOpen(__int64 a1, char a2)
; Smb2ReconnectSrvOpenAsyncWorker(__int64 a1)
; Smb2SetDebugInformation(__int64 a1)
; Smb2QueryInfo_CopyData(__int64 a1, __int64 _RDX, unsigned int a3, signed int a4)
; MRxSmb2Read(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msfs.c ;
; MsReadTimeoutHandler(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; MsFsdCreate(__int64 a1, __int64 a2)
; MsCommonCreate(__int64 a1, __int64 a2)
; MsReadDataQueue(__int64 a1, ULONG_PTR a2, int a3, void *a4, unsigned int a5, __int64 a6)
; MsCreateClientEnd(PNTSTATUS AccessStatus, __int64 a2, __int64 a3, ACCESS_MASK a4, __int64 a5, char a6)
; MsFsdCreateMailslot(__int64 a1, __int64 a2)
; MsCommonCreateMailslot(__int64 a1, __int64 a2)
; MsCreateMailslot(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, unsigned int a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11)
; MsCreateFcb(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5, __int64 a6)
; MsFsdSetInformation(__int64 a1, struct _IRP *a2)
; MsCommonSetInformation(PIRP Irp)
; MsSetMailslotInfo(__int64 a1, __int64 a2, unsigned __int64 *a3)
; MsFsdRead(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; MsCommonRead(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; MsCreateMailslotPrefix(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int8 a5)
; MsFsdSetSecurityInfo(__int64 a1, __int64 a2)
; MsCommonSetSecurityInfo(__int64 a1, __int64 a2)
; MsCreateDefaultRootSecurity(__int64 a1)
; MsOpenMailslotRootDirectory(__int64 a1, __int64 a2, __int64 a3)
; MsSetCancelRoutine(__int64 _RCX, __int64 a2)
; MsSetBasicInfo(__int64 a1, __int64 a2)
; MsCreateWorkContext(PDEVICE_OBJECT DeviceObject, __int64 a2, __int64 a3, __int64 a4)
; MsTimeoutRead(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msgpioclx.c ;
; GpioClnInvokeReadPins(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, unsigned __int8 a7)
; GpioClnInvokeCreateIoContext(__int64 a1, __int64 a2, unsigned int a3)
; GpiopReadPins(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; GpiopCreatePinEntry(__int64 a1, __int16 a2)
; GpiopCreatePinEntryFromPinNumber(__int64 a1, signed __int16 a2)
; GpioHubpCreateHubDeviceObject(__int64 a1)
; GpioHubpCreateVirqMapping(unsigned int a1, __int64 a2, __int64 a3)
; GpiopSetInterruptState(__int64 a1, __int64 a2, char a3)
; GpiopProcessReadPinsRequest(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; GpioClxEvtDeviceFileCreate(__int64 a1, __int64 a2, __int64 a3)
; GpioClxEvtProcessReadRequest(__int64 a1, __int64 a2)
; GpiopClassLibraryCreate(__int64 a1, __int64 a2)
; GpioClxProcessAddDevicePreDeviceCreate(__int64 a1, __int64 a2, __int64 a3)
; GpioClxProcessAddDevicePostDeviceCreate(__int64 a1, __int64 a2)
; GpiopSetupPrimaryDeviceIoQueue(__int64 a1)
; GpiopSetupSelfIoTarget(__int64 a1, __int64 a2)
; GpiopOpenResourceHubTarget(__int64 a1, __int64 a2)
; GpiopCreateClient(__int64 a1, __int64 a2)
; GpiopSetupBankInterrupts(__int64 a1, __int64 a2)
; GpiopSetInterruptInformationFromResources(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msgpiowin32.c ;
; Button_ReadDataFromCache(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Button_ReadButtonPress(__int64 a1, __int64 a2)
; Button_HidReadReport(__int64 a1, __int64 a2)
; Button_EvtIoRead(__int64 a1, __int64 a2, __int64 a3)
; Button_PowerSettingCallback(__int64 a1, __int64 a2, int a3, __int64 a4)
; Indicator_PowerSettingCallback(__int64 a1, __int64 a2, int a3, __int64 a4)
; Indicator_EvtIoRead(__int64 a1, __int64 a2, __int64 a3)
; Button_CreateChildPdo(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mshidkmdf.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mshidumdf.c ;
; HidUmdfCreateCleanupClose(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msisadrv.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msiscsi.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mskssrv.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mslldp.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mspclock.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mspqm.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\msrpc.c ;
; RpcBindingCopy(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RpcBindingCreateW(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdrMesTypeDecode2(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; NdrMesTypeDecode3(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6)
; NdrMesTypeDecode(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; MesDecodeBufferHandleCreate(__int64 a1, unsigned int a2, __int64 *a3)
; MesEncodeIncrementalHandleCreate(__int64 a1, __int64 a2, __int64 a3, __int64 *a4)
; RpcBindingSetOption(__int64 a1, int a2, __int64 a3)
; MesEncodeDynBufferHandleCreate(__int64 a1, __int64 a2, __int64 a3)
; RpcBindingSetAuthInfoExW(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; RpcBindingSetAuthInfoW(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)
; UuidCreateNil(__int64 a1)
; MesDecodeIncrementalHandleCreate(__int64 a1, __int64 a2, __int64 a3)
; MesEncodeFixedBufferHandleCreate(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; NdrMesProcEncodeDecode(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdrMesProcEncodeDecode2(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdrMesSimpleTypeDecode(__int64 a1, __int64 a2, __int16 a3)
; NdrMesProcEncodeDecode3(__int64 a1, __int64 a2, unsigned int a3, __int64 *a4, char a5)
; NdrMesSimpleTypeDecodeAll(__int64 a1, __int64 a2, __int64 a3, __int16 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mssmbios.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mstee.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\MTConfig.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mup.c ;
; MupSurrogateSetUndecoratedFileName(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\mvumis.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndis.c ;
; NdisAcquireRWLockRead(__int64 a1, __int64 a2, char a3)
; NdisSetTimerObject(__int64 a1, __int64 a2, LONG a3, __int64 a4)
; NdisSetThreadObjectCompartmentId(PVOID Object, unsigned int a2)
; NdisAcquireReadWriteLock(PNDIS_RW_LOCK Lock, BOOLEAN fWrite, PLOCK_STATE LockState)
; NdisReleaseReadWriteLock(PNDIS_RW_LOCK Lock, PLOCK_STATE LockState)
; NdisSetEvent(PNDIS_EVENT Event)
; NdisSetTimer(PNDIS_TIMER Timer, UINT MillisecondsToDelay)
; NdisInitializeReadWriteLock(PNDIS_RW_LOCK Lock)
; NdisMSetBusData(__int64 a1, unsigned int a2, unsigned int a3, __int64 a4)
; NdisCopySendNetBufferListInfo(__int64 a1, __int64 a2)
; NdisFSetAttributes(__int64 a1, __int64 a2)
; NdisMSetTimer(__int64 a1, int a2)
; NdisClOpenAddressFamilyEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdisMSetPeriodicTimer(__int64 a1, LONG a2)
; NdisMSetInformationComplete(ULONG_PTR BugCheckParameter2, int a2)
; NdisCopyFromNetBufferToNetBuffer(__int64 a1, int a2, unsigned int a3, __int64 a4, int a5, __int64 a6)
; NdisCopyReceiveNetBufferListInfo(__int64 a1, __int64 a2)
; NdisConvertNdisStatusToNtStatus(unsigned int a1)
; NdisConvertNtStatusToNdisStatus(unsigned int a1)
; NdisCopyBuffer(PNDIS_STATUS Status, PNDIS_BUFFER *Buffer, NDIS_HANDLE PoolHandle, PVOID MemoryDescriptor, UINT Offset, UINT Length)
; NdisCopyFromPacketToPacket(PNDIS_PACKET Destination, UINT DestinationOffset, UINT BytesToCopy, PNDIS_PACKET Source, UINT SourceOffset, PUINT BytesCopied)
; NdisCopyFromPacketToPacketSafe(PNDIS_PACKET Destination, UINT DestinationOffset, UINT BytesToCopy, PNDIS_PACKET Source, UINT SourceOffset, PUINT BytesCopied, MM_PAGE_PRIORITY Priority)
; NdisSetPacketPoolProtocolId(NDIS_HANDLE PacketPoolHandle, UINT ProtocolId)
; NdisSetPacketStatus(PNDIS_PACKET Packet, NDIS_STATUS Status, NDIS_HANDLE Handle, ULONG Code)
; NdisIMCopySendCompletePerPacketInfo(__int64 a1, __int64 a2)
; NdisIMCopySendPerPacketInfo(__int64 a1, __int64 a2)
; NdisDprAcquireReadWriteLock(PKSPIN_LOCK SpinLock, char a2, __int64 a3)
; NdisDprReleaseReadWriteLock(PKSPIN_LOCK SpinLock, __int64 a2)
; NdisInterlockedDecrement(volatile signed __int32 *a1)
; NdisMCreateLog(__int64 a1, unsigned int a2, __int64 a3)
; NdisSetPacketCancelId(__int64 a1, __int64 a2)
; NdisSetProtocolFilter(PNDIS_STATUS Status, NDIS_HANDLE NdisBindingHandle, RECEIVE_HANDLER ReceiveHandler, RECEIVE_PACKET_HANDLER ReceivePacketHandler, NDIS_MEDIUM Medium, UINT Offset, UINT Size, PUCHAR Pattern)
; NdisSetupDmaTransfer(PNDIS_STATUS Status, NDIS_HANDLE NdisDmaHandle, PNDIS_BUFFER Buffer, ULONG Offset, ULONG Length, BOOLEAN WriteToDevice)
; NdisSetCoalescableTimerObject(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; NdisSetPeriodicTimer(__int64 a1, LONG a2)
; NdisSetTimerEx(PNDIS_TIMER Timer, UINT MillisecondsToDelay, PVOID FunctionContext)
; NdisMReadDmaCounter(__int64 a1)
; NdisReadPciSlotInformation(NDIS_HANDLE NdisAdapterHandle, ULONG SlotNumber, ULONG Offset, PVOID Buffer, ULONG Length)
; NdisReadPcmciaAttributeMemory(NDIS_HANDLE NdisAdapterHandle, ULONG Offset, PVOID Buffer, ULONG Length)
; NdisSetSessionCompartmentId(int a1, unsigned int a2)
; NdisMSetVirtualFunctionBusData(__int64 a1, unsigned __int16 a2, __int64 a3, unsigned int a4)
; NdisReadConfiguration(PNDIS_STATUS Status, PNDIS_CONFIGURATION_PARAMETER *ParameterValue, NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, NDIS_PARAMETER_TYPE ParameterType)
; NdisOpenConfigurationEx(__int64 a1, PVOID *a2)
; NdisOpenConfiguration(PNDIS_STATUS Status, PNDIS_HANDLE ConfigurationHandle, NDIS_HANDLE WrapperConfigurationContext)
; NdisMSetMiniportAttributes(PVOID FunctionContext, unsigned __int64 a2, __int64 a3, __int64 a4)
; NdisSetOptionalHandlers@<rax>(unsigned __int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r12>)
; NdisReadNetworkAddress(PNDIS_STATUS Status, PVOID *NetworkAddress, PUINT NetworkAddressLength, NDIS_HANDLE ConfigurationHandle)
; NdisOpenConfigurationKeyByName(PNDIS_STATUS Status, NDIS_HANDLE ConfigurationHandle, PNDIS_STRING SubKeyName, PNDIS_HANDLE SubKeyHandle)
; NdisOpenProtocolConfiguration(PNDIS_STATUS Status, PNDIS_HANDLE ConfigurationHandle, PNDIS_STRING ProtocolSection)
; NdisOpenConfigurationKeyByIndex(PNDIS_STATUS Status, NDIS_HANDLE ConfigurationHandle, ULONG Index, PNDIS_STRING KeyName, PNDIS_HANDLE KeyHandle)
; NdisCompleteBindAdapter(NDIS_HANDLE BindAdapterContext, NDIS_STATUS Status, NDIS_STATUS OpenStatus)
; NdisImmediateReadPortUchar(__int64 a1, unsigned int a2, unsigned __int8 *a3)
; NdisImmediateReadPortUlong(__int64 a1, unsigned int a2, unsigned __int8 *a3)
; NdisImmediateReadPortUshort(__int64 a1, unsigned int a2, unsigned __int8 *a3)
; NdisImmediateReadSharedMemory(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)
; NdisOpenFile(PNDIS_STATUS Status, PNDIS_HANDLE FileHandle, PUINT FileLength, PNDIS_STRING FileName, NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress)
; NdisMSetAttributes(PVOID FunctionContext, __int64 a2, char a3, int a4)
; NdisMSetMiniportSecondary@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r12>, __int64 a4@<r14>, __int64 a5@<r15>)
; NdisReadEisaSlotInformation(PNDIS_STATUS Status, NDIS_HANDLE WrapperConfigurationContext, PUINT SlotNumber, PNDIS_EISA_FUNCTION_INFORMATION EisaData)
; NdisReadEisaSlotInformationEx(PNDIS_STATUS Status, NDIS_HANDLE WrapperConfigurationContext, PUINT SlotNumber, PNDIS_EISA_FUNCTION_INFORMATION *EisaData, PUINT NumberOfFunctions)
; NdisOpenNDKAdapter(__int64 a1)
; NdisMReadConfigBlock(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)
; NdisSetAoAcOptions(__int64 a1, char a2, __int64 a3, __int64 a4)
; NdisMSetAttributesEx(PVOID FunctionContext, __int64 a2, unsigned int a3, int a4, int a5)
; NdisOpenAdapterEx@<rax>(PVOID P@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, int a5@<r12d>, __int64 a6)
; NdisClOpenAddressFamily(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, unsigned int a5, __int64 a6)
; NdisOpenAdapter(PNDIS_STATUS Status, PNDIS_STATUS OpenErrorStatus, PNDIS_HANDLE NdisBindingHandle, PUINT SelectedMediumIndex, PNDIS_MEDIUM MediumArray, UINT MediumArraySize, NDIS_HANDLE NdisProtocolHandle, NDIS_HANDLE ProtocolBindingContext, PNDIS_STRING AdapterName, UINT OpenOptions, PSTRING AddressingInformation)
; NdisImmediateReadPciSlotInformation(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; NdisCoCreateVc(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdisMCmCreateVc(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NdisCmOpenAddressFamilyComplete(unsigned int a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndiscap.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\NdisImPlatform.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndistapi.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndisuio.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\NdisVirtualBus.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndiswan.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ndproxy.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Ndu.c ;
; NduDriverDispatchCreate(__int64 a1, __int64 a2, __int64 a3)
; NduCreateDeviceIoObject(__int64 a1, __int64 a2, __int64 a3)
; NduCreateDeviceContext(__int64 a1, __int64 a2, __int64 a3)
; NduSetSecondaryAppMetaDataList(__int64 a1, __int64 a2, __int64 a3)
; NduSetAppMetaDataList(__int64 a1, __int64 a2, signed __int64 a3, const void *a4, char a5, __int16 a6, __int16 a7, __int64 a8, __int64 a9, __int64 a10)
; NduSetAppMetaDataListForRegularFlow(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; NduSetAppMetaDataListForRedirectedFlow(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NduCreateFlowContext(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; NduSetAppMetaDataListWorkerRoutine(PDEVICE_OBJECT DeviceObject, PVOID Context)
; NduCreateAndAssociateFlowContextToTransportLayer(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NduCreateNblContext(unsigned int **a1, __int64 a2)
; NduCreateWfpCalloutList(__int64 a1, __int64 a2, __int64 a3)
; NduCreateWfpContext(__int64 a1, __int64 a2, __int64 a3)
; NduCreateWfpFiltersList(__int64 a1, __int64 a2, __int64 a3)
; NduConvertInterfaceStatsListToUserInterfaceStatsArray(__int64 a1, __int64 a2, __int64 a3)
; NduCreateStatsContext(__int64 a1, __int64 a2, __int64 a3)
; NduFindOrCreateAppStatsEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NduCreateProcessStats(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NduFindOrCreateProcessStats(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NduConvertProcessStatsEntryToAppStats(__int64 a1, __int64 a2, __int64 a3)
; NduConvertEnergyToTokens(__int64 a1, unsigned int a2)
; NduTokenCreateComputeTokensWorker(__int64 a1, __int64 a2, __int64 a3)
; PplCreateLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, ULONG Tag, ULONG Taga)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, ULONG Tag, int a7, __int64 Taga, __int64 a9, char a10)
; NduSetDeviceDacl(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\netbios.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\netbt.c ;
; NbtQueryWinsSettings(__int64 a1, __int64 a2)
; NTCheckSetCancelRoutine(__int64 a1, __int64 a2)
; ConvertToAscii(__int64 a1, signed int a2, __int64 a3, __int64 a4, __int64 a5)
; ConvertToHalfAscii(__int64 a1, unsigned __int8 *a2, unsigned __int64 a3, unsigned int a4)
; FindInDomainList(__int64 a1, __int64 a2)
; NbtSetEventHandler(__int64 a1, int a2, __int64 a3, __int64 a4)
; NbtSetExtendedAddress(__int64 a1, __int64 a2, int a3)
; NbtOpenAddress(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; SetupRefreshTtl(__int64 a1, __int64 a2, int a3, __int64 a4)
; NameReleaseDone(__int64 a1)
; NbtAppendString(__int64 a1, const WCHAR *a2, __int64 a3)
; NbtCheckSetNameAdapterInfo(__int64 a1, int a2)
; NbtSetNewAddress(__int64 a1, unsigned int a2, __int64 a3)
; NbtSetClearWakeUpPattern(__int64 a1, __int64 a2, __int64 a3, char a4)
; CheckSetWakeupPattern(__int64 a1, unsigned __int8 *a2, char a3, char a4)
; NbtOpenAndAssocConnection(__int64 a1, __int64 a2, __int64 a3, char a4)
; SessionSetupContinue(__int64 a1, NTSTATUS a2, __int64 a3)
; NbtSetEndpointOptionsPrebind(__int64 a1)
; NbtSetEndpointOption(PVOID InputBuffer, ULONG InputBufferLength, PFILE_OBJECT FileObject)
; DoneDelayedNbtProcessConnect(__int64 a1)
; DisconnectDone(__int64 a1, NTSTATUS a2)
; NbtClientSetTcpInfo(__int64 a1, void *a2, ULONG a3)
; SetTcpInfo(PFILE_OBJECT FileObject, PVOID InputBuffer, ULONG InputBufferLength)
; SessionRespDone(__int64 a1)
; CompleteSessionSetup(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NbtCreateDeviceObject(PCUNICODE_STRING SourceString, PUNICODE_STRING DeviceName, __int64 a3, __int64 a4)
; CreatePdu(unsigned __int8 *a1, unsigned __int64 a2, __int64 a3, __int16 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; SetNameState(__int64 a1, __int64 a2, char a3)
; NbtSetCancelRoutine(__int64 a1, void (__fastcall *a2)(_QWORD, _QWORD), __int64 a3)
; NbtSetNsi9FTriageBlock(char a1)
; CopyFindNameData(__int64 a1, __int64 a2, __int64 a3)
; CopyNodeStatusResponseCompletion(__int64 a1, NTSTATUS a2)
; ProxyDoDgramDist(unsigned __int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; DecodeNodeStatusResponse(__int64 a1, int a2, __int64 a3, unsigned int a4, int a5)
; CountAndCopyAddrs(__int64 a1, __int64 a2, unsigned int *a3)
; SetWinsDownFlag(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinsDownTimeout(__int64 a1, __int64 a2, __int64 a3)
; StringCbCopyA(__int64 a1, __int64 a2, __int64 a3)
; NbtSetSmbBindingInfo(__int64 a1, __int64 a2, __int64 a3)
; NbtSetSmbBindingInfo2(__int64 a1, __int64 a2)
; NbtSetTcpInfo(PFILE_OBJECT FileObject, int a2, int a3, int a4)
; NbtCopyDataToIndicateBuffer(__int64 a1, unsigned int a2, void *a3)
; NbtCopyToStartOfIndicate(__int64 a1, unsigned int a2)
; NTOpenWinsAddr(__int64 a1, __int64 a2, int a3)
; WinsSetInformation(__int64 a1, int *a2)
; NbtDispatchCreate(__int64 a1, __int64 a2)
; LmOpenFile(__int64 a1)
; NbtTdiOpenConnection(void *a1, __int64 a2)
; CreateDeviceString(PCWSTR Source, PUNICODE_STRING Destination)
; NbtOpenConnection(__int64 a1, __int64 a2, __int64 a3)
; NTOpenConnection(__int64 a1, __int64 a2, __int64 a3)
; NbtTdiOpenAddress(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SetEventHandler(__int64 a1, struct _FILE_OBJECT *a2, int a3, __int64 a4, __int64 a5)
; NbtSetEndpointOptionsPostbind(__int64 a1, struct _FILE_OBJECT *a2)
; NbtReadRegistryCleanup(PVOID *a1, PVOID **a2, PVOID *a3)
; NTReReadRegistry(__int64 a1, int a2)
; ReadElement(HANDLE KeyHandle, PCWSTR SourceString, PUNICODE_STRING ValueName)
; NTReadIniString(HANDLE KeyHandle, __int64 a2, __int64 a3)
; OpenAndReadElement(__int64 a1, void *a2, UNICODE_STRING *a3)
; ReadLmHostFile(__int64 a1, __int64 a2, __int64 a3)
; ReadScope(__int64 a1, __int64 a2)
; ReadStringRelative(PCUNICODE_STRING SourceString, PCWSTR a2, __int64 a3, UNICODE_STRING *a4)
; ReadParameters2(__int64 a1, void *a2)
; NbtReadRegistry(__int64 a1, __int64 a2, __int64 a3)
; NbtReadSingleParameter(HANDLE KeyHandle, const WCHAR *a2, unsigned int a3, unsigned int a4)
; ConvertDottedDecimalToUlong(__int64 a1, __int64 a2)
; NbtOpenRegistry(void *a1, const WCHAR *a2, HANDLE *a3)
; NbtReadLinkageInformation(PCWSTR SourceString, HANDLE KeyHandle, __int64 a3, __int64 a4, __int64 a5)
; ReadParameters(__int64 a1, void *a2)
; ReadNameServerAddresses(void *a1, __int64 a2, unsigned int a3, __int64 a4)
; NbtCreateAddressObjects(int a1, int a2, __int64 a3)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; NbtTdiOpenControl(__int64 a1)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; NTOpenAddr(__int64 a1, __int64 a2, __int64 a3)
; NTSetEventHandler(__int64 a1, __int64 a2)
; NTSetSharedAccess(__int64 a1, __int64 a2, __int64 a3)
; AddToDomainList(__int64 a1, int a2, __int64 a3, char a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; CreateHashTable(__int64 a1, int a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\netio.c ;
; FeReleaseReadEngineLock(__int64 a1)
; WfpNblInfoSetFlags(__int64 a1, __int64 a2)
; ConvertMatchListToArray(__int64 a1, __int64 a2, __int64 a3)
; RtlCopyMdlToBuffer(PMDL SourceMdl, unsigned __int64 a2, char *a3, unsigned __int64 a4, __int64 a5)
; RtlCopyMdlToMdl(PMDL SourceMdl, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, unsigned __int64 a5, __int64 a6)
; ConvertSecondsToTicks(int a1, __int64 a2)
; RtlCopyMdlToMdlIndirect(PMDL *a1, unsigned __int64 *a2, __int64 *a3, unsigned __int64 *a4, unsigned __int64 a5, char a6, __int64 a7)
; FeAcquireReadEngineLock(__int64 a1, int a2)
; GetLayerFromIdRead(__int64 a1, __int64 a2)
; CreateSortedAddressPairs(__int64 a1, int a2, unsigned __int64 a3, unsigned int a4, int a5, __int64 a6, __int64 a7)
; NsiSetAllParametersEx(__int64 a1)
; NsipValidateSetAllParametersRequest(__int64 a1, __int64 a2)
; NsiSetAllParameters(int a1, int a2, __int64 a3, int a4, __int64 a5, int a6, __int64 a7, int a8)
; SetRange(__int64 a1, int a2, int a3, unsigned __int64 a4, __int64 a5)
; ConvertConditionToRange(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NetioCompleteCopyNetBufferListChain(__int64 a1)
; NetioAllocateAndReferenceCopyNetBufferListEx(__int64 a1, __int64 a2, __int64 a3)
; NetioCopyNetBufferListInformation(__int64 a1, __int64 a2)
; BfeNetEventConvertToData(__int64 a1, __int64 a2)
; WfpSetParmTypeSockAddr(__int64 a1, unsigned int a2, __int64 a3)
; RtlCopyBufferToMdl(unsigned __int64 a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5)
; RtlAcquireReadLock(PKSPIN_LOCK SpinLock, __int64 a2)
; WfpMidlObjectDecode(void (__fastcall *a1)(_QWORD, _QWORD), __int64 a2, unsigned int a3, __int64 a4)
; SetPendingAdds(__int64 a1)
; PWFP_BATCH_UPDATE_IOCTL_Decode(__int64 a1)
; KfdSetVisibleFilterState(int a1)
; NsipOpenKey(PHANDLE KeyHandle, const WCHAR *a2, ACCESS_MASK a3)
; NsipOpenInformationObjectKeyOrParent(PHANDLE KeyHandle, __int64 a2, __int64 a3, ACCESS_MASK a4, __int64 a5)
; NcmCreateNotificationChannelContext(PVOID P, unsigned int a2, __int64 a3, __int64 a4)
; NcmCreateNotificationChannelContextWrapper(__int64 a1, __int64 a2)
; WfpCreateReassemblyContext(__int64 a1)
; NetiopCreateForwardFlow(__int64 a1, __int16 a2, __m128i *a3, __m128i *a4, int a5, __int64 a6, __int64 a7)
; NetioCreateForwardFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; PtpCreateTrieNode(__int64 a1, unsigned __int16 a2, unsigned __int64 a3, __int64 a4, __int64 a5)
; ConvertInterfaceLuidToGuid(__int64 a1, __int64 a2)
; ConvertInterfaceLuidToIndex(__int64 a1, __int64 a2)
; PtpDoubleRotate(__int64 a1, __int64 a2, __int16 a3, __int64 a4)
; ConvertInterfaceGuidToLuid(__int64 a1, __int64 a2)
; WfpCreateFastRWLock(__int64 a1)
; IndexHashCreate(__int64 a1, __int64 a2)
; NsipCreateInformationObjectKey(PHANDLE KeyHandle, __int64 a2, ACCESS_MASK a3, void *a4)
; NsipCreateKey(PHANDLE KeyHandle, __int64 DesiredAccess, const WCHAR *a3, void *a4, ACCESS_MASK DesiredAccessa)
; NsiSetParameter(int a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6, int a7, __int64 a8, int a9, int a10)
; NsipReadBootFirmwareTableData(__int64 a1, __int64 a2, __int64 a3)
; NsipConvertKeyValueNameToKey(__int64 a1, unsigned int a2, __int64 a3)
; ConvertInterfaceIndexToLuid(int a1, __int64 a2)
; IndexListCreate(__int64 a1, __int64 a2)
; DoesInternalSpaceExist(__int64 a1, __int64 a2)
; CreateAndAddIndex(unsigned __int16 a1, __int64 a2, __int64 a3, __int64 a4)
; PWFP_ADD_INDEX_IOCTL_Decode(__int64 a1)
; NsipReadPersistentData(__int64 a1, int a2, __int64 a3, __int64 a4, void *a5, unsigned int *a6, unsigned int a7)
; NsipOpenInformationObjectKey(PHANDLE KeyHandle, __int64 a2, ACCESS_MASK a3)
; NsipConvertKeyToKeyValueName(__int64 a1, __int64 a2)
; NsipConvertKeyValueDataToRw(__int64 a1, __int64 a2, void *a3, unsigned int a4, unsigned int Size)
; NsipReadExact(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; NsiSetParameterEx(__int64 a1)
; NsipValidateSetParameterRequest(__int64 a1, __int64 a2)
; PtCreateTable(int a1, __int64 a2)
; NmrpAllocateAndCopyModulePointerArrayFromList(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; CreateCache(__int64 a1, int a2, __int64 a3)
; CreateCombinedHashTable(__int64 a1, __int64 a2)
; HfCreateFactory(__int64 a1, __int64 a2)
; PWFP_ADD_CACHE_IOCTL_Decode(__int64 a1)
; IoctlKfdSetBfeEngineSd(int a1, unsigned __int64 a2, unsigned int a3)
; NetioSetTriageBlock(int a1, __int64 a2)
; FsbCreatePool(__int16 a1, __int16 a2, int a3, __int64 a4)
; WfpRegOpenKey(PHANDLE KeyHandle, __int64 a2, __int64 a3)
; CreateBoottimeIndex(__int64 a1, __int64 a2)
; PWFP_BOOTTIME_FILTER_Decode(__int64 a1)
; WfpNblInfoDispatchTableSet(__int64 a1)
; SetWfpDeviceObject(ULONGLONG a1)
; WfpCreatePerProcessorLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int16 a6, __int64 a7)
; PplCreateLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, ULONG Tag, ULONG Taga)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, ULONG Tag, int a7, __int64 Taga, __int64 a9, char a10)
; FeSetFilterVisibleFlags(__int64 a1, __int64 a2, int a3)
; MdpCreatePool(__int16 a1, int a2)
; NsiSetObjectSecurity(__int64 a1)
; BfeEventProviderCreate(int a1, __int64 a2)
; WfpHashtableCreate(__int64 a1)
; NsiResetPersistentSetting(__int64 a1, int a2, __int64 a3, int a4)
; NsiClearOrResetPersistentSetting(__int64 a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, __int64 a6, int a7)
; WfpReleaseFastReadLock(__int64 a1, __int64 a2)
; NetioFreeCopyNetBufferList(__int64 a1)
; NetioCreateQoSFlow(__int64 a1, int a2, int a3, int a4, __int64 a5, __int64 a6)
; RtlCopyBufferToMdlWithReservedMappingAtDpcLevel(unsigned __int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)
; RtlCopyMdlToBufferWithReservedMappingAtDpcLevel(PMDL SourceMdl, unsigned __int64 a2, char *a3, __int64 a4)
; RtlCopyMdlToMdlWithReservedMappingAtDpcLevel(PMDL SourceMdl, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; ConvertIpv4MaskToLength(int a1, __int64 a2)
; ConvertLengthToIpv4Mask(unsigned int a1, __int64 a2)
; InternalSetAllParameters(int a1, int a2, __int64 a3, int a4, __int64 a5, int a6, __int64 a7, int a8)
; OpenCompartment(__m128i *a1, HANDLE *a2)
; ConvertCompartmentGuidToId(__m128i *a1, __int64 a2)
; ConvertCompartmentIdToGuid(int a1, __int64 a2)
; ConvertInterfaceAliasToLuid(wchar_t *Str2, __int64 a2)
; ConvertInterfaceLuidToAlias(__int64 a1, wchar_t *a2, __int64 a3)
; ConvertInterfaceLuidToNameA(__int64 a1, CHAR *a2, unsigned __int64 a3)
; ConvertInterfaceLuidToNameW(__int64 a1, wchar_t *a2, __int64 a3)
; ConvertInterfaceNameToLuidA(PCSZ SourceString, __int64 a2)
; ConvertInterfaceNameToLuidW(__int64 a1, __int64 a2)
; ConvertInterfacePhysicalAddressToLuid(void *Buf1, size_t Size, __int64 a3)
; ConvertStringToInterfacePhysicalAddress(__int64 a1, __int64 a2)
; CreateAnycastIpAddressEntry(__int64 a1)
; CreateUnicastIpAddressEntry(__int64 a1)
; InternalCreateAnycastIpAddressEntry(__int64 a1, __int64 a2)
; InternalCreateUnicastIpAddressEntry(__int64 a1, __int64 a2)
; InternalSetUnicastIpAddressEntry(__int64 a1, __int64 a2)
; NetioAddSetDeleteAddress(__int64 a1, int a2, __int64 a3, unsigned int a4)
; SetUnicastIpAddressEntry(__int64 a1)
; CreateIpForwardEntry2(__int64 a1)
; InternalCreateIpForwardEntry2(__int64 a1, __int64 a2)
; InternalSetIpForwardEntry2(__int64 a1, __int64 a2)
; NetioAddSetDeleteRoute(__int64 a1, __int64 a2, int a3)
; SetIpForwardEntry2(__int64 a1)
; CreateIpNetEntry2(__int16 *a1)
; InternalCreateIpNetEntry2(int a1, __int16 *a2)
; InternalSetIpNetEntry2(int a1, __int16 *a2)
; NetioAddSetDeleteNeighbor(int a1, __int16 *a2, int a3)
; SetIpNetEntry2(__int16 *a1)
; InternalSetIpInterfaceEntry(int a1, __int64 a2)
; SetIpInterfaceEntry(__int64 a1)
; InternalSetTeredoPort(__int16 a1)
; NetioNcmFastCheckDoesProcessHaveNcContexts(unsigned int a1)
; RtlStringCchCatNW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, size_t cchMaxAppend)
; PtSetData(__int64 a1, __int64 a2)
; NetioOpenKey(__int64 a1, ACCESS_MASK a2, HANDLE *a3)
; NmrfpCreateFilterAndGetDetachList(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NmrfpSetAllFilterParameters(__int64 a1)
; NsiClearPersistentSetting(__int64 a1, int a2, unsigned int a3, unsigned int a4, __int64 a5, int a6)
; NsiSetAllPersistentParametersWithMask(unsigned int a1, __int64 a2, int a3, __int64 a4, int a5, unsigned __int64 a6, unsigned __int64 a7, unsigned int a8)
; NsipReadNext(HANDLE KeyHandle, __int64 a2, int a3, __int64 a4)
; WfpDecodedBufferFreeHelper(void *a1)
; WfpNrptTriggerDecodeHelper(__int64 a1, unsigned int a2, __int64 a3)
; WfpSetConfigureParametersDecodeHelper(__int64 a1, unsigned int a2, __int64 a3)
; WfpSetDisconnectDecodeHelper(__int64 a1, unsigned int a2, __int64 a3)
; WfpSetVpnTriggerFilePathsDecodeHelper(__int64 a1, unsigned int a2, __int64 a3)
; WfpSetVpnTriggerSidsDecodeHelper(__int64 a1, unsigned int a2, __int64 a3)
; WfpAleDecrementWaitRef(__int64 a1)
; ConvertLayerIdToDirection(unsigned int a1)
; ConvertLayerIdToLayerMessageId(unsigned int a1)
; WfpSetBucketsToEmptyLru(__int64 a1, int a2)
; PWFP_ADD_VPN_TRIGGER_APP_FILE_PATHS_IOCTL_Decode(__int64 a1)
; PWFP_ADD_VPN_TRIGGER_APP_SIDS_IOCTL_Decode(__int64 a1)
; PWFP_BEGIN_ENUM_FILTERS_IOCTL_Decode(__int64 a1)
; PWFP_MOVE_FILTER_IOCTL_Decode(__int64 a1)
; PWFP_VPN_CONFIGURE_PARAMETERS_IOCTL_Decode(__int64 a1)
; PWFP_VPN_NRPT_TRIGGER_INIT_IOCTL_Decode(__int64 a1)
; PWFP_VPN_SET_DISCONNECT_STATE_IOCTL_Decode(__int64 a1)
; DeepCopyOnStackClassifyParams(__int64 a1)
; FeCopyIncomingValues(__int64 a1, __int64 a2)
; WfpAcquireFastReadLock(__int64 a1, __int64 a2)
; ConvertRangeConditionsOnNotEqual(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; SetBlobRangeBySize(int a1, void *a2, void *a3, unsigned int a4, __int64 a5)
; SetByteBlobRange(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SetRangeEntry(__int64 a1, int a2, __int64 a3, __int64 a4)
; FwppCopyStreamDataToBuffer(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)
; StreamDataCreate(__int64 a1)
; NetioCreatevSwitchForwardFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int16 a5, __int16 a6, __int16 a7, int a8, int a9, int a10, int a11, int a12)
; NetiopCreatevSwitchForwardFlow(__int64 a1, __int16 a2, __m128i *a3, __m128i *a4, int a5, __int16 a6, __int16 a7, int a8, int a9, int a10, __int64 a11, __int64 a12)
; WfpNblInfoSet(__int64 a1, __int64 a2)
; BipCreateRpcBinding(__int64 a1)
; FwpmEventProviderCreate0(__int64 a1, __int64 a2)
; KfdSetWfpPerProcContextPtr(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\netvsc63.c ;
; DoMultipleSend(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5)
; ConvertMdlToNbl(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DecrementAdapterReceiveCount(__int64 a1, int a2)
; NvscInternalConvertStatus(int a1)
; NvscInternalReadConfigValues(__int64 a1, __int64 a2)
; NvscMicroportSetRssConfig(__int64 a1, unsigned int a2, __int64 a3)
; NvscMicroportSetRssParameters(__int64 a1, __int64 a2, void *a3, unsigned __int16 a4, __int64 a5)
; ReadAndSetRegistryParameters(__int64 a1, void *a2)
; ReadNdisConfigFromRegistry@<rax>(void *a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7)
; SetRssParameters(void *Src, void *a2)
; DeviceSetInformation(void *Src, __int64 a2)
; DriverSetInformation(void *a1, __int64 a2)
; ProcessSetInformation(__int64 Src, __int64 a2)
; QuerySetCompletionMessage(__int64 a1, __int64 a2)
; SyncSetDevice(void *Src, __int64 a2)
; RndisVfSetSerialNumber(__int64 a1, int a2, char a3)
; SetupReceiveQueues(__int64 a1)
; VfPtOpenAdapterCompleteEx(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\npf.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\npfs.c ;
; NpCreateNamedPipePrefix(__int64 a1, __int64 a2, __int64 a3)
; NpFsdRead(__int64 a1, __int64 a2)
; NpSetDisconnectedPipeState(__int64 a1)
; NpSetClosingPipeState(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; NpFsdCreateNamedPipe(__int64 a1, __int64 a2)
; NpFsdCreate(__int64 a1, __int64 a2)
; NpCreateNewNamedPipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, int a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; NpCreateCcb(__int64 a1, __int64 a2, int a3, char a4, char a5, int a6, __int64 a7, __int64 a8)
; NpReadDataQueue(__int64 a1, __int64 a2, char a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; NpFastRead(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; NpCreateExistingNamedPipe(PNTSTATUS AccessStatus, __int64 a2, __int64 a3, __int64 a4, int a5, KPROCESSOR_MODE a6, int a7, int a8, int a9, __int16 a10, int a11, __int64 a12)
; NpFsdSetInformation(__int64 a1, __int64 a2)
; NpSetPipeInfo(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NpFsdSetSecurityInfo(__int64 a1, __int64 a2)
; NpCommonSetSecurityInfo(__int64 a1, __int64 a2)
; NpOpenNamedPipePrefix(__int64 DesiredAccess, __int64 a2, __int64 a3, __int64 a4, ACCESS_MASK DesiredAccessa, KPROCESSOR_MODE a6)
; NpCreateDefaultRootSecurity(__int64 a1)
; NpInternalRead(__int64 a1, __int64 a2, char a3, __int64 a4)
; NpSetAttribute(__int64 a1, int a2)
; NpSetAttributeInList(void **a1, void *a2, const void *a3, const void *a4, unsigned __int64 Size)
; NpReadAlias(void *Src, int a2, const void *a3, __int64 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\npsvctrig.c ;
; NptrigCreateTrigger(void *Src)
; NptrigInstanceSetup(__int64 a1, __int64 a2, __int64 a3, int a4)
; NptrigPostCreateCallback(__int64 a1, __int64 a2, __int64 a3, int a4)
; NptrigPostCreateNamedPipeCallback(__int64 a1, __int64 a2, __int64 a3, char a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nsiproxy.c ;
; NsippCopyMemory(void *Src, void **a2, char a3, unsigned int a4)
; NsippProbeForRead(unsigned __int64 a1, __int64 a2, __int64 a3, char a4)
; NsippSetParameter(void *Src, unsigned int a2, char a3)
; NsippCreateDevice(PDRIVER_OBJECT DriverObject)
; NsippSetAllPersistentParametersWithMask(unsigned __int64 a1, unsigned int a2, char a3)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure@<eax>(PDRIVER_OBJECT DriverObject@<rcx>, PDEVICE_OBJECT a2@<r9>, ULONG a3@<edx>, __int64 a4@<rbx>, UNICODE_STRING *a5@<r8>, __int64 a6, __int64 a7, PDEVICE_OBJECT a8)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(void *a1, UNICODE_STRING *a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ntfs.c ;
; NtfsDecodeFileObjectForRead(__int64 a1)
; NtfsCopyFromMdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, void *Dst)
; NtfsFsdRead_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCommonRead_fin_0(__int64 a1, __int64 a2, __int64 a3)
; TxfDecrementBackupAttributeDependencies(__int64 a1)
; NtfsCreateCompletionRoutine(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TxfFlushStreamForOpenProcessing(__int64 a1, __int64 a2, volatile signed __int32 *a3, __int64 a4, __int64 a5)
; TxfDeleteSavedDeletedLinkList(__int64 a1)
; NtfsVerifyReadCompletionRoutine(__int64 a1, __int64 a2, struct _KEVENT *a3)
; NtfsCompleteReadRequest(__int64 a1, __int64 a2, unsigned int a3)
; NtfsSetIoContextAsync(__int64 a1, __int64 a2, int a3, char a4)
; NtfsSetOrClearBitsUsingBaseMcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; NtfsNonCachedResidentRead(size_t Size, __int64 a2, __int64 a3, unsigned int a4, ULONG Sizea)
; NtfsAcquireScbForReadAhead(__int64 a1, BOOLEAN a2)
; NtfsReleaseScbFromReadAhead(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsSetupSubrequest(__int64 a1, __int64 a2, __int64 Length, __int64 a4, int a5, ULONG Lengtha, int a7)
; NtfsFillNetworkOpenInfo(__int64 a1, __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6)
; NtfsCreateMdlAndBuffer(__int64 a1, __int64 a2, __int16 a3, POOL_TYPE a4, SIZE_T *a5, __int64 a6, __int64 a7)
; NtfsDecrementCloseCounts(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, char a6, __int64 a7)
; NtfsDecrementCleanupCounts(__int64 a1, __int64 a2, __int64 a3, int a4, int a5)
; NtfsDecodeFileObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)
; NtfsCommonRead@<rax>(size_t Size@<rcx>, __int64 a2@<rdx>, __int64 a3@<rbp>)
; NtfsFsdRead(__int64 a1, __int64 a2)
; NtfsSetCcbAccessFlags(__int64 a1, __int64 a2, __int64 a3)
; NtfsReleaseForCreateSection(__int64 a1)
; NtfsSetCancelRoutine(__int64 a1, __int64 a2, __int64 a3, int a4)
; TxfCantFlushDefaultReaderImageSection(__int64 a1, unsigned int a2)
; NtfsSetBothCacheSizes(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsDecrementFcbUsnRecordReferenceCountAndFreeIt(PVOID *a1)
; NtfsCachedRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; TxfAddSavedDeletedLink(__int64 a1, __int64 a2, __int64 a3)
; TxfDeleteSavedDeletedLink(__int64 a1)
; TxfCheckForDefaultReader(__int64 a1, __int64 a2, __int64 a3)
; TxfCreateTmInstance(__int64 a1, const UNICODE_STRING *a2, __int64 a3)
; NtfsSetVolumeInformationFlags(__int64 a1@<rdx>, __int64 a2@<rcx>, unsigned __int16 a3@<r8w>, unsigned __int16 a4@<r9w>, unsigned __int64 a5@<r13>, char a6, __int64 a7)
; NtfsSetDirectWritesAllowed(__int64 a1)
; NtfsRepairConvertVcbRepairFlagsToRepairConfigFlags(__int64 a1, char a2, char a3)
; TxfNukeTxfReadOnlyFOCount(__int64 a1)
; LfsSetDefragLsn(__int64 a1)
; NtfsSetTopLevelWithoutIrpContext(__int64 a1)
; NtfsUpdateReadWriteDiskCounters(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsFillNetworkOpenInfo_fin_0(char a1, __int64 a2, __int64 a3)
; NtfsNonCachedResidentRead_fin_0(__int64 a1, __int64 a2)
; TxfCreateTxfFoForDefaultReader_fin_0(char a1, __int64 a2)
; LfsSetDefragLsn_fin_0(__int64 a1, __int64 a2)
; NtfsSetVolumeInformationFlags_fin_0(__int64 a1, __int64 a2)
; TxfCreateTmInstance_fin_0(char a1, __int64 a2)
; TxfAddSavedDeletedLink_fin_0(char a1, __int64 a2)
; NtfsOpenExistingEncryptedStream(__int64 a1, __int64 a2, __int64 a3)
; NtfsCopyIntoMdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, const void *Src)
; NtfsDecryptBuffers(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6)
; NtfsDecryptBuffers_fin_0(char a1, __int64 a2)
; NtfsDecryptPagingFileBuffer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, ULONG Length)
; TxfDereferenceForDefaultReader(__int64 a1, __int64 a2, __int64 a3)
; NtfsAsyncOffloadReadCompletionRoutine(__int64 a1, __int64 a2, __int64 a3)
; NtfsSetSupportedFeatures(__int64 _RCX)
; NtfsReadMftExceptionFilter(__int64 a1, unsigned int **a2, __int64 a3, __int64 a4)
; NtfsAppendNameToParent(__int64 a1, __int64 a2, __int64 a3)
; TxfDoPublishCommittedChangesToDefaultReaderSectionWithTryExcept(__int64 a1, __int64 a2)
; TxfDoPublishCommittedChangesToDefaultReaderSectionWithTryExcept_filt_0(__int64 a1, __int64 a2)
; NtfsSetRepairState(__int64 a1, __int64 a2)
; NtfsSetRepairState_fin_0(char a1, __int64 a2)
; NtfsIncReadCopyCounts(__int64 a1, int a2)
; TxfConvertRmStartFailureStatusCode(__int64 a1, __int64 a2, int a3)
; TxfFsctlCreateMiniversion(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; TxfFsctlCreateMiniversion_fin_0(__int64 a1, __int64 a2)
; ProcessSavepointListForCurrentLogRec(__int64 a1)
; TxfDoTempTxLock(__int64 a1, __int64 a2)
; TxfIoSetInformation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TxfMarkTempTxLockAsDoomed(__int64 a1)
; NtfsCancelReadUsnJournal(__int64 a1, __int64 _RDX)
; NtfsPerformVerifyDiskRead(__int64 a1, __int64 a2, void *a3, LARGE_INTEGER a4, ULONG Length)
; NtfsPerformVerifyDiskRead_fin_0(char a1, __int64 a2)
; EfsRead(__int64 a1, __int64 a2, int a3, __int64 a4)
; EfsAesDec(__int64 a1, __int64 a2, __m128i *a3, __int64 a4, unsigned int a5)
; EfsAesDec_RSA32K(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5)
; EfsDes3Dec(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)
; EfsDesDec(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5)
; EfsDesXDec(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5)
; EfspPostCreateActionNeedsData(int a1)
; rijndaelDecrypt256(__int64 a1, __int64 a2, __int64 a3)
; rijndaelKeyEncToDec(__int64 a1, int a2)
; TxfConvertMungedNameToTxfFileId(__int64 a1, __int64 a2, char *a3)
; NtfsOffloadRead(__int64 a1, __int64 a2)
; NtfsSetSparse(PVOID Buffer, __int64 a2)
; NtfsNavigateDownLcb(__int64 a1)
; NtfsOpenFcbById_fin_0(char a1, __int64 a2)
; NtfsReadFileUsnData(__int64 a1, __int64 a2)
; NtfsReadUsnWorker(__int64 a1, __int64 a2, __int64 a3)
; NtfsOpenFcbById@<rax>(unsigned __int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, __int64 a8)
; NtfsSetPurgeFailureMode(__int64 a1, __int64 a2)
; TxfCreateAndAcquireFcb@<rax>(signed __int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, char a4@<r9b>, unsigned __int64 a5@<r13>, __int64 a6)
; NtfsSetReparsePoint(__int64 a1, __int64 a2)
; NtfsCreateReparsePointInternal@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, int a4@<r9d>, signed __int64 r12_0@<r12>, int a5, char a6, __int64 a7)
; NtfsCommonSetEa(__int64 a1, __int64 a2)
; NtfsAppendEa(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCreateFileLock(__int64 a1, char a2)
; NtfsSetLinkInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6)
; TxfIoCreateFile@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 r13_0@<r13>, __int64 a5, PVOID *a6, HANDLE *a7, PVOID *a8)
; TxfOpenByNameInTxfSubdir@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int16 a4@<r9w>, unsigned __int64 r13_0@<r13>, __int64 a5, __int64 a6, HANDLE *a7, PVOID *a8)
; NtfsSetTotalAllocatedField(__int64 a1@<rdx>, __int64 a2@<rcx>, __int16 a3@<r8w>, __int64 a4@<r13>)
; NtfsCreateNewFile_fin_1(char a1, __int64 a2)
; NtfsWaitForCreateEvent(PIRP Irp, __int64 a2)
; NtfsCreateOrGetObjectId(__int64 a1, __int64 a2)
; NtfsOpenFile_fin_1(char a1, __int64 a2)
; TxfOpenFileProcessing_fin_0(char a1, __int64 a2, __int64 a3)
; NtfsOpenAttribute_fin_0(char a1, __int64 a2)
; NtfsOpenExistingPrefixFcb_fin_0(char a1, __int64 a2)
; TxfCreateTxfScb(__int64 a1, __int64 a2, int a3, __int64 a4, int a5, int a6)
; TxfCreateTxfVscb(__int64 a1, __int64 a2, int a3, char a4)
; TxfLoadVscbFileSizes(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TxfSetUpNtfsPtrs(__int64 a1, __int64 a2, int a3)
; TxfSaveUsnJournalEntryForCommit(__int64 a1, __int64 a2)
; NtfsLoadSecurityDescriptor@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r13>, signed __int64 a4@<r12>)
; TxfConvertTxfFileIdToMungedName(__int64 a1, __int64 a2)
; NtfsQueryNetworkOpenInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; TxfReferenceTxfVscbForDefaultReader(__int64 a1, __int64 a2, __int64 a3)
; TxfReferenceTransactionForCreate(__int64 a1, __int64 a2, char a3, __int64 a4)
; TxfCreateTxfFo(__int64 a1, __int16 a2, __int64 a3, int a4)
; TxfSavepointProcessing(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, int a9)
; TxfSetupTransactionContextFromFcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsTryOpenFcb(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5)
; TxfCreateBackupFile(__int64 a1, __int64 a2, __int64 a3)
; TxfCreateBackupFileInternal(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 *a6)
; TxfCreateBackupAttr@<al>(__int64 Dst@<rcx>, unsigned __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, signed __int64 a5@<r12>, __int64 a6, int a7, int a8)
; NtfsAddOpenAttributeForScb(__int64 a1, __int64 a2, __int64 a3)
; TxfReadTxfDataAttribute(__int64 a1, __int64 a2, __int64 a3)
; NtfsCreateIndex(__int64 a1, __int64 a2, int a3, int a4, int a5, char a6, __int64 a7, __int16 a8, __int16 a9, char a10)
; TxfReadTxfEpoch(__int64 a1, __int64 a2, __int64 a3)
; NtfsSetAllocationInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6)
; NtfsSetValidDataLengthInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TxfCheckOpenThroughDeletedComponent(__int64 a1, __int64 a2, __int64 a3)
; NtOfsFreeReadContext(__int64 a1)
; NtfsCommonSetSecurityInfo(__int64 a1, __int64 a2)
; NtfsReadAheadCachedBitmap(__int64 BitMapHeader, __int64 a2, __int64 a3)
; NtOfsReadRecords(__int64 a1, __int64 a2, __int64 *a3, __int64 a4, int a5, int a6, void *Dst, __int64 a8, unsigned int a9, void *Dsta)
; NtfsSetBasicInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6)
; NtfsSetTunneledData@<rax>(__int64 a1@<rdx>, void *a2@<rcx>, __int64 a3@<r8>, __int64 a4@<r13>)
; NtfsMdlReadA(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; NtfsSetCompression(__int64 a1, __int64 a2)
; NtfsFsdSetInformation_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCommonSetInformation_fin_0(__int64 a1, __int64 a2)
; NtfsCommonVolumeOpen@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, int a4@<edi>, int a5@<r12d>)
; NtfsCommonCreate_filt_0(__int64 a1, __int64 a2)
; NtfsCommonCreate_fin_1(char a1, __int64 a2)
; NtfsCommonCreateCallout_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsFastQueryNetworkOpenInfo(__int64 a1, char a2, void *a3, __int64 a4)
; TxfSetupTxfRmcbForFcb(__int64 a1, __int64 a2, char a3)
; NtfsNetworkOpenCreate@<al>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; NtfsParseNameForCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128i *a7, __int64 a8)
; NtfsSetRenameInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7)
; NtfsCopyReadA(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; NtfsCreateAttributeWithAllocation(__int64 a1, __int64 a2, int a3, __int64 a4, int a5, char a6, int a7, void *a8)
; NtfsConvertToNonresident(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, char a4@<r9b>, signed __int64 r12_0@<r12>, unsigned __int64 a6@<r13>, void *a5)
; LfsSetBaseLsnPriv(__int64 a1, __int64 a2, __int64 a3)
; NtfsCommonCreate@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; NtfsCreateScb(__int64 a1, __int64 a2, int a3, __int64 a4, char a5, __int64 a6, char *a7)
; NtfsOpenAttributeInExistingFile@<rax>(__int64 a1@<rdx>, size_t a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, int a5@<r9d>, signed __int64 r12_0@<r12>, __int64 a6, int a7, __int64 a8, __int64 a9)
; NtfsOpenExistingPrefixFcb@<rax>(__int64 a1@<rdx>, size_t a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, int a5@<r9d>, _WORD *a6, int a7, int a8)
; NtfsOpenAttribute(size_t a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9, int a10, int a11, int a12, __int64 a13, signed __int64 *a14, __int64 a15, __int64 *a16)
; NtfsEncryptionCreateCallback(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)
; NtfsOpenAttributeCheck(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, __int64 a5, __int64 a6)
; NtfsCommonSetInformation@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; NtfsReadMftRecord(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, __int64 *a7)
; NtfsReadFileRecord(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsSetFileObject(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; NtfsCreateInternalAttributeStream(__int64 a1, __int64 a2, char a3, unsigned __int8 a4, __int64 a5, __int64 a6)
; TxfOpenFileProcessing(size_t a1, __int64 a2, signed __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; TxfIsolatedOpenOfLockedFile(__int64 a1, __int64 a2, int a3, __int64 a4)
; NtfsCreateFcb(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4, char a5, __int64 a6)
; NtfsFsdCreate@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r9>)
; NtfsCommonCreateCallout@<rax>(__int64 a1@<rcx>, __int64 a2@<rbp>)
; TxfMarshalTransactionForCreate(__int64 a1, __int64 a2)
; NtfsCreateAttribute@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 r13_0@<r13>, __int64 a5, __int64 a6, int a7, __int64 a8, __int64 a9)
; NtfsOpenNewAttr@<rax>(__int64 a1@<rdx>, size_t a2@<rcx>, signed __int64 a3@<rsi>, __int64 a4@<r8>, __int64 a5@<r9>, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
; NtfsGenerateDosName(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; NtfsAddDosOnlyName(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; NtfsOpenExistingAttr(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, char a8, int a9)
; NtfsFilterCallbackAcquireForCreateSection(__int64 a1)
; ReadIndexBuffer(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TxfSetupTransactionContextFromCcb(__int64 a1, __int64 a2, int a3, char a4, __int64 a5)
; NtOfsSetLength(__int64 a1, __int64 a2, signed __int64 a3)
; NtfsReadUsnJournal(__int64 a1, __int64 a2, char a3)
; NtfsCopyWriteA(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; NtfsSetEndOfFileInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, signed __int64 a6@<r12>, __int64 a7, char a8)
; NtfsFsdSetInformation@<rax>(__int64 a1@<rdx>, __int64 a2@<rbp>)
; TxfCreateTxfFcb(__int64 a1, __int64 a2, PVOID *a3, int a4, int a5, int a6)
; NtfsCreateLcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; NtfsOpenFile@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, char *a12)
; NtfsSetDispositionInfo(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; NtfsCreateAttributeWithValue(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, int a6, int a7, __int64 a8, __int16 a9, __int64 a10)
; NtfsCreateNewFile@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; NtfsCacheSharedSecurityForCreate@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r13>, signed __int64 a4@<r12>)
; TxfSetupTransactionContextForCreate(__int64 a1, __int64 a2, char a3, __int64 a4)
; LfsSetDurableLsn(__int64 a1, __int64 a2)
; NtfsOpenSubdirectory(__int64 a1, unsigned __int64 a2, __int64 *a3, signed __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; TxfNewFileCreate(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, char a5@<r9b>, __int64 a6, __int64 a7, int a8, __int64 a9, char *a10)
; TxfReadVersion(__int64 a1, __int64 a2, __int64 a3, size_t a4, __int64 a5, unsigned int a6, int a7)
; TxfSetAttrSize@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, char a5@<r9b>, unsigned __int64 a6, int a7)
; NtfsSqmCreateStringStreamEntryEx(__int64 a1, __int64 a2)
; NtfsCreateOrGetObjectId_fin_0(char a1, __int64 a2)
; NtfsSetObjectIdInternal_fin_0(__int64 a1, __int64 a2)
; LfsReadLogRecord(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; DoAction(__int64 a1, void *Src, size_t Size, signed int a4, int Srca, __int64 Sizea, __int64 a7, void *Dst, __int64 a9, void *Dsta, __int64 a11)
; OpenAttributeForRestart(__int64 a1, __int64 a2, signed __int64 a3, __int64 *a4)
; LfsReadNextLogRecord(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsBackoutFailedOpensPriv(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5)
; NtfsSetAllocationInfo_fin_0(__int64 a1, __int64 a2)
; TxfCreateKtmResourceManagerObject(__int64 a1, __int64 a2)
; NtfsCommonSetVolumeInfo(void *a1, __int64 a2)
; TxfReadRmRootFlags(__int64 a1, __int64 a2, __int64 a3)
; NtfsFsdCreate_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCommonVolumeOpen_fin_0(char a1, __int64 a2)
; LfsReadRestart(__int64 a1, signed __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char *a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14)
; TxfMergeTopsDefaultSettingsWithSpecifiedSettings@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, signed __int64 a4@<r12>, unsigned __int64 a5@<r13>)
; TxfConvertRmPoliciesToClfsPolicies(__int64 a1, __int64 a2, __int64 a3)
; NtfsCreateCcb(__int64 a1, __int64 a2, char a3, __int16 a4, int a5, __int64 a6, __int16 a7, __int64 a8)
; LfsOpenLogFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, __int64 a7, __int64 a8, int a9, __int64 a10, __int64 a11, int a12, __int64 a13, __int64 a14, __int64 a15)
; TxfCreateTxfRmcb(__int64 a1, __int64 a2)
; LfsReadRestartArea(__int64 a1, __int64 a2, void *a3, __int64 a4, __int64 a5, __int64 a6)
; TxfSetupImplicitTransaction(__int64 a1)
; TxfReadTopsMetadataStream@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, signed __int64 r12_0@<r12>, unsigned __int64 r13_0@<r13>, int a5, int a6, int a7, int a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16)
; NtfsSetObjectIdInternal@<rax>(void *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, __int64 a5@<r13>, char a6)
; NtfsSetFsVolumeObjectIdInfo@<rax>(void *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r12>, __int64 a5@<r13>)
; NtfsOpenSystemFile(__int64 a1, __int64 *a2, __int64 a3, __int64 a4, __int64 a5, int a6, char a7)
; NtfsReadBootSector@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, void *a4@<r9>, signed int a5@<r15d>, int a6)
; NtfsSetVcbCorruptionHandlingFlags(__int64 a1)
; NtfsSetVcbShortNameCreationFlag(__int64 a1, char a2)
; NtfsSetAndGetVolumeTimes@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, char a3@<r8b>, signed __int64 a4@<r12>, unsigned __int64 a5@<r13>)
; NtfsOpenRootDirectory@<al>(__int64 a1@<rcx>, __int64 a2@<rdx>, signed __int64 a3@<r12>, unsigned __int64 a4@<r13>)
; NtfsCreateRootFcb(__int64 a1)
; NtfsCreateNonpagedFcb(__int64 a1, char a2)
; NtfsSetExtendedDasdIo(__int64 a1, __int64 a2)
; NtfsUpdateCorruptionHandlingVolumeSetting(__int64 a1, __int64 a2)
; LfsReadPage(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCreatePrerestartScb(__int64 a1, __int64 a2, __int64 *a3, int a4, __int64 a5, int a6, char a7)
; NtfsCreateDefaultTier(__int64 a1)
; NtfsSetFsLabelInfo@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, unsigned __int64 a4@<r13>)
; NtOfsCreateAttributeEx@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, unsigned int a4@<r9d>, unsigned __int64 r13_0@<r13>, int a5, int a6, int a7)
; NtOfsCreateIndex@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 r13_0@<r13>, int a5, int a6, __int64 a7, __int64 a8, __int64 a9)
; NtfsCreateCorruptLog@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, char a3@<r8b>, unsigned __int8 a4@<r9b>, signed __int64 a5@<r12>, unsigned __int64 a6@<r13>)
; NtOfsCreateAttribute@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, int a4@<r9d>, unsigned __int64 r13_0@<r13>, int a5, int a6)
; NtfsReadCorruptLogHeaderUnit(__int64 a1, int a2, unsigned int a3, __int64 a4)
; NtfsSetCurrentCorruptLogHeader(__int64 a1, __int64 a2, int a3, char a4)
; NtfsSetCorruptLogVdl(__int64 a1, __int64 a2, __int64 a3)
; NtfsSetFcbSecurityFromDescriptor(__int64 a1, __int64 a2, void *a3, ULONG a4, char a5)
; NtfsRunIsClearOrSet(PRTL_BITMAP BitMapHeader, __int64 a2, signed __int64 a3, __int64 a4, char a5, __int64 a6)
; LfsCopyReadLogRecord(__int64 a1, __int64 a2, void *a3, __int64 a4)
; TxfCreateIrpContextForRecovery(__int64 a1, __int64 a2, __int64 a3)
; NtfsUpdateDeleteNotificationVolumeSetting(__int64 a1, __int64 a2)
; TxfTransDoNextRedo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6)
; TxfCreateGenericCCORCTable(__int64 a1, __int64 a2)
; NtfsUpdateDynamicRegistrySettings(__int64 a1)
; NtfsRegistryOpenDeepestPath(__m128i *a1, __int64 a2, __int64 a3)
; NtfsSetupUsnJournal@<eax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, int a4@<r9d>, unsigned __int64 r13_0@<r13>, signed int a5, __int64 a6)
; NtfsSetBootloaderAccessed(__int64 a1, __int64 a2)
; NtfsRestartSetBitsInBitMap(__int64 a1, RTL_BITMAP *a2, ULONG a3, ULONG a4)
; NtfsSqmReadCopyCounts(__int64 _RCX)
; NtfsCommonSetSecurityInfo_fin_0(char a1, __int64 a2)
; TxfCreateBackupFile_fin_0(char a1, __int64 a2)
; TxfCreateBackupAttr_fin_0(char a1, __int64 a2, __int64 a3)
; TxfSetupTransactionContextFromFcb_fin_0(char a1, __int64 a2)
; TxfCreateBackupFileInternal_fin_0(__int64 a1, __int64 a2)
; TxfIoCreateFile_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; TxfIoCreateFile_fin_1(char a1, __int64 a2)
; NtfsNetworkOpenCreate_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; LfsSetDurableLsn_fin_0(__int64 a1, __int64 a2)
; NtfsMdlReadA_filt_1(__int64 a1)
; NtfsMdlReadA_filt_0(__int64 a1)
; NtfsSetRenameInfo_fin_0(__int64 a1, __int64 a2)
; NtfsSetRenameInfo_fin_1(char a1, __int64 a2)
; TxfReadTxfDataAttribute_fin_0(__int64 a1, __int64 a2)
; NtfsTryOpenFcb_fin_0(char a1, __int64 a2)
; NtfsFastQueryNetworkOpenInfo_fin_0(char a1, __int64 a2, __int64 a3)
; NtfsOpenFile_fin_0(char a1, __int64 a2)
; TxfIsolatedOpenOfLockedFile_fin_0(char a1, __int64 a2)
; NtfsOpenAttributeCheck_fin_0(char a1, __int64 a2)
; NtfsOpenAttributeInExistingFile_fin_4(__int64 a1, __int64 a2)
; NtfsOpenAttributeInExistingFile_fin_3(__int64 a1, __int64 a2)
; NtfsOpenAttributeInExistingFile_fin_0(char a1, __int64 a2)
; NtfsOpenAttributeInExistingFile_fin_5(__int64 a1, __int64 a2)
; NtfsOpenAttributeInExistingFile_fin_1(char a1, __int64 a2, __int64 a3)
; NtfsOpenAttributeInExistingFile_fin_2(__int64 a1, __int64 a2)
; NtfsSetFileObject_fin_0(char a1, __int64 a2)
; NtfsCreateInternalAttributeStream_fin_0(char a1, __int64 a2)
; NtfsCopyWriteA_filt_0(__int64 a1)
; NtfsSetPurgeFailureMode_fin_0(__int64 a1, __int64 a2)
; NtOfsSetLength_fin_0(__int64 a1, __int64 a2)
; NtfsOpenSubdirectory_fin_0(char a1, __int64 a2)
; NtfsCreateLcb_fin_0(char a1, __int64 a2)
; NtfsCreateFcb_fin_0(char a1, __int64 a2)
; TxfCreateTxfFcb_fin_0(char a1, __int64 a2)
; NtfsCreateScb_fin_0(char a1, __int64 a2)
; TxfSetupTransactionContextFromCcb_fin_0(char a1, __int64 a2)
; NtfsCopyReadA_filt_0(__int64 a1)
; NtfsReadMftRecord_filt_0(unsigned int **a1, __int64 a2)
; NtfsReadMftRecord_fin_1(char a1, __int64 a2)
; TxfSetupTxfRmcbForFcb_fin_0(char a1, __int64 a2)
; NtfsAddOpenAttributeForScb_fin_0(char a1, __int64 a2)
; NtfsAddOpenAttributeForScb_fin_1(char a1, __int64 a2)
; NtfsSetEndOfFileInfo_fin_0(__int64 a1, __int64 a2)
; NtfsConvertToNonresident_fin_0(char a1, __int64 a2)
; NtfsReadUsnJournal_fin_0(char a1, __int64 a2)
; NtfsCreateAttributeWithAllocation_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCreateNonresidentWithValue_fin_2(char a1, __int64 a2)
; NtfsCreateNonresidentWithValue_fin_0(char a1, __int64 a2)
; NtfsCreateNonresidentWithValue_fin_1(char a1, __int64 a2)
; NtfsOpenNewAttr_fin_0(char a1, __int64 a2, __int64 a3)
; NtfsOpenNewAttr_fin_1(__int64 a1, __int64 a2)
; NtfsCreateAttribute_fin_0(__int64 a1, __int64 a2)
; NtfsCreateNewFile_fin_0(char a1, __int64 a2)
; NtfsCacheSharedSecurityForCreate_fin_0(char a1, __int64 a2)
; NtfsCreateAttributeWithValue_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsAddDosOnlyName_fin_0(char a1, __int64 a2)
; NtfsGenerateDosName_fin_0(char a1, __int64 a2)
; NtOfsReadRecords_fin_0(char a1, __int64 a2)
; TxfCreateTxfFo_fin_0(char a1, __int64 a2)
; NtfsCommonSetEa_fin_0(char a1, __int64 a2)
; NtfsSetCompression_fin_0(char a1, __int64 a2)
; NtfsSetLinkInfo_fin_0(char a1, __int64 a2)
; NtfsSetLinkInfo_fin_1(char a1, __int64 a2)
; NtfsSetTotalAllocatedField_fin_0(char a1, __int64 a2)
; NtfsSetSparse_fin_0(char a1, __int64 a2)
; NtfsSetReparsePoint_fin_0(char a1, __int64 a2)
; NtfsReadFileUsnData_filt_2(unsigned int **a1, __int64 a2)
; NtfsReadFileUsnData_filt_0(unsigned int **a1, __int64 a2)
; NtfsReadFileUsnData_fin_1(char a1, __int64 a2)
; NtfsReadUsnWorker_fin_0(__int64 a1, __int64 a2)
; TxfSavepointProcessing_fin_0(char a1, __int64 a2)
; NtfsCreateIndex_fin_0(__int64 a1, __int64 a2)
; TxfCreateTxfVscb_fin_0(char a1, __int64 a2)
; NtfsReadAheadCachedBitmap_fin_0(char a1, __int64 a2)
; NtfsLoadSecurityDescriptor_fin_0(__int64 a1, __int64 a2)
; NtfsOffloadRead_fin_0(__int64 a1, __int64 a2)
; CreateAttributeList_fin_0(char a1, __int64 a2)
; TxfCreateAndAcquireFcb_fin_0(char a1, __int64 a2)
; TxfCreateAndAcquireFcb_fin_1(char a1, __int64 a2)
; NtfsRunIsClearOrSet_fin_0(char a1, __int64 a2)
; NtfsSetAndGetVolumeTimes_fin_0(__int64 a1, __int64 a2)
; NtfsCreateRootFcb_fin_0(char a1, __int64 a2)
; NtfsReadBootSector_fin_0(char a1, __int64 a2)
; NtfsOpenSystemFile_fin_0(char a1, __int64 a2)
; NtfsCreatePrerestartScb_fin_0(char a1, __int64 a2)
; NtfsUpdateCorruptionHandlingVolumeSetting_fin_0(char a1, __int64 a2)
; NtfsCreateDefaultTier_fin_0(char a1, __int64 a2)
; TxfCreateKtmResourceManagerObject_fin_0(char a1, __int64 a2)
; NtfsCommonSetVolumeInfo_fin_0(char a1, __int64 a2)
; NtfsSetFsLabelInfo_fin_0(__int64 a1, __int64 a2)
; NtOfsCreateIndex_fin_0(__int64 a1, __int64 a2)
; NtfsCreateCorruptLog_fin_0(__int64 a1, __int64 a2)
; NtOfsCreateAttributeEx_fin_0(__int64 a1, __int64 a2)
; TxfConvertRmPoliciesToClfsPolicies_filt_0(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4)
; TxfConvertRmPoliciesToClfsPolicies_fin_1(char a1, __int64 a2)
; TxfReadTopsMetadataStream_fin_0(char a1, __int64 a2)
; LfsReadNextLogRecord_fin_0(char a1, __int64 a2)
; OpenAttributeForRestart_fin_0(char a1, __int64 a2)
; LfsReadLogRecord_fin_0(__int64 a1, __int64 a2)
; LfsOpenLogFile_fin_0(char a1, __int64 a2)
; LfsReadRestartArea_fin_0(__int64 a1, __int64 a2)
; LfsReadRestart_fin_0(__int64 a1, __int64 a2)
; LfsCopyReadLogRecord_fin_0(__int64 a1, __int64 a2)
; TxfNewFileCreate_fin_0(char a1, __int64 a2)
; TxfCreateTxfRmcb_fin_0(char a1, __int64 a2)
; NtfsSetFcbSecurityFromDescriptor_fin_0(char a1, __int64 a2)
; TxfReadVersion_fin_0(char a1, __int64 a2)
; TxfSetAttrSize_fin_0(char a1, __int64 a2, __int64 a3)
; NtfsUpdateDynamicRegistrySettings_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; TxfTransDoNextRedo_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsSetBasicInfo_fin_0(char a1, __int64 a2)
; DoAction_filt_0(__int64 a1)
; NtfsSetupUsnJournal_fin_0(char a1, __int64 a2)
; NtfsSetupUsnJournal_filt_1(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsSetupUsnJournal_fin_2(char a1, __int64 a2)
; NtfsSetTPMap(__int64 a1, __int64 a2, __int64 a3, int a4)
; NtfsSetTPMap_fin_0(char a1, __int64 a2)
; NtfsCorruptLogDecideCorruptionBatch(__int64 a1, size_t a2, __int64 a3, unsigned __int64 a4, int a5, int a6)
; NtfsCorruptLogDecideCorruptionBatch_fin_0(char a1, __int64 a2)
; NtfsCorruptLogReadRecord(void *Dst, size_t Size, __int64 a3, __int64 a4, void *Dsta, size_t Sizea, __int64 a7, __int64 a8)
; NtfsCorruptLogReadRecord_fin_0(char a1, __int64 a2)
; NtfsDecideCorruption(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, char a7)
; NtfsDecideCorruption_fin_0(char a1, __int64 a2)
; NtfsSetSpotVerifyTimer(__int64 a1, __int64 a2, unsigned int a3, char a4, char a5)
; NtfsSetSpotVerifyTimer_fin_0(char a1, __int64 a2)
; NtfsCompleteCreateRequest(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NtfsPostProcessEncryptedCreate(__int64 a1, __int64 a2, int a3, int a4)
; NtfsSetupPagingFileEncryption(__int64 a1, __int64 a2, __int64 a3)
; NtfsReadFromPlex(__int64 a1, __int64 a2)
; NtfsReadFromPlex_fin_0(char a1, __int64 a2)
; NtfsSetSfioReservation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; NtfsSetSfioReservation_fin_0(char a1, __int64 a2)
; NtfsSetShortNameInfo@<rax>(int a1@<eax>, __int64 a2@<rdx>, __int64 a3@<rcx>, __int64 a4@<rbp>, __int64 a5@<r8>, __int64 a6@<r9>, __int64 a7, __int64 a8)
; NtfsSetShortNameInfo_fin_0(__int64 a1, __int64 a2)
; NtfsCreateUsnJournal@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; NtfsCreateUsnJournal_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; NtfsCreateUsnJournal_fin_1(char a1, __int64 a2)
; NtfsReadRawEncrypted(__int64 a1, __int64 a2)
; NtfsReadRawEncrypted_filt_3(unsigned int **a1, __int64 a2)
; NtfsReadRawEncrypted_filt_0(unsigned int **a1, __int64 a2)
; NtfsReadRawEncrypted_filt_1(unsigned int **a1, __int64 a2)
; NtfsReadRawEncrypted_fin_2(char a1, __int64 a2)
; NtfsSetBitmapBits(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5)
; NtfsSetBitmapBits_fin_0(__int64 a1, __int64 a2)
; NtfsSetBitmapBitsFromScb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6)
; NtfsSetBreakOnCorrupt(__int64 a1, __int64 a2, char a3)
; NtfsSetEncryption(__int64 a1, __int64 a2)
; NtfsSetEncryption_filt_2(unsigned int **a1, __int64 a2)
; NtfsSetEncryption_filt_0(unsigned int **a1, __int64 a2)
; NtfsSetEncryption_fin_1(__int64 i, __int64 a2)
; NtfsSetPersistentVolumeState@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, unsigned __int64 a3@<r13>)
; NtfsSetPersistentVolumeState_fin_0(char a1, __int64 a2)
; NtfsSetShortNameBehavior(__int64 a1, __int64 a2)
; NtfsSetShortNameBehavior_fin_0(char a1, __int64 a2)
; NtfsSetZeroOnDeallocate@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, signed __int64 a3@<r12>, unsigned __int64 a4@<r13>)
; NtfsSetZeroOnDeallocate_fin_0(__int64 a1, __int64 a2)
; NtfsUpdateShortNameCreationVolumeSetting@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, signed __int64 a3@<r12>, unsigned __int64 a4@<r13>)
; NtfsSetObjectId@<rax>(void *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r13>)
; NtfsSetObjectIdExtendedInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r12>, unsigned __int64 a4@<r13>)
; NtfsSetObjectIdExtendedInfoInternal@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, __int64 a4@<r9>, __int64 a5@<r12>, unsigned __int64 a6@<r13>)
; NtfsCommonSetQuota(__int64 a1, __int64 a2)
; NtfsCommonSetQuota_fin_0(char a1, __int64 a2)
; NtfsFsQuotaSetInfo(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NtfsSaveQuotaFlags(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r12>)
; NtfsSaveQuotaFlags_fin_0(char a1, __int64 a2)
; NtfsSaveQuotaFlagsSafe(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r12>)
; NtfsSaveQuotaFlagsSafe_fin_0(char a1, __int64 a2)
; OpenAttributesForRestart(__int64 a1, __int64 a2, __int64 a3)
; ReadRestartTable(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; ReadRestartTable_fin_0(char a1, __int64 a2)
; NtfsRepairSetFileNameFlags(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)
; TxfDoLogOldReparsePoint(__int64 a1)
; TxfSetShortNameInfo(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, signed __int64 a6, __int64 a7, char a8, __int64 a9)
; TxfSetShortNameInfo_fin_0(char a1, __int64 a2)
; TxfSetupForDeferredAbortPriv(__int64 a1, int a2, __int64 a3, __int64 a4)
; TxfSetupTransactionForAuditing(__int64 a1, __int64 a2)
; TxfCreateNewRMGuid(__int64 a1, __int64 a2)
; TxfCreateNewRMGuid_filt_0(unsigned int **a1, __int64 a2, __int64 a3, __int64 a4)
; TxfFsctlCreateSecondaryRm(__int64 a1, __int64 a2, __int64 a3)
; TxfFsctlCreateSecondaryRm_fin_0(char a1, __int64 a2)
; TxfFsctlReadBackupInformation(__int64 a1, __int64 a2, unsigned int a3, void *a4, __int64 a5)
; TxfFsctlReadBackupInformation_fin_0(char a1, __int64 a2)
; TxfFsctlSavepoint@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, unsigned int a4@<r8d>, __int64 *a5@<r9>, unsigned int a6, __int64 *a7, __int64 a8)
; TxfFsctlSavepoint_fin_0(__int64 a1, __int64 a2)
; TxfComputeChildOpenResultCode(int a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TxfOpenByNameInParentWithHandleCache(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; TxfOpenByNameInParentWithHandleCache_fin_0(char a1, __int64 a2)
; TxfOpenFileCheckId@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, PVOID *a4@<r9>, unsigned __int64 r13_0@<r13>, __int64 a5, char a6, char a7, __int64 a8, __int64 a9, __int64 a10)
; TxfOpenFileCheckId_fin_0(char a1, __int64 a2)
; TxfOpenFileCheckIdNoncached(__int64 a1, __int64 a2, __int64 a3, PVOID *a4, __int64 a5, HANDLE *a6, PVOID *a7)
; TxfOpenFileCheckIdNoncached_fin_0(char a1, __int64 a2)
; TxfOpenNamedAttribute@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, PVOID *a3@<r8>, __int16 a4@<r9w>, unsigned __int64 r13_0@<r13>, HANDLE *a5, PVOID *a6)
; TxfOpenNamedAttribute_fin_0(__int64 a1, __int64 a2)
; TxfDoWriteFileLogging@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, unsigned __int64 a7, __int64 a8, int a9, int a10)
; TxfDoWriteFileLogging_fin_0(char a1, __int64 a2)
; TxfOpenByNameInParentWithHandle@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 r13_0@<r13>, __int64 a5, __int64 a6, HANDLE *a7, PVOID *a8)
; TxfReadFileNonCached(__int64 a1, __int64 a2, ULONG Length, PVOID VirtualAddress)
; TxfReadFileNonCached_fin_0(char a1, __int64 a2)
; TxfClearAllSavepoints(__int64 a1)
; TxfClearAllSavepoints_fin_0(char a1, __int64 a2)
; TxfClearSavepoint(__int64 a1)
; TxfClearSavepoint_fin_0(char a1, __int64 a2)
; TxfCopyDataRange(__int64 a1, __int64 a2, __int64 a3, signed __int64 *a4, unsigned int a5)
; TxfCopyDataRange_fin_0(char a1, __int64 a2)
; TxfDoAddRemoveNameOnAbortRecoveryCheck(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, char a10, __int64 a11)
; TxfDoAddRemoveNameWork(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, size_t a11)
; TxfDoAddRemoveNameWork_fin_0(char a1, __int64 a2)
; TxfDoModifySecurityWork@<al>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, char a4@<r9b>, __int64 r13_0@<r13>, __int64 a5)
; TxfDoModifySecurityWork_fin_0(__int64 a1, __int64 a2)
; TxfDoSetShortNameWork@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, unsigned __int8 a5@<r9b>, unsigned __int64 r13_0@<r13>, __int64 a6, __int64 a7, HANDLE *a8)
; TxfDoSetShortNameWork_fin_0(char a1, __int64 a2)
; TxfDoStdInfoLoggingForExpiredHandles(__int64 a1, __int64 a2)
; TxfDoStdInfoLoggingForExpiredHandles_fin_0(char a1, __int64 a2)
; TxfPublishCommittedChangesToDefaultReaderSection(__int64 a1, __int64 a2)
; TxfPublishCommittedChangesToDefaultReaderSection_fin_0(char a1, __int64 a2)
; TxfRedoCreateAttr(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TxfRedoCreateAttr_fin_0(__int64 a1, __int64 a2)
; TxfRedoCreateBackupFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TxfRedoCreateBackupFile_fin_0(char a1, __int64 a2)
; TxfRedoCreateNewFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TxfRedoCreateNewFile_fin_0(char a1, __int64 a2)
; TxfRollbackToSavepoint@<rax>(unsigned int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; TxfRollbackToSavepoint_fin_0(char a1, __int64 a2)
; TxfSetSavepoint(__int64 a1, __int64 a2)
; TxfSetSavepoint_fin_0(char a1, __int64 a2)
; TxfTransDoNextUndo@<rax>(unsigned __int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; TxfTransDoNextUndo_filt_0(signed int **a1, __int64 a2, __int64 a3, __int64 a4)
; TxfTransSetAttrSizes(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, int a8)
; TxfTransSetAttrSizes_fin_0(char a1, __int64 a2)
; TxfUndoCreateAttr@<al>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, char a5@<r9b>, signed __int64 r12_0@<r12>, __int64 a6, __int64 a7)
; TxfUndoCreateAttr_fin_0(__int64 a1, __int64 a2)
; TxfUndoCreateBackupFile(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; TxfUndoCreateNewFile(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, HANDLE *a8, __int64 a9)
; NtfsSetVcbDirtyFlag(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, unsigned int a4@<r9d>, unsigned __int64 a5@<r13>, char a6, unsigned __int16 a7)
; SetKeyTable(__int64 a1, __int64 a2)
; EfsOpenFile(__int64 a1, unsigned __int64 a2, __int64 a3, int a4, int a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10)
; EfsOpenFile_fin_1(unsigned __int8 a1, __int64 a2)
; EfsOpenFile_fin_2(unsigned __int8 a1, __int64 a2)
; EfsOpenFile_fin_0(unsigned __int8 a1, __int64 a2)
; EfsFilePostCreate(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3, signed int a4, __int64 a5)
; EfspPostCreate(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3, __int64 a4)
; EfspPostCreateGetUserInformation(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; EfspPostCreateImpersonateAndGetData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; EfspPostCreatePrepareAndSendFsctl(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3, int *a4, __int64 a5, __int64 a6, __m128i *a7)
; EfsDecryptFile@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, signed __int64 a3@<r12>, unsigned __int64 a4@<r13>)
; EfsDecryptStream@<rax>(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 a5@<r13>)
; EfsReadEfsData@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, __int64 a4@<r9>, unsigned __int64 a5@<r13>, __int64 a6)
; EfsReadEfsData_fin_0(__int64 a1, __int64 a2)
; EfsSetEncrypt@<rax>(char a1@<dl>, __int64 a2@<rcx>, __int64 a3@<r8>, __int64 a4@<r9>, signed __int64 a5@<r12>, unsigned __int64 a6@<r13>, __int64 a7)
; EfspCopyAesKeyBlob(void *Dst, __int64 a2)
; EfspCopyEfsKeyBlob(__int64 a1, __int64 a2)
; SetEfsData(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, __int64 *a5)
; SetEfsData_fin_0(char a1, __int64 a2)
; EfsDecryptFekClient_filt_0(__int64 a1)
; EfsDecryptFekClient_filt_1(__int64 a1)
; FsLibRangeTrackCopyRanges(__int64 a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\null.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvhda64v.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvkflt.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvpciflt.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvraid.c ;
; NvRaidApiCreateArray(__int64 a1, int a2, int a3, char a4, __int64 a5)
; NvRaidApiCreateVolume(__int64 a1, __int64 a2)
; NvRaidExtendValueSet(__int64 a1, unsigned int a2, __int64 a3)
; NvRaidPacketSetupSubRequestsDevice(__int64 a1, __int64 a2)
; NvRaidPacketScatterGatherGroupCopy(__int64 a1, int a2, __int64 a3, int a4, int a5)
; NvRaidStateSubRequestsDone(__int64 a1, __int64 a2)
; NvRaidScsiSetupReadWrite(__int64 a1, char a2, __int64 a3, __int64 a4, unsigned __int8 a5, __int64 a6, int a7)
; NvRaidScsiConvertToUnitedCDB(__int64 a1)
; NvRaidParitySequentialReqsDone(__int64 a1, __int64 a2)
; NvRaidParitySubRequestsWaitRead(__int64 a1, __int64 a2)
; nvrReadWriteVerification(__int64 a1, __int64 a2)
; nvrOsCheckPoweredDownFdo(__int64 a1)
; nvrCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; nvrScsiPortCreateClose(__int64 a1, __int64 a2)
; nvrDiskDumpOpen(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvstor.c ;
; NvStorProtocolSetupSmart(__int64 a1, __int64 a2, __int64 a3)
; NvStorSataSetupCommand(__int64 a1)
; NvStorSataControllerIsReady(__int64 a1)
; NvStorSataDeviceIsReady(__int64 *a1)
; NvStorSataSetProtocol(__int64 *a1, int a2)
; NvStorSataSetupTaskFile(__int64 a1, __int64 a2)
; NvStorSataCrashDumpReadLogExt(__int64 a1, char a2)
; NvStorSataSetupFeatureRequest(__int64 a1, __int64 a2)
; NvStorSataControllerSetQueueDepth(__int64 a1)
; NvStorAhciControllerIsReady(__int64 a1)
; NvStorAhciDeviceIsReady(__int64 a1)
; NvStorAhciControllerCfgSetup(__int64 a1)
; *__fastcall NvStorAhciSetupSmartReq(__int64 a1))(__int64 a1, __int64 a2)
; NvStorAhciSetupTaskFile(__int64 a1, __int64 a2)
; NvStorAhciSetupFeatureRequest(__int64 a1, __int64 a2)
; NvCfgEntityCreate(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; NvCfgEntityObserverCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; NvCfgElementSetStringType(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NvCfgElementSet(__int64 a1, __int64 a2, char a3, __int64 a4, unsigned int a5)
; NvStorWriteDeviceSettings(__int64 a1)
; NvStorPortReadU8(__int64 a1, unsigned __int16 a2)
; NvStorPortReadU16(__int64 a1, unsigned __int16 a2)
; NvStorPortReadU32(__int64 a1, unsigned __int16 a2)
; NvStorPortReadBufferU8(__int64 a1, unsigned __int16 a2, unsigned __int8 *a3, unsigned int a4)
; NvStorPortReadBufferU16(__int64 a1, unsigned __int16 a2, unsigned __int16 *a3, unsigned int a4)
; NvStorPortReadBufferU32(__int64 a1, unsigned __int16 a2, unsigned int *a3, unsigned int a4)
; NvStorRegisterReadU8(__int64 a1, __int64 a2)
; NvStorRegisterReadU16(__int64 a1, __int64 a2)
; NvStorRegisterReadU32(__int64 a1, __int64 a2)
; NvStorRegisterReadBufferU8(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NvStorRegisterReadBufferU16(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NvStorRegisterReadBufferU32(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; NvStorPciConfigRead(__int64 a1)
; NvStorPciConfigReadU32(__int64 a1, unsigned int a2, __int64 a3)
; NvStorPciConfigReadU16(__int64 a1, unsigned int a2, __int64 a3)
; NvStorPciConfigReadU8(__int64 a1, unsigned int a2, __int64 a3)
; NvStorSetSrbStatus(__int64 a1, __int64 a2)
; NvStorReqSetupRequest(__int64 a1, __int64 a2, __int64 a3)
; NvStorDbgSet(__int64 a1, int a2, __int64 a3, int a4, int a5, int a6)
; NvStorMemCopy(void *a1, const void *a2, unsigned int a3)
; NvStorCrashDumpOpen(__int64 a1, __int64 a2)
; NvStorSataCrashDumpOpen(__int64 a1, __int64 a2, char a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nvvad64v.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\NV_AGP.c ;
; PCIReadConfig(unsigned int a1, unsigned __int8 a2)
; NVAGPSetup(__int64 a1)
; AgpSetAperture(__int64 a1, __int64 a2, unsigned int a3)
; AgpSetRate(__int64 a1, unsigned int a2)
; AgpNVSetupIORR(__int64 a1, unsigned __int64 a2)
; HALSetApertureInfo_Crush1X(__int64 a1)
; HALSetupAperture_Crush1X(__int64 a1)
; HALSetupGARTDirectory_Crush1X(__int64 a1)
; HALSetPTE_Crush1X(__int64 a1, unsigned int a2, int a3, char a4, __int16 a5)
; HALStateSave_Crush1X(__int64 a1)
; HALSetApertureInfo_CrushK8(__int64 a1)
; HALSetupAperture_CrushK8(__int64 a1)
; HALSetupGARTDirectory_CrushK8(__int64 a1)
; HALSetPTE_CrushK8(__int64 a1, unsigned int a2, unsigned int a3, char a4, char a5)
; HALStateSave_CrushK8(__int64 a1)
; HostHALSetupAperture_K8(__int64 a1)
; HostHALSetupGARTDirectory_K8(__int64 a1)
; HostHALStateSave_K8(__int64 a1)
; HostHALSetupAperture_Astro(__int64 a1)
; HostHALSetupGARTDirectory_Astro(__int64 a1)
; HostHALStateSave_Astro(__int64 a1)
; ApGetSetDeviceBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; ApGetSetBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; AgpLibSetAgpCapability(int (__fastcall *a1)(_QWORD, _QWORD, _QWORD, _QWORD), __int64 a2, __int64 a3)
; ApSetTargetCapability(__int64 a1, __int64 a2)
; ApLegacySetBusData(__int64 a1, __int64 a2, __int64 a3)
; AgpVerifierSetTargetCapability(__int64 a1, __int64 a2)
; AgpSetEventCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; AgpOpenKey(PCWSTR SourceString, void *a2, HANDLE *a3, __int64 a4)
; AgpInterfaceSetRate(__int64 a1, int a2)
; AgpSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\nwifi.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pacer.c ;
; PcpFilterDecrementDetachCount(__int64 a1)
; QosTimerConvertPerformanceCounterToMicroseconds(__int64 a1, __int64 a2)
; QosFlowCreate(void *a1)
; PcpCreateFlow(__int64 a1, char a2, int a3, __int64 a4)
; PcQoSPCreateFlowPrivate(__int64 a1)
; PcpMrkSetMarkingValues(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5)
; QosUtilSetTokenSpec(__int64 a1, __int64 a2, char a3)
; PcpCreateFlowInstanceName(__int64 a1)
; PcpOidSet(__int64 a1, __int64 a2, __int64 a3, NDIS_STATUS a4)
; PcpLineCreate(__int64 a1, __int64 a2, char a3, unsigned __int16 a4, unsigned __int16 a5, int a6, int a7, int a8, int a9)
; QosLineCreate(void *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; PcpFilterStatusWanLineDown(__int64 a1, __int64 a2)
; PcpFilterDecrementIntercept(int a1)
; PcpFilterDecrementPauseCount(__int64 a1, int a2)
; PcFilterSetModuleOptions(__int64 a1)
; PcFilterSetOptions(__int64 a1)
; PcpCounterSetCallback(int a1, __int64 a2, __int64 a3)
; PcpConvertToInstanceName(__int64 a1)
; RtlAcquireReadLock(__int64 a1, __int64 a2)
; RtlAcquireReadLockAtDpcLevel(__int64 a1)
; PcpCreateFileHandle(__int64 a1)
; PcpSetFlowTimer(__int64 a1, __int64 a2, __int64 a3)
; PcpSetTimer(__int64 a1, __int64 a2, unsigned __int64 a3)
; PcQoSPConfigureGlobalSetting(__int64 a1)
; PcQoSPCopyFlow(__int64 a1)
; PcQoSPCreateFlow(__int64 a1)
; PcQuerySetMiniport(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, int a5)
; AddPacerPipeCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PcpCreateHoldHandleWorkerRoutine(__int64 a1, __int64 a2, struct _IO_WORKITEM *a3)
; PcpReadSettings(__int64 a1, __int64 a2)
; PcpReadRegistryUlong(NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, __int64 a3, unsigned int a4)
; PcpCreateWfpFilterConditionList(__int16 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; AddPacerFlowCounterSet(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\parport.c ;
; P4ReadRawIeee1284DeviceId(__int16 a1, __int64 a2)
; PptSynchronizedDecrement(PVOID SynchronizeContext)
; PptSynchronizedRead(PVOID SynchronizeContext)
; PptBecpRead(__int64 a1, unsigned __int8 *a2, unsigned int a3, __int64 a4)
; ParByteModeRead(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; PptDetectEppPortIfDot3DevicePresent(__int64 SynchronizeContext)
; PptSetByteMode(__int64 a1, unsigned __int8 a2)
; PptSetChipMode(__int64 a1, unsigned __int8 a2)
; ParDot3Connect(__int64 a1)
; ParDot3CreateObject(__int64 a1, __int64 a2, __int64 a3)
; ParDot3Disconnect(__int64 a1)
; ParDot3ParseModes(__int64 a1, __int64 a2)
; ParDot3Read(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; ParDot3Write(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; ParDot4CreateObject(__int64 a1, __int64 a2)
; PptDispatchCreateOpen(__int64 a1, __int64 a2)
; PptDispatchRead(__int64 a1, __int64 a2)
; PptDispatchSetInformation(__int64 a1, __int64 a2)
; ParEcpHaveReadData(__int64 a1)
; ParEcpSetupPhase(__int64 a1)
; ParEppSetAddress(__int64 a1, unsigned __int8 a2)
; PptFdoCreateOpen(__int64 a1, __int64 a2)
; P5FdoCreateThread(void *a1)
; ParEcpHwRead(__int64 a1, unsigned __int8 *a2, unsigned int a3, __int64 a4)
; ParEcpHwSetAddress(__int64 a1, char a2)
; ParEcpHwSetupPhase(__int64 a1)
; PptEcpHwHaveReadData(__int64 a1)
; ParEppHwRead(__int64 a1, unsigned int *a2, unsigned int a3, __int64 a4)
; PptLegacyZipSetDiskMode(unsigned __int16 a1, unsigned __int8 a2)
; ParNibbleModeRead(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; PptPdoCreateOpen(__int64 a1, __int64 a2)
; PptPdoSetInformation(__int64 a1, __int64 a2)
; P4CreatePdo(__int64 a1, int a2, __int64 a3, void *a4)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; Queue_Create(__int64 a1, int a2)
; ParHaveReadData(__int64 a1)
; ParRead(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; ParSetFwdAddress(__int64 a1)
; PptPdoReadWrite(__int64 a1, __int64 a2)
; PptRegSetDeviceParameterDword(struct _DEVICE_OBJECT *a1, const WCHAR *a2, void *a3)
; ParStlEPPRead(__int64 a1)
; ParStlHIFDCheckIfControllerReady(__int64 a1)
; ParStlReadIoPort(__int64 a1, int a2)
; ParStlReadReg(__int64 a1, unsigned __int8 a2)
; ParStlSet16BitOperation(__int64 a1)
; ParStlSetEPPMode(__int64 a1)
; ParEcpSetAddress(__int64 a1, char a2)
; ParEcpSwRead(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; ParIsEcpSwReadSupported(__int64 a1)
; ParEppSwRead(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; P4NibbleModeRead(__int16 a1, __int64 a2, int a3, __int64 a4, int *a5)
; ParCreateSystemThread(void *a1)
; ParDetectDot3DataLink(__int64 a1, void *a2)
; ParDot3ParseDevId(__int64 a1, void *Source1, __int64 a3, __int64 a4, __int64 a5, void *Source1a)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\partmgr.c ;
; PmDecrementPendingPartitionsCount(__int64 a1, int a2)
; PmSetDiskAttributes(__int64 a1, __int64 a2, int a3)
; PmSetPartitionFlags(__int64 a1, __int64 a2)
; PmSetVolumeManagerAltitude(__int64 a1)
; PmAreVolumesReadyCancelRoutine(__int64 a1, __int64 a2)
; PmIoctlAreVolumesReady(__int64 a1, __int64 a2)
; PmSetPartitionAttributesMbr(__int64 a1, __int64 a2)
; PmSetSnapshotData(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; PmIoctlManageDataSetAttributes(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PmReadSnapshotData(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PmReadPartitionAttributesMbr(__int64 a1, __int64 a2, __int64 a3)
; PartitionIoctlSetPartitionInfo(__int64 a1, __int64 a2)
; PmSetPartitionInformationEx(__int64 a1, __int64 a2)
; PmSetSystemCriticalFlag(__int64 a1)
; PmIoctlSetDiskAttributes(__int64 a1, __int64 a2, __int64 a3)
; PmCreatePartition(__int64 a1, __int64 a2)
; PmSetInitialDiskAttributes(__int64 a1)
; PartitionIoctlSetPartitionAttributes(__int64 a1, __int64 a2)
; PartitionIoctlSetPartitionInfoEx(__int64 a1, __int64 a2)
; PmIoctlCreateDisk(__int64 a1, __int64 a2)
; PmIoctlGetSanSettings(__int64 a1, __int64 a2)
; PmIoctlSetClusterInfo(__int64 a1, __int64 a2)
; PmIoctlSetDriveLayout(__int64 a1, __int64 a2)
; PmIoctlSetDriveLayoutEx(__int64 a1, __int64 a2)
; PmIoctlSetSanSettings(__int64 a1, __int64 a2)
; PmIoctlSetSnapshotInfo(__int64 a1, __int64 a2)
; PmCreate(__int64 a1, __int64 a2)
; PmSetDeviceParameter(__int64 a1, void *a2, int a3)
; PmCreateDisk(__int64 a1)
; PmSetDriveLayoutEx(__int64 a1, __int64 a2)
; PmCreateSnapshotPartition(__int64 a1)
; PmSetSnapshotInfo(__int64 a1, __int64 a2)
; PmQueryGlobalSettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pci.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pciide.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pciidex.c ;
; AtaPortReadPortUchar(unsigned __int16 a1)
; AtaPortReadPortUshort(unsigned __int16 a1)
; AtaPortReadPortUlong(unsigned __int16 a1)
; AtaPortReadPortBufferUchar(unsigned __int16 a1, unsigned __int8 *a2, unsigned int a3)
; AtaPortReadPortBufferUshort(unsigned __int16 a1, unsigned __int16 *a2, unsigned int a3)
; AtaPortReadPortBufferUlong(unsigned __int16 a1, unsigned int *a2, unsigned int a3)
; AtaPortReadRegisterUchar(__int64 a1)
; AtaPortReadRegisterUshort(__int64 a1)
; AtaPortReadRegisterUlong(__int64 a1)
; AtaPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; AtaPortConvertUlongToPhysicalAddress(__int64 a1)
; AtaPortConvertPhysicalAddressToUlong(unsigned int a1)
; AtaPortRegistryRead(__int64 a1, char a2, char a3, __int64 a4, char a5, __int64 a6, __int64 a7)
; PciIdeXSetBusData(SIZE_T NumberOfBytes, __int64 a2, __int64 a3, unsigned int a4, unsigned int NumberOfBytesa)
; AtaPortSetBusData(__int64 a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pcmcia.c ;
; CBReadCardMemory(__int64 a1, int a2, unsigned int a3, __int64 a4)
; CBSetPower(__int64 a1, char a2, __int64 a3)
; CBSetWindowPage(__int64 a1, char a2, unsigned __int8 a3)
; CBReadSocketRegister(__int64 a1, unsigned __int8 a2)
; CLSetPower(__int64 a1, char a2, __int64 a3)
; CLSetZV(__int64 a1, char a2)
; DBSetZV(__int64 a1, char a2)
; PcmciaSetPowerFromConfigData(PVOID DeferredContext, __int64 a2)
; PcmciaSetFdoSystemPowerState(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; PcmciaFdoSaveControllerContext(__int64 a1)
; PcmciaFdoSaveSocketContext(__int64 a1)
; PcmciaReadCardMemory(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, int a5)
; PcmciaSetVpp(__int64 a1)
; O2MSetPower(__int64 a1, char a2, __int64 a3)
; O2MSetZV(__int64 a1, char a2)
; OptiSetPower(__int64 a1, char a2, __int64 a3)
; OptiSetZV(__int64 a1, char a2)
; PcicSetPower(__int64 a1, char a2, __int64 a3)
; PcicSetVpp(__int64 a1)
; PcicReadSocket(__int64 a1, unsigned int a2)
; PcicReadController(unsigned __int16 a1, char a2, char a3)
; PcicReadWriteCardMemory(__int64 a1, int a2, int a3, __int64 a4, unsigned int a5, char a6)
; PcicReadWriteCardMemoryIndirect(__int64 a1, int a2, int a3, __int64 a4, unsigned int a5, char a6)
; PcicReadCardMemory(__int64 a1, int a2, int a3, __int64 a4, unsigned int a5)
; PcicDetectReadyChanged(__int64 a1)
; PcicPCCardReady(__int64 a1)
; PcmciaSetPdoPowerState(__int64 a1, __int64 a2)
; PcmciaSetPdoDevicePowerState(__int64 a1, __int64 a2)
; RicohSetZV(__int64 a1, char a2)
; PcmciaSetSocketPower(PVOID DeferredContext, __int64 a2, __int64 a3, char a4)
; PcmciaReadWriteCardMemory(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, int a5, char a6)
; PcmciaSocketDeconfigure(__int64 a1)
; TcicSetPower(__int64 a1, char a2, __int64 a3)
; TcicReadBaseReg(__int64 a1, unsigned int a2)
; TcicReadAddrReg(__int64 a1)
; TcicReadAuxReg(__int64 a1)
; TcicReadCardMemory(__int64 a1, int a2, unsigned int a3, __int64 a4, unsigned int a5)
; TcicPCCardReady(__int64 a1)
; TcicSetIoWin(__int64 a1, __int16 a2, __int16 a3, int a4, char a5)
; TcicSetMemWin(__int64 a1, __int16 a2, unsigned int a3, unsigned int a4, unsigned int a5, char a6, char a7, char a8)
; TISetZV(__int64 a1, char a2)
; TISetWindowPage(__int64 a1, char a2, unsigned __int8 a3)
; TopicSetPower(__int64 a1, char a2, __int64 a3)
; TopicSetAudio(__int64 a1, char a2)
; TopicSetZV(__int64 a1, char a2)
; PcmciaCreateFdo(PDRIVER_OBJECT DriverObject, __int64 a2)
; PcmciaSetControllerType(__int64 a1, int a2)
; PcmciaCreatePdo(__int64 a1, __int64 a2, PDEVICE_OBJECT *a3)
; PcmciaOpenCloseDispatch(__int64 a1, __int64 a2)
; PcmciaPdoGetDeviceInfSettings(__int64 a1)
; PcmciaGetControllerRegistrySettings(__int64 a1)
; TcicSetMemWindow(__int64 a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pcw.c ;
; PcwpAddItemToCounterSet(__int64 a1, __int64 a2)
; PcwpRemoveItemFromCounterSet(__int64 a1, __int64 a2)
; PcwpCreateQueryItem(__int64 a1, __int64 a2, char a3, const UNICODE_STRING *a4, __int64 a5, PVOID P, __int64 a7, __int64 a8, __int64 Pa)
; PcwpDispatchCreate(__int64 a1, __int64 a2)
; PcwpIoctlCreateQuery(void **a1, __int64 a2, __int64 a3, __int64 a4)
; PcwpIoctlSetSecurity(__int64 a1)
; PcwpIoctlReadNotificationData(void **a1, __int64 a2, __int64 a3)
; PcwpIoctlCreateNotifier(__int64 a1, __int64 a2)
; PcwpReadInFlightNotificationBuffer(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; PcwpCopyToNotificationBuffer(__int64 a1, __int64 a2, __int64 a3)
; PcwpCreateNotifier(__int64 a1, const UNICODE_STRING *a2, __int64 a3)
; PcwpCreateUserRegistration(const UNICODE_STRING *a1, __m128i *a2, __int64 a3)
; PcwpOpenObject(int a1)
; PcwpCreateObject(__int64 a1, __int64 a2, int a3, __int64 a4)
; PcwpDereferenceCounterSet(__int64 a1)
; PcwpFindCounterSet(PCUNICODE_STRING String1)
; PcwpCreateCounterSet(__int64 a1, const UNICODE_STRING *a2)
; PcwpOpenCounterSet(__int64 a1, const UNICODE_STRING *a2, ACCESS_MASK a3)
; PcwpCreateRegistration(__int64 a1, const UNICODE_STRING *a2, unsigned int a3, const void *a4, __int64 a5, __int64 a6)
; PcwpNotifyCounterSet(__int64 a1, unsigned int a2, __int64 a3)
; PcwCreateInstance(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; PcwpCreateAllowedDacl(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; PcwpCreateDefaultSecurityDescriptor(__int64 a1)
; PcwpReadSecurityDescriptor(__int64 a1, UNICODE_STRING *a2)
; PcwpGetCounterSetSecurityDescriptor(const UNICODE_STRING *a1, int a2, __int64 a3, __int64 a4)
; PcwpSetCounterSetSecurityDescriptor(const UNICODE_STRING *a1, int a2, __int64 a3)
; PcwpClearCounterSetSecurityDescriptor(const UNICODE_STRING *a1)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\pdc.c ;
; PdcCsSetTarget(char a1)
; PdcSetPowerSettingValue(__int64 a1)
; PdcpAcDcSettingCallback(__int64 a1, __int64 a2, int a3)
; PdcpSetActivatorWatchdog(__int64 a1)
; PdcpSetActivatorsWatchdog(char a1)
; PdcConvertQpcDuration(unsigned __int64 a1)
; PdcSetCurrentCsState(int a1)
; PdcpSetButtonAction(__int64 a1, int a2)
; PdcpPowerButtonSettingCallback(__int64 a1, unsigned int *a2, int a3)
; PdcpConsoleSettingCallback(__int64 a1, __int64 a2, int a3)
; PdcpSpmOpenRegistryKey(PHANDLE KeyHandle, __int64 a2, __int64 a3, __int64 a4, HANDLE *KeyHandlea)
; PdcPortOpen(int a1, int a2, __int64 a3, __int64 a4, __int64 a5)
; PdcpSpmReadDependenciesFromQueryTable(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\PEAuth.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\portcls.c ;
; CPortWavePci::SetIdlePowerManagement(CPortWavePci *this, struct _DEVICE_OBJECT *a2, char a3)
; iSetIdlePowerManagement(struct _DEVICE_OBJECT *a1, char a2)
; CDmaChannel::CopyTo(CDmaChannel *this, void *a2, void *a3, unsigned int a4)
; CIrpStream::SetPacketOffsets(__int64 a1, unsigned int a2, unsigned int a3)
; CSequencerMXF::SetSchedulePreFetch(CSequencerMXF *this, __int64 a2)
; CDmaChannel::CopyFrom(CDmaChannel *this, void *a2, void *a3)
; CDmaChannel::SetBufferSize(CDmaChannel *this, unsigned int a2)
; CIrpStream::Copy(CIrpStream *this, char a2, unsigned int a3, unsigned __int32 *a4, void *a5)
; CIrpStream::SetPacketOffsets(CIrpStream *this, unsigned int a2, unsigned int a3)
; PcSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, unsigned int a3)
; PcSetWmiDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2, unsigned int a3)
; RtlStringCbCopyW(unsigned __int16 *a1, unsigned __int64 a2, const unsigned __int16 *a3)
; PcValidateSetStreamDegradation(struct _IRP *a1, struct KSIDENTIFIER *a2, struct KSMULTIPLE_ITEM *a3)
; CPortPinWaveCyclic::Copy(CPortPinWaveCyclic *this, char a2, unsigned int a3, unsigned __int32 *a4, void *a5)
; CPortPinWaveCyclic::SetDeviceState(CPortPinWaveCyclic *this, enum KSSTATE a2, enum KSSTATE a3, struct IKsShellTransport **a4)
; CPortClockWaveCyclic::SetState(CPortClockWaveCyclic *this, enum KSSTATE a2)
; CPortPinWavePci::SetDeviceState(CPortPinWavePci *this, enum KSSTATE a2, enum KSSTATE a3, struct IKsShellTransport **a4)
; CPortPinWavePci::SetPreFetchOffset(CPortPinWavePci *this, int a2)
; CPortClockWavePci::SetState(CPortClockWavePci *this, enum KSSTATE a2)
; DeferredLegacyRead(struct IInterruptSync *a1, void *a2)
; CMiniportMidiStreamUart::Read(CMiniportMidiStreamUart *this, void *a2, int a3, unsigned __int32 *a4)
; KsoDispatchCreate(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp)
; xDispatchCreate(struct IIrpTargetFactory *a1, struct _DEVICE_OBJECT *a2, struct _IRP *a3)
; KsoDispatchCreateWithGenericFactory(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; SystemPowerDownWorkerInternal(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; PcPowerSettingCallback(const struct _GUID *a1, void *a2, int a3, void *a4)
; SetRuntimePowerIdleTimeout(struct DEVICE_CONTEXT *a1, __int64 a2)
; CreatePortWaveCyclic(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreatePortTopology(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; PcCreateSubdeviceDescriptor(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, int a6, __int64 a7, int a8, int a9, int a10, __int64 a11, int a12, __int64 a13, __int64 a14)
; CreateResourceList(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; CreatePortWaveRT(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CIrpStream::SetDeviceState(__int64 a1, enum KSSTATE a2, __int64 a3, struct IKsShellTransport **a4)
; CIrpStream::SetResetState(__int64 a1, enum KSRESET a2, struct IKsShellTransport **a3)
; CCaptureSinkMXF::SetState(CCaptureSinkMXF *this, enum KSSTATE a2)
; CreateDmaChannel(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreateIrpStream(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CIrpStream::SetDeviceState(CIrpStream *this, enum KSSTATE a2, __int64 a3, struct IKsShellTransport **a4)
; CIrpStream::SetResetState(CIrpStream *this, enum KSRESET a2, struct IKsShellTransport **a3)
; DispatchCreate(PDEVICE_OBJECT DeviceObject, struct _IRP *a2)
; DispatchFastRead(struct _FILE_OBJECT *a1, union _LARGE_INTEGER *a2, unsigned int a3, __int64 a4, unsigned __int32 a5, void *a6, struct _IO_STATUS_BLOCK *a7, struct _DEVICE_OBJECT *a8)
; DispatchRead(PDEVICE_OBJECT DeviceObject, struct _IRP *a2)
; DispatchSetSecurity(PDEVICE_OBJECT DeviceObject, struct _IRP *a2)
; SystemPowerDownWorker(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; CRegistryKey::SetValueKey(CRegistryKey *this, struct _UNICODE_STRING *a2, ULONG a3, void *a4, unsigned __int32 a5)
; CreateServiceGroup(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreateInterruptSync(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CPortWavePci::CreateContentMixed(CPortWavePci *this, unsigned __int32 *a2, unsigned int a3, unsigned __int32 *a4)
; CreatePortDMus(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreatePortMidi(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CPortPinDMus::CreateMXFs(CPortPinDMus *this)
; CreatePortPinDMus(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CPortPinDMus::SetDeviceState(CPortPinDMus *this, enum KSSTATE a2, enum KSSTATE a3, struct IKsShellTransport **a4)
; CPortPinDMus::SetMXFGraphState(CPortPinDMus *this, enum KSSTATE a2)
; CPortPinDMus::SetResetState(CPortPinDMus *this, enum KSRESET a2, struct IKsShellTransport **a3)
; CPackerMXF::SetState(CPackerMXF *this, enum KSSTATE a2)
; CFeederInMXF::SetState(CFeederInMXF *this, enum KSSTATE a2)
; CUnpackerMXF::SetState(CUnpackerMXF *this, enum KSSTATE a2)
; CFeederOutMXF::SetState(CFeederOutMXF *this, enum KSSTATE a2)
; CreatePortPinTopology(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreatePortPinWaveCyclic(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; PinPropertySetContentId(__int64 a1, __int64 a2, __int64 a3)
; CPortPinWaveCyclic::SetResetState(CPortPinWaveCyclic *this, enum KSRESET a2, struct IKsShellTransport **a3)
; CPortPinWaveCyclic::SynchronizedSetFormat(CPortPinWaveCyclic *this, PVOID P)
; CPortClockWavePci::SetSecurity(CPortClockWavePci *this, struct _DEVICE_OBJECT *a2, struct _IRP *a3)
; CreatePortClockWaveCyclic(__int64 PoolType, struct IPortPinWaveCyclic *a2, const struct _GUID *a3, struct IUnknown *a4, enum _POOL_TYPE PoolTypea)
; CreatePortWavePci(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CreatePortPinWavePci(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; PinPropertySetContentId_0(__int64 a1, __int64 a2, __int64 a3)
; CPortPinWavePci::SetResetState(CPortPinWavePci *this, enum KSRESET a2, struct IKsShellTransport **a3)
; CreatePortClockWavePci(__int64 PoolType, struct IPortPinWavePci *a2, const struct _GUID *a3, struct IUnknown *a4, enum _POOL_TYPE PoolTypea)
; CPortFilterWaveRT::AllocatorDispatchCreate(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; PinPropertySetContentId_1(__int64 a1, __int64 a2, __int64 a3)
; CreateMiniportDMusUART(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CMiniportDMusUARTStream::SetState(CMiniportDMusUARTStream *this, enum KSSTATE a2)
; CMiniportDMusUART::SetTechnology(CMiniportDMusUART *this, const struct _GUID *a2)
; CreateMiniportMidiUart(struct IUnknown **a1, const struct _GUID *a2, struct IUnknown *a3, enum _POOL_TYPE a4)
; CMiniportMidiStreamUart::SetState(CMiniportMidiStreamUart *this, enum KSSTATE a2)
; CMiniportMidiUart::SetTechnology(CMiniportMidiUart *this, const struct _GUID *a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\processr.c ;
; EvtDeviceSetPower(__int64 a1, __int64 a2)
; ProcLibTraceCStateDomainRundown(__int64 a1)
; ProcLibTracePStateDomainRundown(__int64 a1)
; ReadIoMemRaw(__int64 a1)
; ReadGenAddr(__int64 a1)
; SaveDevExt(__int64 a1, unsigned int a2)
; PepRegisterSpmSettings(__int64 a1)
; SetPerfStateIO(__int64 a1, unsigned int a2, __int64 a3)
; SetPerfStateFFH(__int64 a1, __int64 a2)
; PerfReadActualMasterCount(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PerfReadWrappingCounter(__int64 a1, char a2, __int64 a3, __int64 a4)
; CpcReadFeedback(int (*a1)(void))
; CpcReadFeedbackAcquireCallback(__int64 a1, int (*a2)(void))
; ProcLibDeviceCreate(PVOID DeferredContext)
; DecodeAcpi2CState(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; RegisterKernelIdleDomains(__int64 a1)
; DeregisterKernelIdleDomains(__int64 a1)
; UpdateKernelIdleDomains(__int64 a1)
; InitAcpiIdleDomain(__int64 a1, __int64 a2, __int64 a3)
; InitAcpiProcessorDomains(__int64 a1)
; RegisterXsdDomain(__int64 a1)
; GetPerfDomain(__int64 a1, __int64 a2, __int64 a3)
; PepNotifyQuerySettingHandle(__int64 a1, __int64 a2)
; DecodeAcpiPStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeAcpiTStates(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; DecodeControlStatusRegisterIo(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
; ValidatePerfDomainSymmetry(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\qwavedrv.c ;
; DrvDispatchCreate(__int64 a1, __int64 a2)
; DrvIoctlSetFlow(PIRP Irp, char a2)
; DrvCreateClientContext(__int64 a1)
; MhnDrvServiceCopyFromRequest32(__int64 a1, __int64 a2)
; MhnDrvServiceCopyFromRequest(__int64 a1, __int64 a2)
; DrvServiceDowncall(__int64 a1)
; DrvCreateServiceContext(__int64 a1)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rasacd.c ;
; SetDriverMode(char a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rasl2tp.c ;
; SetInformation(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; LcmCmCreateVc(__int64 a1, __int64 a2, __int64 a3)
; LcmCmOpenAf(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4)
; LmpSetOptions(__int64 a1)
; DoDerefMiniportAdapterBlockWork(__int64 a1)
; ConvertInterfaceIndexToLuid(int a1, __int64 a2, __int64 a3)
; SetAllParameters(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8)
; SetTimer(__int64 a1, __int64 a2)
; CallSetupComplete(__int64 _RCX)
; DottedFromIpAddressW(unsigned int a1, __int64 a2, int a3)
; SetupVcAsynchronously(__int64 a1, __int64 a2, unsigned __int64 a3)
; SetupTunnel(__int64 a1, __int64 a2, unsigned __int16 a3, char a4)
; CreateTunnelCb(__int64 a1)
; SetupVcComplete(__int64 a1, __int64 a2)
; TransportOpen(__int64 a1, char a2)
; WskOpen(__int64 a1, char a2)
; FsmOpenCall(__int64 a1, __int64 a2)
; FsmOpenIdleTunnel(__int64 a1)
; FsmOpenTunnel(PVOID Entry, __int64 a2, __int64 a3)
; IpAddressFromDotted(__int64 a1)
; WskDoClose(__int64 a1)
; GetRegistrySettings(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16, __int64 a17, __int64 a18, __int64 a19, __int64 a20, __int64 a21)
; WskCreateSocket(__int64 a1, __int64 a2, char a3, __int64 a4, unsigned int a5)
; WskOpenSocket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; WskOpenCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; WskOpenConnectedSocket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; WskOpenConnectedSocketCompletion(__int64 a1, __int64 a2, __int64 a3)
; WskSocketDisconnectDone(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\raspppoe.c ;
; MpSetOptions(__int64 a1)
; PppoeCmOpenAf(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4)
; DoDerefMiniportAdapterBlockWork(__int64 a1)
; PppoeMpSetInformation(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; DoBindingPauseCompleteWork(__int64 a1)
; PrOpenAdapterComplete(__int64 a1, int a2)
; AllocateAndCopyNetBufferList(__int64 a1, __int64 a2)
; PppoeCmCreateVc(__int64 a1, __int64 a2, __int64 a3)
; ReadRegistrySettings(__int64 a1)
; PrLoad()
; PrOpenAdapter(__int64 a1, __int64 a2)
; PrSetPacketFilterForAdapter(__int64 a1, char a2)
; MpWanSetLinkInfo(__int64 a1, __int64 a2, __int64 a3)
; SetTimer(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\raspptp.c ;
; CallSetFullCallId(__int64 a1)
; CallSetState(__int64 a1, unsigned int a2, __int64 a3, char a4)
; PptpMpSetInformation(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; PptpCmOpenAf(__int64 a1, __int64 a2, signed __int64 a3, __int64 a4)
; MiniportSetOptions(__int64 a1)
; StringCbCopyA(__int64 a1, __int64 a2, __int64 a3)
; DoDerefMiniportAdapterBlockWork(__int64 a1)
; PptpCmCreateVc(__int64 a1, __int64 a2, __int64 a3)
; SetAllParameters(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7, int a8)
; CallSetLinkInfo(__int64 a1, __int64 a2)
; CtlSetState(__int64 a1, unsigned int a2, __int64 a3, char a4)
; ReadClientAddressAndMaskList(NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, UNICODE_STRING *a3, __int64 a4)
; OsReadConfig(NDIS_HANDLE ConfigurationHandle)
; WskSocketDisconnectDone(__int64 a1)
; WskCreateServerSocket(__int64 a1, __int64 a2, __int64 a3)
; WskCreateSocket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5)
; WskOpenSocket(__int64 a1, __int64 a2, int a3)
; WskOpenCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; WskOpenConnectedSocket(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; WskOpenConnectedSocketCompletion(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rassstp.c ;
; SetInformation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; ScmCmCreateVc(__int64 a1, __int64 a2, __int64 a3)
; TpiDispatchCreate(__int64 a1, __int64 a2)
; ScmCmOpenAf(__int64 a1, __int64 a2, __int64 a3)
; SetupSstpAclOnDevice(__int64 a1)
; SmpSetOptions(__int64 a1)
; DoDerefMiniportAdapterBlockWork(__int64 a1)
; ReadRegistrySettings(__int64 a1, int *a2, __int64 a3, int *a4, int *a5)
; FsmTpiSetCryptoBindingKeys(__int64 a1, const void *a2, signed int a3, const void *a4, unsigned int a5)
; SetCancelRoutineSafe(__int64 _RCX, __int64 _RDX)
; FsmTpiSetDataReceivedStatus(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rdbss.c ;
; RxTearDownDiagnosticLogger(void *a1)
; RxRemoveOplockStateForSrvOpen(__int64 a1)
; RxpCopyCreateParameters(__int64 a1)
; RxUpdateNetworkOpenLocationInformation(__int64 a1)
; RxPreProcessOpen(__int64 a1, __int64 a2)
; RxSetUpFobxForDfs(__int64 a1, __int64 a2)
; RxUpdateSrvOpenCounts(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, unsigned int a6)
; RxSetupFcbForCaching(__int64 a1, __int64 a2, __int64 a3)
; RxNotifyBufferingManagerOfCompletedOpen(__int64 a1)
; RxUpdateOplockStateOnCreate(__int64 a1, __int64 a2, __int64 a3, int a4)
; RxFindOrInitializeNetworkCreateEcp(__int64 a1)
; RxProcessDfsCreateRequest(__int64 a1)
; RxCheckForNetworkOpenRestrictions(__int64 a1, __int64 a2)
; RxSeCopySubjectContext(__int64 a1, __int64 a2)
; RxDoesRedirSupportLogicalViews(__int64 a1)
; RxDowngradeFcbToSharedInMRx(__int64 a1, __int64 a2)
; RxSetMinirdrCancelRoutine(__int64 a1, __int64 a2)
; RxSetFcbDispatchTable(__int64 a1, __int64 a2)
; RxCreateRxContextEx(__int64 a1, __int64 a2, int a3, __int64 a4)
; RxCreateRxContext(__int64 a1, __int64 a2, int a3)
; RxDecodeFileObject(__int64 a1, signed __int64 **a2, __int64 a3)
; RxRemoveDollarDataSuffix(__int64 a1, __int64 a2)
; RxReleaseReadWriteResources(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, int a3@<r13d>)
; RxSetFcbNameTargetType(__int64 a1, char a2)
; RxLowIoReadShellCompletion(__int64 a1)
; RxSetFcbPagingOwnerPointer(__int64 a1, void *a2)
; RxpPrepareCreateContextForReuse(__int64 a1@<rcx>, int a2@<r13d>)
; RxpFinalizeCreateContext@<rax>(__int64 a1@<rcx>, int a2@<r13d>)
; RxCreateLinkedVNetRoot(__int64 a1, __int64 a2, UNICODE_STRING *a3, __int64 a4)
; RxCreateLogicalView(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; RxDecrementOutstandingBufferingChangesOnFcb(__int64 a1)
; RxIndicateChangeOfOplockStateWithCreateHint(__int64 a1, __int64 a2, char a3, int a4, int a5, __int64 a6)
; RxSetFcbMainOwnerPointer(__int64 a1, __int64 a2)
; RxpFindOrCreateParentFcb@<rax>(__int64 a1@<rcx>, int a2@<r13d>)
; RxpSetInfoMiniRdr(__int64 a1, __int64 a2, __int64 a3, int a4)
; RxIssuePipeRead(unsigned __int64 ListEntry, __int64 a2, __int64 a3, __int64 a4, int a5)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, __int64 a9, char a10)
; RxUpdateOplockStateOnCreate_fin_0(__int64 a1, __int64 a2)
; RxIssuePipeRead_fin_0@<eax>(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxCommonSetQuotaInformation@<rax>(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, int a3@<r13d>)
; RxpCommonSetEa(__int64 a1, __int64 a2)
; RxpCommonSetQuotaInformation(__int64 a1, __int64 a2)
; RxpCommonSetSecurity(__int64 a1, __int64 a2)
; RxRenameCallbackIsFcbOpen@<rax>(ULONG_PTR BugCheckParameter2@<rcx>, char a2@<dl>, int a3@<r13d>)
; RxSetReparsePointInformation@<rax>(unsigned __int64 ListEntry@<rcx>, __int64 a2@<rdx>, ULONG_PTR a3@<r8>, int a4@<r13d>)
; RxSetZeroData(unsigned __int64 a1, __int64 a2, __int64 a3)
; RxSpinDownOutstandingAsynchronousRequests(__int64 a1)
; RxInlineReadAhead(__int64 a1, __int64 a2, unsigned int a3)
; ComputeFinalCopyChunkDestinationEndingVbo(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; FlushAndPurgeCacheForCopyChunk(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; RxProcessCopyChunkIoctlOrFsCtl(unsigned __int64 ListEntry, __int64 a2, char a3)
; ValidateCopyChunkParameters(__int64 a1, unsigned int a2)
; RxDoesSrvOpenHasLogicalRdrContext(__int64 a1)
; RxpCreateLinkedTreeConnect(__int64 a1, UNICODE_STRING *a2)
; RxCopyVNetRootParameters(__int64 a1, __int64 a2)
; RxSetBasicInfoInFcb(__int64 a1, __int64 a2)
; RxDoesOplockStateChangeOnSrvOpenClose(__int64 a1, __int64 a2)
; RxGatherRequestsForSrvOpen(__int64 a1, __int64 a2)
; RxRegisterSrvOpenWithBufferingManager(__int64 a1@<rcx>, int a2@<r13d>)
; RxCloseAssociatedSrvOpen(PSLIST_ENTRY ListEntry, __int64 a2, __int64 a3)
; RxCommonCreate(__int64 a1, __int64 a2)
; RxFindOrCreateFcb(unsigned __int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5)
; RxCreateFromNetRoot(__int64 a1, __int64 a2, __int64 a3)
; RxCollapseOrCreateSrvOpen(__int64 a1, __int64 a2, __int64 a3)
; RxSearchForCollapsibleOpen(__int64 a1, __int64 a2, __int64 a3, int a4)
; RxCreateSrvOpen(__int64 a1)
; RxPurgeConflictingSrvOpensEx(ULONG_PTR BugCheckParameter2, char a2, __int64 a3, __int64 a4)
; RxCreateNetFobx(__int64 a1, __int64 a2)
; RxFinalizeSrvOpen@<rax>(PVOID P@<rcx>, __int64 a2@<rdx>, char a3@<r8b>, int a4@<r13d>)
; RxFindOrCreateConnections(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; RxCreateVNetRoot(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; RxCreateNetFcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int16 a6, char a7, char a8, char a9)
; RxNameCacheCreateEntryEx(__int64 a1, __int64 a2, __int64 a3, char a4)
; RxpMarkFobxDormant(__int64 a1)
; RxCommonRead(unsigned __int64 a1, __int64 a2)
; RxReleaseFileForNtCreateSection@<rax>(__int64 a1@<rcx>, int a2@<r13d>)
; RxFastCopyRead(PFILE_OBJECT FileObject, __int64 a2, __int64 a3, char a4, __int64 a5, char a6, __int64 a7, __int64 a8, __int64 a9)
; RxFastIoRead(PFILE_OBJECT FileObject, __int64 a2, __int64 a3, char a4, int a5, int a6, __int64 a7, __int64 a8)
; RxAcquireFileForNtCreateSection(__int64 a1)
; RxActivateDelayClosedSrvOpen(__int64 a1)
; RxCreateSrvCall(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RxCreateNetRoot(__int64 a1, __int64 a2, int a3, __int64 a4)
; RxCreateTreeConnect(__int64 a1, __int64 a2)
; RxCreateCredential(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; RdbsspStatisticsEntryCreateInstance(__int64 a1, __int64 a2, int a3, int a4, unsigned __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; RxSetPurgeFailureMode@<rax>(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, __int64 a3@<r8>, int a4@<r13d>)
; RxIterateOnFcbOpens(__int64 a1, __int64 a2, int (__fastcall *a3)(_QWORD, _QWORD, _QWORD), int (__fastcall *a4)(_QWORD, _QWORD, _QWORD), __int64 a5, char a6)
; RdbssStatisticsEntryFindOrCreateInstance(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; RdbssStatisticsEntryArrayFindOrCreatePrimaryInstance(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5)
; RdbssStatisticsEntryArrayFindOrCreateSecondaryInstance(__int64 a1, __int64 a2, __int64 a3, __int64 *a4)
; RxSetupNetFileObject(__int64 a1, __int64 a2, __int64 a3)
; RxDowngradeOplockState@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<r8>, int a4@<r13d>)
; RxPurgeConflictingSrvOpens(ULONG_PTR a1, __int64 a2, __int64 a3)
; RxCommonSetInformation@<rax>(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, int a3@<r13d>)
; RxSetPipeInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RxLowIoReadShell(PSLIST_ENTRY ListEntry, __int64 a2, __int64 a3)
; RxOrphanSrvOpensForThisFcb(__int64 a1, __int64 a2, unsigned __int8 a3)
; RxOrphanSrvOpens(__int64 a1)
; RxSetEndOfFileInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RxSetBasicInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RxSetPositionInfo(__int64 a1, __int64 a2)
; RxSetDomainForMailslotBroadcast(__int64 a1)
; RxSetDispositionInfo(__int64 a1, __int64 a2, __int64 a3)
; RxOrphanSrvOpen(__int64 a1@<rcx>, int a2@<r13d>)
; RxCreateMidAtlas(unsigned __int16 a1, unsigned __int16 a2)
; RxOffloadRead(unsigned __int64 a1, __int64 a2, __int64 a3)
; RxReadRegistryParameters(char a1)
; RxSecurityDescriptorCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RdbssStatisticsDatabaseCreateInstance(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RdbssKernelInterfaceCreateInstance(__int64 a1)
; RdbsspStatisticsEntryCreateInstance_fin_0(__int64 a1, __int64 a2)
; RdbssStatisticsEntryFindOrCreateInstance_fin_0(__int64 a1, __int64 a2)
; RxFindOrCreateFcb_filt_0(__int64 a1, __int64 a2)
; RxCreateFromNetRoot_fin_0(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxCreateSrvOpen_fin_0@<eax>(__int64 a1@<rdx>, unsigned __int8 a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxFindOrCreateConnections_fin_0(__int64 a1, __int64 a2)
; RxCommonSetInformation_fin_0@<eax>(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxFastCopyRead_filt_0(__int64 a1)
; RxDowngradeOplockState_fin_0(__int64 a1, __int64 a2)
; RxSetBasicInfo_fin_0(char a1, __int64 a2, __int64 a3)
; RxOrphanSrvOpens_fin_0(__int64 a1, __int64 a2)
; RxSetEndOfFileInfo_fin_0(unsigned __int8 a1, __int64 a2, __int64 a3)
; RxSecurityDescriptorCreate_fin_0(__int64 a1, __int64 a2)
; RdbssStatisticsDatabaseCreateInstance_fin_0(__int64 a1, __int64 a2)
; RdbssKernelInterfaceCreateInstance_fin_0(__int64 a1, __int64 a2)
; RxCommonSetEa@<rax>(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, __int64 a3@<r8>, int a4@<r13d>)
; RxCommonSetSecurity@<rax>(__int64 a1@<rdx>, unsigned __int64 a2@<rcx>, int a3@<r13d>)
; RxSetAllocationInfo(__int64 a1, __int64 a2, __int64 a3)
; RxSetAllocationInfo_fin_0(__int64 a1, __int64 a2)
; RxSetRenameLinkClusterInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RxSetSimpleInfo(__int64 a1, __int64 a2, __int64 a3)
; RxFastCopyWrite(PFILE_OBJECT FileObject, __int64 a2, __int64 a3, BOOLEAN a4, __int64 a5, char a6, _DWORD *a7, __int64 a8, __int64 a9)
; RxFastCopyWrite_filt_0(__int64 a1)
; RxFastCopyWrite_filt_1(__int64 a1)
; RxCommonRead_fin_0@<eax>(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxPostStackOverflowRead@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<r13d>)
; RxPostStackOverflowRead_fin_0(__int64 a1, __int64 a2)
; RxStackOverflowRead@<eax>(PSLIST_ENTRY ListEntry@<rcx>, PRKEVENT Event@<rdx>, char a3@<r13b>)
; RxStackOverflowRead_filt_0(__int64 a1, __int64 a2)
; RxCommonSetVolumeInformation(unsigned __int64 a1, __int64 a2)
; RxCommonSetVolumeInformation_fin_0(__int64 a1@<rdx>, char a2@<cl>, __int64 a3@<r8>, int a4@<r13d>)
; RxAcquireFcbForReadAhead(__int64 a1, BOOLEAN a2)
; RxReleaseFcbFromReadAhead(__int64 a1@<rcx>, int a2@<r13d>)
; RxpUnMarkFobxDormant(__int64 a1)
; RxCreateNetRootCallBack(__int64 a1)
; RxFindCreateDestinationVNetRoot(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RxMigrationCopyNewPAPName(char *a1, unsigned __int16 a2, __int64 a3, __int64 a4, unsigned __int16 a5, unsigned __int16 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, unsigned __int16 a11, __int64 a12, unsigned __int16 a13)
; RxMigrationSrvOpenCloseCallBack(__int64 a1)
; RxSetSrvCallDomainName(__int64 a1, __int64 a2)
; RxDeregisterSrvOpenWithBufferingManager(__int64 a1@<rcx>, int a2@<r13d>)
; RxNotifyBufferingManagerOfPendingOpen(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rdpbus.c ;
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rdpdr.c ;
; RtlStringCbCopyUnicodeString(__int64 a1, __int64 a2, __int64 a3)
; DrCreate(__int64 a1)
; DoubleList::Next(DoubleList *this, struct ListEntry *a2)
; DoubleList::First(DoubleList *this)
; DoubleList::RemoveEntry(DoubleList *this, struct ListEntry *a2)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; DoubleList::CreateEntry(DoubleList *this, void *a2)
; DrDevice::GetDeviceDosName(DrDevice *this)
; TopObj::SetValid(TopObj *this, char a2)
; **__fastcall DoubleList::~DoubleList(DoubleList *this))(TopObj *__hidden this, unsigned __int8)
; DoubleList::`vector deleting destructor(void *a1, char a2)
; DrDevice::OnSetSdInfoCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4, RefCount **a5)
; DrPrinterPort::Create(DrPrinterPort *this, struct _RX_CONTEXT *a2)
; DrDevice::OnCreateCompletion(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; CVCChannel::CancelOpenIrp(CVCChannel *this, struct _DEVICE_OBJECT *a2, struct _IRP *a3)
; SetChannelId(struct _DYNVC_HEADER *a1, int a2)
; CVCChannel::staticCancelOpenIrp(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; DrCreateSrvCall(__int64 a1, __int64 a2)
; DrSession::ReadPacket(DrSession *this)
; ConvertToAndFromWideChar(unsigned int a1, __int64 a2, unsigned int a3, __int64 a4)
; DrPrinterPort::ShouldCreatePort(DrPrinterPort *this)
; DrCreateVNetRoot(__int64 a1)
; DrSessionManager::FindOrCreateSessionById(__int64 a1, int a2, int a3, __int64 a4, RefCount **a5)
; DrCloseSrvOpen(__int64 a1)
; DrExchangeManager::CreateExchange(__int64 a1, __int64 a2, __int64 a3, RefCount **a4)
; DrSmartCard::Create(DrSmartCard *this, struct _RX_CONTEXT *a2)
; DrSession::ReadCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; DrSession::ReadCompletion(DrSession *this, struct _IO_STATUS_BLOCK *a2)
; DrDeviceManager::FindDeviceByDosName(__int64 a1, __int64 a2, __int64 a3)
; DrDevice::FinishCreate(DrDevice *this, struct _RX_CONTEXT *a2)
; DrDevice::VerifyCreateSecurity(DrDevice *this, struct _RX_CONTEXT *a2, int a3)
; DrPrinterPort::CreatePrinterAnnounceEvent(DrPrinterPort *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2, struct tagRDPDR_PRINTERDEVICE_SUB *a3, unsigned __int32 a4, const unsigned __int16 *a5, unsigned __int32 *a6)
; SetPortDescrToDisabled(PUNICODE_STRING SymbolicLinkName)
; DrPrinterPort::CreatePrinterPort(DrPrinterPort *this, unsigned __int16 *a2)
; CreatePrintPortInterface(__int64 a1, __int64 a2)
; DrDevice::CreateReferenceString(DrDevice *this, struct _UNICODE_STRING *a2)
; VirtualChannel::Create(VirtualChannel *this, void *a2, ULONG a3, const char *a4, struct _KEVENT *a5, struct RefCount *a6, int a7, int a8, int a9)
; RDPDYN_Create(__int64 a1, __int64 a2)
; DYNVC_CreateDevice(struct _DRIVER_OBJECT *a1, struct _DEVICE_OBJECT **a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; FAKEVID_CreateDevice(struct _DRIVER_OBJECT *a1, __int64 a2, struct _DEVICE_OBJECT **a3)
; IoDevObjCreateDeviceSecure(struct _DRIVER_OBJECT *a1, ULONG a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6)
; DrDrive::GetDeviceDosName(DrDrive *this)
; DrCheckForCollapsibleOpen(struct _RX_CONTEXT *a1)
; DrDevice::ShouldCreateDevice(DrDevice *this)
; DrDrive::CreateDrive(DrDrive *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2, const unsigned __int16 *a3)
; DrDrive::CreateDriveAnnounceEvent(DrDrive *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2, struct tagRDPDR_DRIVEDEVICE_SUB *a3, unsigned __int32 a4, const unsigned __int16 *pszSrc, unsigned __int32 *a6)
; DrDrive::OnSetFileInfoCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DrDrive::OnSetSdInfoCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DrDrive::OnSetVolumeInfoCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; DrDrive::SetFileInfo(DrDrive *this, struct _RX_CONTEXT *a2)
; DrDrive::SetVolumeInfo(DrDrive *this, struct _RX_CONTEXT *a2)
; DrDrive::ShouldCreateDevice(DrDrive *this)
; DrAddOpenHandle(struct _FILE_OBJECT *a1)
; DrRemoveOpenHandle(struct _FILE_OBJECT *a1)
; DrSetFileInfo(struct _RX_CONTEXT *a1)
; DrSetFileInfoAtCleanUp(struct _RX_CONTEXT *a1)
; DrSetSdInfo(struct _RX_CONTEXT *a1)
; DrSetVolumeInfo(struct _RX_CONTEXT *a1)
; DrRead(struct _RX_CONTEXT *a1)
; DrCreateSCardDevice(__int64 a1, __int64 a2, __int64 a3)
; CreateTermDD(void **a1, void *a2, ULONG a3, const char *a4)
; VirtualChannel::Read(VirtualChannel *this, __int32 (__stdcall *a2)(struct _DEVICE_OBJECT *, struct _IRP *, void *), void *a3, void *a4, unsigned __int32 a5, int a6)
; DrSession::ReadMore(DrSession *this, unsigned int a2, unsigned int a3)
; DrSerialPort::CreateSerialPort(DrSerialPort *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2)
; DrSerialPort::ShouldCreatePort(DrSerialPort *this)
; DrParallelPort::CreateLptPort(DrParallelPort *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2)
; DrParallelPort::ShouldCreatePort(DrParallelPort *this)
; DrPrinterPort::CreateDevicePath(DrPrinterPort *this, PUNICODE_STRING Destination)
; DrPrinterPort::CreatePortAnnounceEvent(DrPrinterPort *this, struct tagRDPDR_DEVICE_ANNOUNCE *a2, struct tagRDPDR_PORTDEVICE_SUB *a3, unsigned __int32 a4, const unsigned __int16 *pszSrc, unsigned __int32 *a6)
; DrDevice::Create(DrDevice *this, struct _RX_CONTEXT *a2)
; DrDevice::CreateDevicePath(DrDevice *this, PUNICODE_STRING Destination)
; DrDevice::OnReadCompletion(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; DrDevice::Read(DrDevice *this, struct _RX_CONTEXT *a2)
; CVCSession::CreateChannel(CVCSession *this, const unsigned __int16 *a2, unsigned __int8 a3, struct CVCChannel **a4)
; CDynVC::CreateChannelForSessionId(CDynVC *this, const unsigned __int16 *a2, unsigned int a3, unsigned __int8 a4, struct CVCChannel **a5)
; CFileVC::CreateFile(CFileVC *this, struct _UNICODE_STRING *a2, struct _IRP *a3)
; CDynVC::CreateSession(CDynVC *this, unsigned int a2, struct CVCSession **a3)
; CVCChannel::OnCreate(CVCChannel *this, int a2)
; CFileVC::Read(CFileVC *this, struct _IRP *a2)
; CVCSession::ReadCompletion(CVCSession *this, struct _IO_STATUS_BLOCK *a2, unsigned __int8 *a3, unsigned __int32 a4)
; CVCChannel::ReadPacket(CVCChannel *this, unsigned int a2, struct _IRP *a3)
; CVCChannel::SendOpenPacket(CVCChannel *this, const unsigned __int16 *a2, struct _IRP *a3)
; CTransportVC::OpenChannels(CTransportVC *this, void *a2, ULONG a3, int a4)
; CTransportVC::StartRead(CTransportVC *this, struct IReadCompletion *a2)
; CTransportVC::StartReadOnChannel(CTransportVC *this, unsigned int a2)
; CTransportVC::staticCreateInstance(const unsigned __int16 *a1, struct CTransportVC **a2)
; CTransportVC::staticReadCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; FAKEVID_CreateClose(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rdpvideominiport.c ;
; RdpVidCreateDevice(struct _DRIVER_OBJECT *a1, __int64 a2, struct _DEVICE_OBJECT **a3)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rdyboost.c ;
; SmdProcessReadWrite(SIZE_T Length, __int64 a2, __int64 a3)
; SmdDispatchReadWrite(__int64 a1, __int64 a2)
; SmdProcessReadWriteCompletion(__int64 a1, __int64 a2, signed __int64 a3, int a4, __int64 a5, unsigned __int64 a6)
; SmdReadWriteCompletion(__int64 a1, __int64 a2, unsigned __int64 a3)
; SmdReadVolumeRangesDpc(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; SmdRBDispatchReadWrite(__int64 a1, __int64 a2)
; SmdRBReadWriteCompletion(__int64 a1, __int64 a2, unsigned __int64 a3)
; SMKM_STORE_MGR<SMD_TRAITS>::SmPageRead(__int64 Tag, __int64 *a2, unsigned __int64 a3, __int64 a4, __int64 Taga)
; SMKM_STORE_MGR<SMD_TRAITS>::SmReadPickStore(__int64 a1, __int64 *a2, unsigned int a3, __int64 a4, __int64 a5)
; SmdRBCheckPendRead(__int64 a1, __int64 a2, unsigned __int64 *a3, unsigned int a4)
; SmdStoreReadCompletion(PMDL MemoryDescriptorList, void *a2)
; ST_STORE<SMD_TRAITS>::StDmSinglePageCopy(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; ST_STORE<SMD_TRAITS>::StDrainReadContextList(__int64 a1)
; ST_STORE<SMD_TRAITS>::StDmCurrentRegionSet(__int64 a1, unsigned int a2, unsigned int a3)
; ST_STORE<SMD_TRAITS>::StLazyWorkMgrSetSchedule(unsigned __int64 a1, signed __int64 a2)
; SmdMdlCopy(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int Size)
; StRtlIoStorInfoSetNvCachePriority(__int64 a1, unsigned __int8 a2)
; SmdCheckAndConvertIoParams(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; SmdStoreCreateNotify(ULONG *a1)
; RtlStringCbCopyUnicodeString(unsigned __int16 *a1, unsigned __int64 a2, const struct _UNICODE_STRING *a3)
; SmDecompressBuffer(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; StLcBucketsCopy(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; SmKmEtwAppendObjectName(__int64 a1, void *a2)
; SmdVolumeRangeProcessLastReadUpdateCallback(unsigned __int8 *a1, int a2, unsigned int a3, void *a4)
; SmdHbDrvSetIrpCachePriority(signed __int64 a1, __int64 a2, __int64 a3, char a4, unsigned int a5, int a6)
; SMKM_STORE<SMD_TRAITS>::SmStDirectRead(__int64 a1, __int64 a2)
; SMKM_STORE<SMD_TRAITS>::SmStDirectReadCallout(__int64 a1)
; SMKM_STORE<SMD_TRAITS>::SmStDirectReadComplete(__int64 a1, __int64 a2, int a3)
; SMKM_STORE_SMD_TRAITS_::SmStDirectReadComplete_::_1_::filt_0(ULONG_PTR BugCheckParameter2, __int64 a2)
; SMKM_STORE<SMD_TRAITS>::SmStDirectReadIssue(__int64 a1, __int64 a2, __int64 a3)
; SMKM_STORE_SMD_TRAITS_::SmStDirectReadIssue_::_1_::filt_0(ULONG_PTR BugCheckParameter2, __int64 a2)
; ST_STORE<SMD_TRAITS>::StAcquireReadContext(__int64 a1)
; ST_STORE<SMD_TRAITS>::StCopyIoStats(__int64 a1, __int64 a2)
; ST_STORE_SMD_TRAITS_::StDmSinglePageCopy_::_1_::filt_0(ULONG_PTR a1, __int64 a2, __int64 a3)
; ST_STORE<SMD_TRAITS>::StPageCopyExceptionFilter(ULONG_PTR BugCheckParameter1, ULONG_PTR a2, __int64 a3, ULONG_PTR BugCheckParameter2, __int64 a5, ULONG_PTR BugCheckParameter2a)
; ST_STORE<SMD_TRAITS>::StReleaseReadContext(__int64 a1, __int64 a2)
; SMKM_STORE<SMD_TRAITS>::SmStReadThread(__int64 *a1)
; SmdReadVolumeRangesAgeCallback(__int64 a1, struct _RTL_BITMAP *a2, void *a3, void *a4, unsigned __int32 *a5)
; SMKM_STORE_MGR<SMD_TRAITS>::SmAsyncReadQueueInsert(__int64 a1, __int64 a2, unsigned int a3)
; SMKM_STORE_MGR<SMD_TRAITS>::SmAsyncReadQueueWorker(__int64 a1)
; SMKM_STORE_MGR<SMD_TRAITS>::SmFeSetEvictFailed(__int64 a1, __int64 *a2, int a3, unsigned int a4)
; SmdReadFromStore(__int64 Tag, SIZE_T Length, struct _IRP *a3, unsigned __int64 *a4, unsigned int Lengtha, unsigned __int64 a6)
; SmdStoreReadVerifyCleanup(struct _SMD_VERIFY_READ_CONTEXT *a1, int a2, __int64 a3)
; SmdStoreReadVerifyCompletion(struct _SMD_VERIFY_READ_CONTEXT *a1)
; SmdStoreReadVerifyDeviceCompletion(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; SmdStoreReadVerifyStart(struct _IRP *a1, unsigned __int64 *a2, unsigned int a3, struct _MDL *a4)
; SmWatchDogDeviceIoComplete(__int64 a1, __int64 a2, int a3)
; SmWatchDogRegister(__int64 a1, __int64 a2, __int16 a3)
; SmWatchDogWorkItemMarkBusy(__int64 a1, __int64 _RDX, int a3)
; StringCbCopyNW(__int64 a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4)
; SmKmEtwAppendProductName(__int64 a1, __int64 a2)
; SmCrAuthDecrypt(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; RtlSparseBitmapCtxSetBits(__int64 a1, unsigned __int64 a2, unsigned int a3)
; SmdVerifyManageDataSetRequest(unsigned __int64 a1, unsigned int a2)
; SmdDispatchManageDataSet(__int64 a1, __int64 a2)
; SmdCacheStatsCopy(void *a1, __int32 *a2)
; SmdDataSetNotificationCallback(__int64 a1, unsigned __int64 *a2, int a3)
; SmdProcessDataSetNotification(struct _SMD_CACHED_DEVICE_EXTENSION *a1, __int64 a2)
; SmdProcessDataSetRanges(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, void (__fastcall *a4)(_QWORD, _QWORD, _QWORD), __int64 a5)
; SmKmStoreCreatePrepare(__int64 a1, char a2, __int64 a3, __int64 a4)
; SmdContentsUpdateRangeConvert(__int64 a1, __int64 a2)
; SmdRBOpenEvent(PCWSTR SourceString)
; SmReadyBootPlanVerify(__int64 a1, unsigned int a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; SmdDispatchCreateRequest(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; SmdHbDrvDataSetManagementAction(__int64 a1, int a2, __int64 a3, unsigned int a4, char a5)
; SmdHbDrvDataSetManagementActionInternal(__int64 a1, int a2, __int64 a3, unsigned int a4, char a5)
; SmdHbDrvSetBitmap(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5)
; SmdHbDrvSetDirtyThresholds(__int64 a1, int a2, int a3)
; SmdDataSetOffloadWriteCallback(__int64 a1, unsigned __int64 *a2, unsigned int a3)
; SmdDispatchCopyData(__int64 a1, __int64 a2)
; SmdProcessDataSetOffloadWrite(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; SmKmStoreFileOpenVolume(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\refs.c ;
; RefsFillNetworkOpenInfo(__int64 a1, __int64 a2, __int64 a3, void *a4, __int64 a5)
; RefsCommonCreateCallout(__int64 a1)
; RefsCommonCreateOnNewStack(PSLIST_ENTRY ListEntry, PIRP Irp, __int64 a3)
; RefsCreateCompletionRoutine(__int64 a1, __int64 a2, __int64 a3)
; RefsOpenExistingEncryptedStream(__int64 a1, __int64 a2, __int64 a3)
; RefsSetCcbAccessFlags(__int64 a1, __int64 a2, __int64 a3)
; RefsCopyIntoMdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, const void *Src)
; RefsCopyFromMdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, void *Dst)
; RefsCreateMdlAndBuffer(__int64 a1, __int64 a2, __int64 a3, char a4, SIZE_T *a5, __int64 a6, __int64 a7)
; RefsSetupSubrequest(__int64 a1, __int64 a2, __int64 Length, __int64 a4, int a5, ULONG Lengtha, int a7)
; RefsConvertToIntegrity(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RefsReadBootSectorLocation@<rax>(__int64 a1@<rdx>, __int64 a2@<rbx>, __int64 a3@<r8>, __int64 a4@<r9>)
; RefsReadBootSector@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>)
; RefsReadWriteSimpleStream(__int64 a1, __int64 a2, PVOID VirtualAddress, CmsStream *a4, int a5, __int64 VirtualAddressa, int a7, ULONG a8)
; RefsCreateTrimContext(struct _SLIST_ENTRY *a1, __int64 a2, struct _SLIST_ENTRY *a3, __int64 a4, int a5, struct _SLIST_ENTRY *a6)
; RefsFsdSetInformation(__int64 a1, struct _IRP *a2)
; RefsSetVolumeInfo(__int64 a1, __int64 a2, __int64 a3, char a4)
; RefsSetDirectWritesAllowed(__int64 a1)
; RefsSetVcbScrubDisabledFlag(__int64 a1, char a2)
; RefsScrubConvertMsScrubContextToScrubOutput(__int64 a1, char a2)
; RefsSetVcbTieringVolumeFlags(__int64 a1, int a2)
; MsKmeSynchronousRead(__int64 Length, __int64 a2, PVOID VirtualAddress, __int64 a4, int a5, __int64 a6)
; MsKmeSynchronousReadCopy(__int64 Length, __int64 a2, PVOID VirtualAddress, __int64 a4, int a5, __int64 a6, __int64 a7)
; MsKmeSynchronousRepairFromCopy(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; MsKmeCreateCacheContext(__int64 a1, unsigned int a2, __int64 a3)
; MsKmeDecrementCloseCount(PVOID Object, char a2)
; MsKmeSetCurrentCheckSumTypes(__int64 a1, __int16 a2, __int16 a3, char a4)
; MsKmeSetCacheFileSizes(__int64 a1, __int64 a2, __int64 a3)
; RefsAppendNameToParent(__int64 a1, __int64 a2, __int64 a3)
; RefsSetCancelRoutine(__int64 a1, __int64 a2, __int64 a3, int a4)
; RefsUpdateDeleteNotificationVolumeSetting(__int64 a1, __int64 a2)
; RefsUpdateEnableMetadataPrefetchVolumeSetting(__int64 a1, __int64 a2)
; RefsFsdRead(__int64 a1, __int64 a2)
; RefsMinstoreRead(PSLIST_ENTRY ListEntry, PIRP Irp, __int64 a3, __int64 a4, int a5)
; RefsCommonRead@<rax>(PSLIST_ENTRY ListEntry@<rcx>, PIRP Irp@<rdx>, __int64 a3@<rbp>)
; RefsNonCachedResidentRead(size_t Size, __int64 a2, __int64 a3, int a4, unsigned int Sizea)
; RefsCachedRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6, __int64 a7)
; RefsReleaseForCreateSection(__int64 a1)
; RefsAcquireScbForReadAhead(__int64 a1, BOOLEAN a2)
; RefsReleaseScbFromReadAhead(__int64 a1)
; RefsDoesValidDataHaveWaiters(__int64 a1, __int64 a2)
; RefsNotifyMinstoreOfScbDoom(__int64 a1, __int64 a2)
; DoInsertDirectoryLinkToParent(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RefsExecuteUnderOpenedDirectoryById(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; RefsSalvageOpenSubdirById(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RefsSalvageOpenSubdirsUsingParentChildTable(__int64 a1, __int64 a2)
; RefsIncReadCopyCounts(__int64 _RCX, int a2, char a3)
; RefsDecrementCleanupCounts(__int64 a1, __int64 a2, __int64 a3, int a4)
; RefsDecrementCloseCounts(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, char a6, __int64 a7)
; RefsCancelReadUsnJournal(__int64 a1, __int64 _RDX)
; RefsPerformVerifyDiskRead(__int64 a1, __int64 a2, void *a3, LARGE_INTEGER a4, ULONG Length)
; RefsVerifyReadCompletionRoutine(__int64 a1, __int64 a2, struct _KEVENT *a3)
; ConvertFoundRowToAttribute(__int64 a1, void *a2, __int64 a3)
; RefsCreateAttributeWithValueReal(void *Src, size_t Size, int a3, __int64 a4, __int64 Srca, void *Dst, __int16 a7, __int64 a8, __int64 Dsta)
; RefsCreateAttributeWithValue(void *Src, size_t Size, int a3, __int64 a4, __int64 Srca, void *Dst, __int16 a7, __int64 a8, __int64 Dsta)
; RefsCreateDataStream(__int64 a1, __int64 a2, char a3)
; RefsCopyFileNameStructure(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RefsSetStandardInfo(__int64 a1, __int64 a2, void *a3)
; RefsPartialSetStandardInfo(__int64 a1, __int64 a2, void *a3, unsigned __int32 a4, unsigned int a5)
; PartialSetStreamSummaryWithoutStream(__int64 a1, __int64 a2)
; RefsPartialSetStreamSummary(__int64 a1, __int64 a2, void *a3)
; RefsCreateIndex(void *Src, size_t Size, __int64 a3, __int64 a4, __int16 a5, __int16 a6)
; OpenIndexObjectIfNeeded(__int64 a1, __int64 a2, __int64 a3)
; ReallocateAndCopyIndexEntryIntoBuffer(__int64 a1, __int64 a2, __int64 a3, PVOID *a4, __int64 a5)
; CreateDirectoryCursor(__int64 a1, __int64 a2, const struct _CmsRow *a3, const struct _CmsRow *a4, __int64 a5, unsigned __int8 a6, __int64 a7)
; RefsIsFileOpen(__int64 a1)
; OpenRefsObjectForFcb(__int64 a1, __int64 a2, char a3)
; CreateOrOpenDirectoryTable(__int64 a1, __int64 a2, int a3)
; RefsOpenFile(__int64 a1, __int64 a2)
; RefsCreateDirectory(__int64 a1, __int64 a2)
; MsSetVolumeUpcaseTablePointer(__int64 a1, __int64 a2, int a3)
; MsTriageCreateContext(struct CmsTransactionContext *a1, CmsBPlusTable *this, struct _CmsKey *a3)
; MsTriageSetContextForName(__int64 a1, __int64 a2)
; MsTriageIsContextForNameNeedDecrement(__int64 a1)
; MsTriageSetBreakOnTriage(__int64 a1, __int64 a2, char a3)
; MsCreateDurableTableObject(CmsVolume *a1, struct CmsTransactionContext *a2, struct _SmsBigIdentifier *a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9)
; MsCreateDurableChildTable(CmsVolume *a1, struct CmsTransactionContext *a2, __int64 a3, __int64 a4, struct _CmsRow *a5, __int64 a6, int a7, char a8)
; MsSetMinimumNewObjectId(__int64 a1)
; MsSetDurableTableObjectParentId(struct CmsTransactionContext *a1, CmsBPlusTable *this, struct _SmsBigIdentifier *a3, char a4)
; MsCreateMatchLongCursor(__int64 a1, struct CmsTable *a2, const struct _CmsRow *a3)
; MsCreateMatchKeyPairCursor(__int64 a1, struct CmsTable *a2, const struct _CmsRow *a3, const struct _CmsRow *a4, unsigned __int8 a5, unsigned __int8 a6)
; MsCreateTransactionContext(__int64 a1, __int64 a2)
; MsCreateStream(struct _CmsKey *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, int a7, unsigned int a8, unsigned int a9)
; MsCreateDegenerateStream(CmsStream **a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, struct _RANGE *a6)
; MsDoomParentChildTable(__int64 a1, struct CmsTransactionContext *a2)
; MsSetStreamIntegrityInformation(__int64 a1, struct CmsTransactionContext *a2, struct _MINSTORE_INTEGRITY_INFORMATION_BUFFER *a3)
; MsCreateQueryChildrenCursor(__int64 a1, __m128i *a2, __int64 a3)
; MsSetAddressToResetOnCursorUnpin(__int64 a1, __int64 a2)
; MsSetTopLevelDeleteOperation(__int64 a1)
; MsScrubSetTableIndex(char a1, __int64 a2)
; MsScrubSetSubTableIndex(unsigned int a1, __int64 a2)
; MsHasVolumeMountedDownLevel(__int64 a1)
; MspSetBitsHelperOld(struct _RTL_BITMAP *a1, ULONG a2, ULONG a3)
; CmsVolume::ReadAndRepairSelfChecksumBlock(CmsVolume *this, struct CmsTransactionContext *a2, struct _FILE_OBJECT *a3, __int64 a4, unsigned __int32 a5, void *a6, unsigned __int8 (__stdcall *Dst)(struct CmsTransactionContext *, struct CmsVolume *, void *, __int64, unsigned __int32, void *), enum _RTL_GENERIC_COMPARE_RESULTS (__stdcall __high *a8)(void *, void *, unsigned __int32), unsigned __int8 *a9, struct _SmsScrubIoOutput *Dsta)
; CmsVolume::ReadSuperBlock(CmsVolume *this, struct CmsTransactionContext *a2, __int64 a3, int a4)
; CmsVolume::SetupGlobalReservations(__int64 a1, struct CmsTransactionContext *a2, __int64 a3, __int64 a4)
; CmsVolume::ReadPageWorker(CmsVolume *this, struct _SmsReadPageParams *a2)
; CmsVolume::SmartIoReadAndRepair(CmsVolume *this, struct _FILE_OBJECT *a2, __int64 a3, unsigned int a4)
; CmsVolume::ReadPageCallout(void *a1)
; CmsAllocator::SetFilteredAvlViewActive(CmsAllocator *this, struct CmsTransactionContext *a2, unsigned __int8 *a3)
; DontIgnorePrint(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CmsRowWithBuffer::CopyRowKeyAndData(CmsRowWithBuffer *this, struct _CmsRow *a2)
; AllocateAndCopy(struct CmsTransactionContext *a1, struct _RANGE *a2, struct SmsPage *a3, __int64 a4)
; CmsAllocator::CreateRegionWithFilteredView(CmsAllocator *this, struct CmsTransactionContext *a2, struct _RANGE *a3, __int64 a4, unsigned __int64 a5, unsigned __int32 a6)
; CmsAllocator::CreateRegion(CmsAllocator *this, struct CmsTransactionContext *a2, struct _RANGE *a3, __int64 a4, unsigned __int64 a5, unsigned __int32 a6, struct _RTL_BITMAP *a7)
; CmsAllocator::SetAllocatedLcnBitmapOld(CmsAllocator *this, struct CmsTransactionContext *a2, struct _RTL_BITMAP *a3, int a4)
; CmsBPlusTable::SetParentObjectId(CmsBPlusTable *this, struct CmsTransactionContext *a2, struct _SmsBigIdentifier *a3, char a4)
; CmsBPlusTable::CreateIndex(__int64 a1, struct CmsTransactionContext *a2, void *a3, __int64 a4, struct _SmsBigIdentifier *a5, int a6, char a7, const void *Src, char a9, unsigned int a10)
; CmsBPlusTable::InitializeForCreateIndex(CmsBPlusTable *this, struct CmsTransactionContext *a2, void *a3, struct _SmsBigIdentifier *a4)
; CmsBPlusTable::SetIntegrityInformation(CmsBPlusTable *this, struct CmsTransactionContext *a2, struct _MINSTORE_INTEGRITY_INFORMATION_BUFFER *a3)
; CmsBPlusTable::CreateIndexRoot(CmsBPlusTable *this, struct SmsPage *a2, struct _SmsIndexRoot *a3, __int16 a4, struct _SmsIndexRoot **a5)
; CmsBPlusTable::GetBoundSetDirtyPageCount(struct _SmsBindable *a1)
; CmsBPlusTable::CreateDirtyLockRegion(CmsBPlusTable *a1, struct CmsTransactionContext *a2, __int64 a3)
; CmsBPlusTable::SetRangeDirty(__int64 a1, __int64 a2, __int64 a3, char a4)
; CmsBPlusTable::DoomCachedPin(CmsBPlusTable *this, struct CmsTransactionCore *a2, struct CmsCachedPin *a3, struct _LIST_ENTRY **a4)
; CmsObjectTable::DecrementPendingTableUpdateCount(CmsObjectTable *this, struct CmsTransactionContext *a2, __int32 *a3)
; CmsObjectTable::DoomParentChild(CmsObjectTable *this, struct CmsTransactionContext *a2)
; SetRangeMapEntryRowHlpr(struct _CmsRow *a1, struct _SmsRangeMapEntry *a2, struct _SmsPreAllocatedRow *a3)
; CmsBPlusTable::DoomTable(CmsBPlusTable *this, struct CmsTransactionContext *a2)
; CmsVolume::ReadLatestCheckpoint(CmsVolume *this, struct CmsTransactionContext *a2)
; CmsRulesULONGLONG::CreateDirectorKey(CmsRulesULONGLONG *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CmsRulesULONG::CreateDirectorKey(CmsRulesULONG *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CmsRulesMETA::CreateDirectorKey(CmsRulesMETA *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4)
; CmsRulesBIG_IDENTIFIER::CreateDirectorKey(CmsRulesBIG_IDENTIFIER *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CmsRulesRANGE::CreateDirectorKey(CmsRulesRANGE *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CreateUnicodeStringDirectorKey(struct CmsTransactionCore *a1, struct CmsTable *a2, struct CmsRowWithBuffer *a3, struct _CmsKey *a4, struct _CmsKey *a5, unsigned __int16 a6)
; CmsRulesUNICODE_STRING::CreateDirectorKey(CmsRulesUNICODE_STRING *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5, struct _CmsKey *a6)
; CmsRulesKEY_PAIR::CreateDirectorKey(CmsRulesKEY_PAIR *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5, struct _CmsKey *a6)
; CmsRulesPAGE_TABLE::CreateDirectorKey(CmsRulesPAGE_TABLE *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CmsRulesPARENT_CHILD_LINK::CreateDirectorKey(CmsRulesPARENT_CHILD_LINK *this, struct CmsTransactionCore *a2, struct CmsTable *a3, struct CmsRowWithBuffer *a4, struct _CmsKey *a5)
; CmsCrc32::LoadLibrary(CmsCrc32 *this, void *a2)
; CmsCrc32::CopyChecksum(CmsCrc32 *this, unsigned int a2, struct _SmsChecksumBlob *a3, unsigned int a4, unsigned __int32 a5, struct _SmsChecksumBlob *a6)
; CmsCrc64::LoadLibrary(CmsCrc64 *this, void *a2)
; CmsCrc64::CopyChecksum(CmsCrc64 *this, unsigned int a2, struct _SmsChecksumBlob *a3, unsigned int a4, unsigned __int32 a5, struct _SmsChecksumBlob *a6)
; CmsContainerBase::SetDirty(CmsContainerBase *this, struct SmsPage **a2)
; CmsEmbeddedContainer::AllocateAndCopyKey(CmsEmbeddedContainer *this, struct _CmsKey *a2)
; RefsConvertToIntegrity_fin_0(__int64 a1, __int64 a2)
; RefsReadWriteSimpleStream_fin_0(__int64 a1, __int64 a2)
; MsKmeCreateCacheContext_filt_0(signed int **a1, __int64 a2)
; MsKmeSetCacheFileSizes_filt_0(__int64 a1, __int64 a2)
; RefsFsdRead_filt_0(signed int **a1, __int64 a2)
; RefsCommonRead_fin_0(__int64 a1, __int64 a2)
; DoInsertDirectoryLinkToParent_filt_0(signed int **a1, __int64 a2)
; RefsExecuteUnderOpenedDirectoryById_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsSalvageOpenSubdirById_filt_0(signed int **a1, __int64 a2)
; RefsSalvageOpenSubdirsUsingParentChildTable_filt_0(signed int **a1, __int64 a2)
; RefsPerformVerifyDiskRead_fin_0(__int64 a1, __int64 a2)
; RefsCreateAttributeWithValueReal_fin_0(__int64 a1, __int64 a2)
; RefsCreateIndex_fin_0(__int64 a1, __int64 a2)
; __noreturn MsCreateDurableTableObject_filt_0(struct _EXCEPTION_POINTERS *a1)
; MspSetBitsHelperOld_::_1_::filt_0(__int64 a1, __int64 a2)
; RefsCreateReparsePointInternal(void *a1, size_t a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; RefsCreateInternalAttributeStream(__int64 a1, __int64 a2, char a3, __int64 a4)
; RefsWaitForCreateEvent(PIRP Irp, __int64 a2)
; RefsFsdCreate(__int64 a1, __int64 a2)
; RefsNetworkOpenCreate(__int64 a1, __int64 a2)
; RefsCommonCreate(__int64 ListEntry, __int64 a2, __int64 a3)
; RefsCommonVolumeOpen(PSLIST_ENTRY ListEntry, __int64 a2)
; RefsOpenFcbById(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, __int64 a7)
; RefsOpenExistingPrefixFcb(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, __int64 a7)
; RefsOpenFileHighLevel(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, __int64 a7, __int64 a8, __int64 a9, __int64 *a10)
; RefsCreateNewFile@<rax>(void *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 a5@<r9>, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; RefsOpenSubdirectory(__int64 a1, __int64 a2, __m128i *a3, __int64 a4, char a5, __int64 a6, __int64 a7)
; RefsOpenAttributeInExistingFile(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6, int a7, __int64 a8)
; RefsOpenExistingAttr(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, unsigned int a6, int a7, __int64 a8, __int64 a9)
; RefsOpenNewAttr(void *a1, __int64 a2, __int64 a3, size_t a4, int a5, __int64 a6, int a7, int a8, int a9, int a10, __int64 a11)
; RefsParseNameForCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __m128i *a7, __int64 a8)
; RefsOpenAttributeCheck(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; RefsCreateAttribute(void *a1, __int64 a2, size_t a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8, __int64 a9)
; RefsOpenAttribute(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int16 a6, __int64 a7, unsigned int a8, int a9, int a10, int a11, int a12, __int64 a13, __int64 *a14, __int64 *a15)
; RefsEncryptionCreateCallback(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)
; RefsCompleteCreateRequest(PSLIST_ENTRY ListEntry, __int64 a2, struct _IRP *a3, unsigned int a4)
; RefsReadWriteBootSector@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, char a5@<r9b>, void *a6)
; RefsCommonSetInformation(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetBasicInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, signed __int64 a5)
; RefsSetDispositionInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RefsSetRenameInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; RefsSetLinkInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RefsSetAllocationInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, signed __int64 a5)
; RefsSetEndOfFileInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, signed __int64 a5, char a6)
; RefsSetValidDataLengthInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RefsSetSfioReservation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; RefsSetFileObject(__int64 a1, int a2, __int64 a3, __int64 a4)
; RefsOpenSystemFile(__int64 a1, __int64 *a2, __int64 a3, unsigned int a4)
; RefsSetExtendedDasdIo(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetReparsePoint(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsCreateUsnJournal(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsReadUsnWorker(__int64 a1, __int64 a2, __int64 a3)
; RefsReadFileUsnData(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetSparse@<rax>(PSLIST_ENTRY ListEntry@<rcx>, PIRP Irp@<rdx>, __int64 a3@<rbp>)
; RefsSetBreakOnCorrupt(PSLIST_ENTRY ListEntry, PIRP Irp, char a3)
; RefsSetPersistentVolumeState(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetCompression(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetIntegrity(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetPurgeFailureMode(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsCopyReadA(__int64 a1, __int64 *a2, unsigned int a3, BOOLEAN a4, unsigned int a5, __int64 a6, __int64 a7)
; RefsCopyWriteInternal(__int64 a1, __int64 a2, BOOLEAN a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; RefsCopyWriteA(__int64 a1, __int64 *a2, int a3, BOOLEAN a4, unsigned int a5, __int64 a6, __int64 a7)
; RefsMdlReadA(__int64 a1, __int64 *a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6)
; OpenFileSystemFile(void *Src, __int64 a2, signed __int64 a3, const UNICODE_STRING *a4, __int64 a5, int a6, char a7, int a8, char a9, int a10, int a11, __int64 a12)
; ConditionallyCreateOrOpenFileSystemFile(void *Src, __int64 a2, __int64 a3, __int64 a4, char a5, int a6, int a7, int a8, int a9, int a10)
; OpenMetadataDirectory(void *a1, __int64 a2, char a3)
; OpenRootDirectory(void *Src, __int64 a2, char a3, char a4)
; OpenSecurityFile(void *a1, __int64 a2, char a3)
; RefsOpenUsnJournal(void *Src, __int64 a2, unsigned __int8 a3, char a4, __int64 a5, __int64 a6, __int64 a7)
; SetVolumeMounted(__int64 a1, __int64 a2)
; RefsSetClearVolumeFlag(__int64 a1, __int64 a2, int a3, char a4, char a5)
; SetAndGetVolumeTimes(__int64 a1, __int64 a2)
; RefsFastQueryNetworkOpenInfo(__int64 a1, char a2, void *a3, __int64 a4)
; RefsRegistryOpenDeepestPath(__m128i *a1, __int64 a2, __int64 a3)
; RefsUpdateDynamicRegistrySettings(__int64 a1)
; RefsFilterCallbackAcquireForCreateSection(__int64 a1)
; RefsSetFcbSecurityFromDescriptor(__int64 a1, __int64 a2, void *a3, ULONG a4)
; RefsLoadSecurityDescriptor(__int64 a1, __int64 a2)
; RefsCacheSharedSecurityForCreate(__int64 a1, __int64 a2, __int64 a3)
; RefsCommonSetSecurityInfo(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsCheckpointVolumeUntilDone(__int64 a1, __int64 a2)
; RefsSqmCreateDwordStreamEntry(__int64 a1, int a2)
; RefsSqmCreateDwordStreamEntryEx(__int64 a1, int a2)
; RefsSqmCreateDword64StreamEntryEx(__int64 a1, __int64 a2)
; RefsSqmReadCopyCounts(__int64 a1)
; RefsCreateNonpagedFcb(__int64 a1, char a2)
; RefsCreateRootFcb(__int64 a1)
; RefsCreateFcb(__int64 a1, __int64 a2, __m128i *a3, unsigned int a4, __int64 a5, __int64 a6, __int64 *a7)
; RefsCreateScb(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, char a5, __int64 a6)
; RefsCreatePrerestartScb(__int64 a1, __int64 a2, __int64 a3)
; RefsCreateFileLock(__int64 a1, char a2)
; RefsCreateLcb(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; RefsCreateCcb(__int64 a1, __int64 a2, char a3, int a4, __int64 a5, __int16 a6)
; RefsUsnAppendData(__int64 a1, __int64 a2, void *a3, unsigned int a4)
; RefsReadUsnJournal(PSLIST_ENTRY ListEntry, PIRP Irp, char a3)
; RefsSetupUsnJournal(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; NtOfsCreateAttributeEx(__int64 a1, size_t a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; RefsCommonSetVolumeInfo(PSLIST_ENTRY ListEntry, PIRP Irp)
; RefsSetFsLabelInfo(__int64 a1, __int64 a2, __int64 a3)
; RefsCreateAndAcquireFileIdParent(__int64 a1, __int64 a2)
; RefsCreateFileId(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __m128i *a5)
; RefsMdlReadA_filt_0(__int64 a1)
; RefsCreateInternalAttributeStream_fin_0(char a1, __int64 a2)
; RefsFsdCreate_filt_0(signed int **a1, __int64 a2)
; RefsNetworkOpenCreate_filt_0(signed int **a1, __int64 a2)
; RefsCommonCreate_fin_0(char a1, __int64 a2, __int64 a3)
; RefsCommonVolumeOpen_fin_0(__int64 a1, __int64 a2)
; RefsOpenFcbById_fin_0(char a1, __int64 a2, __int64 a3)
; RefsOpenExistingPrefixFcb_fin_0(unsigned __int8 a1, __int64 a2)
; RefsOpenFileHighLevel_fin_0(__int64 a1, __int64 a2)
; RefsOpenFileHighLevel_fin_1(char a1, __int64 a2, __int64 a3)
; RefsCreateNewFile_fin_0(__int64 a1, __int64 a2)
; RefsCreateNewFile_fin_1(char a1, __int64 a2, __int64 a3)
; RefsOpenSubdirectory_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsOpenAttributeInExistingFile_fin_0(__int64 a1, __int64 a2)
; RefsOpenAttributeInExistingFile_fin_1(__int64 a1, __int64 a2)
; RefsOpenAttributeInExistingFile_fin_2(__int64 a1, __int64 a2)
; RefsOpenNewAttr_fin_0(__int64 a1, __int64 a2)
; RefsOpenAttributeCheck_fin_0(__int64 a1, __int64 a2)
; RefsCreateAttribute_fin_0(__int64 a1, __int64 a2)
; RefsOpenAttribute_fin_0(unsigned __int8 a1, __int64 a2)
; RefsCommonSetInformation_fin_0(__int64 a1, __int64 a2)
; RefsSetBasicInfo_fin_0(__int64 a1, __int64 a2)
; RefsSetRenameInfo_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsSetLinkInfo_fin_0(__int64 a1, __int64 a2)
; RefsSetLinkInfo_fin_1(__int64 a1, __int64 a2, __int64 a3)
; RefsSetAllocationInfo_fin_0(__int64 a1, __int64 a2)
; RefsOpenSystemFile_fin_0(char a1, __int64 a2)
; RefsSetReparsePoint_fin_0(__int64 a1, __int64 a2)
; RefsCreateUsnJournal_filt_0(__int64 a1)
; RefsCreateUsnJournal_fin_1(__int64 a1, __int64 a2)
; RefsReadUsnWorker_fin_0(__int64 a1, __int64 a2)
; RefsReadFileUsnData_filt_0(__int64 a1, __int64 a2)
; RefsReadFileUsnData_filt_1(__int64 a1, __int64 a2)
; RefsReadFileUsnData_fin_2(__int64 a1, __int64 a2)
; RefsSetSparse_fin_0(__int64 a1, __int64 a2)
; RefsSetBreakOnCorrupt_fin_0(__int64 a1, __int64 a2)
; RefsSetPersistentVolumeState_fin_0(__int64 a1, __int64 a2)
; RefsSetIntegrity_fin_0(__int64 a1, __int64 a2)
; RefsSetPurgeFailureMode_fin_0(__int64 a1, __int64 a2)
; RefsCopyWriteInternal_filt_0(__int64 a1)
; RefsCopyWriteInternal_filt_1(__int64 a1)
; OpenFileSystemFile_fin_0(__int64 a1, __int64 a2)
; OpenFileSystemFile_fin_1(__int64 a1, __int64 a2, __int64 a3)
; ConditionallyCreateOrOpenFileSystemFile_fin_0(__int64 a1, __int64 a2)
; RefsOpenUsnJournal_fin_0(char a1, __int64 a2)
; SetVolumeMounted_fin_0(__int64 a1, __int64 a2)
; RefsFastQueryNetworkOpenInfo_fin_0(__int64 a1, __int64 a2)
; RefsUpdateDynamicRegistrySettings_filt_0(signed int **a1, __int64 a2)
; RefsSetFcbSecurityFromDescriptor_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsCacheSharedSecurityForCreate_fin_0(__int64 a1, __int64 a2)
; RefsCheckpointVolumeUntilDone_filt_0(__int64 a1, __int64 a2)
; RefsCreateRootFcb_fin_0(char a1, __int64 a2)
; RefsCreateFcb_fin_0(char a1, __int64 a2)
; RefsCreateScb_fin_0(char a1, __int64 a2)
; RefsCreatePrerestartScb_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsCreateLcb_fin_0(char a1, __int64 a2)
; RefsUsnAppendData_filt_0(__int64 a1)
; RefsUsnAppendData_fin_1(__int64 a1, __int64 a2, __int64 a3)
; RefsReadUsnJournal_fin_0(__int64 a1, __int64 a2, __int64 a3)
; RefsSetupUsnJournal_fin_0(__int64 a1, __int64 a2)
; NtOfsCreateAttributeEx_fin_0(char a1, __int64 a2)
; RefsCommonSetVolumeInfo_fin_0(__int64 a1, __int64 a2)
; RefsCreateAndAcquireFileIdParent_fin_0(char a1, __int64 a2, __int64 a3)
; RefsCreateFileId_fin_0(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rfcomm.c ;
; RfcommSetPageScan(__int64 a1, __int64 a2, char a3, char a4)
; RfcommSetPageScanWorker(PDEVICE_OBJECT DeviceObject, PVOID Context)
; DevicePowerDownRequestComplete(PDEVICE_OBJECT DeviceObject, __int64 MinorFunction, POWER_STATE PowerState, PVOID Context)
; TdiCreate(__int64 a1, __int64 a2)
; TdiCreateAddress(__int64 a1, __int64 a2, __int64 a3)
; TdiOpenAddress(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int16 a5)
; TdiOpenConnection(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, unsigned __int16 a7)
; TdiSetEvent(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; BrbpReadComplete(__int64 a1, __int64 a2, __int64 a3, signed int a4)
; BrbRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6, __int64 a7)
; RfcommStartRead(__int64 a1, void *a2)
; RfcommSetState(__int64 a1, int a2)
; SessionCreateLocked(__int64 a1, __int64 a2, char a3, __int64 a4)
; ChannelCreateLocked(__int64 a1, __int64 a2, char a3)
; ChannelSetState(__int64 a1, signed int a2)
; RfcommDispatchFdoCreate(__int64 a1, __int64 a2)
; RfcommGetRegSettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rmcast.c ;
; SetSenderMCastOutIf(__int64 a1, unsigned int a2)
; PgmCreateAddress(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PgmSetMCastOutIf(__int64 a1, __int64 a2)
; PgmSetEventHandler(__int64 a1, __int64 a2, __int64 a3)
; PgmSetWindowSizeAndSendRate(__int64 a1, __int64 a2)
; PgmSetWindowAdvanceRate(__int64 a1, __int64 a2)
; PgmSetLateJoinerPercentage(__int64 a1, __int64 a2)
; PgmSetWindowAdvanceMethod(__int64 a1, __int64 a2)
; PgmSetNextMessageBoundary(__int64 a1, __int64 a2)
; PgmSetFECInfo(__int64 a1, __int64 a2)
; PgmSetMCastTtl(__int64 a1, __int64 a2)
; PgmSetHighSpeedOptimization(__int64 a1, __int64 a2)
; PgmSetRcvBufferLength(__int64 a1, __int64 a2)
; PgmDispatchCreate(__int64 a1, __int64 a2)
; PgmCheckSetCancelRoutine(__int64 a1, __int64 a2, char a3)
; AppendPendingReceiverEntry(__int64 a1, __int64 a2)
; CreateFECContext(void *a1, unsigned int a2, int a3, char a4)
; PgmOpenRegistryParameters(UNICODE_STRING *a1, HANDLE *a2, HANDLE *a3)
; ReadRegistryStringValue(HANDLE KeyHandle, __int64 a2, UNICODE_STRING *a3)
; ReadRegistryDwordValue(HANDLE KeyHandle, const WCHAR *a2, __int64 a3)
; DecodeParityPackets(__int64 a1, __int64 a2)
; TdiSetEventHandler(__int64 a1, struct _FILE_OBJECT *a2, int a3, __int64 a4, __int64 a5)
; PgmSetTcpInfo@<rax>(int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>, const void *a4@<r8>, unsigned __int16 a5@<r9w>)
; PgmCreateConnection(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PgmCreateDataFileAndMapSection@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; PgmReadRegistryParameters(UNICODE_STRING *a1, __int64 a2)
; PgmCreateDevice@<rax>(__int64 a1@<rbp>)
; TdiOpenAddressHandle(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; PgmTdiOpenControl@<rax>(__int64 a1@<rcx>, __int64 a2@<rbp>)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\RNDISMP.c ;
; ReadAndSetRegistryParameters(__int64 a1, void *a2)
; SetupReceiveQueues(__int64 a1)
; DoMultipleSend(__int64 a1, signed __int64 a2, unsigned int a3)
; DoMultipleSendRaw(__int64 a1, PNDIS_PACKET *a2, unsigned int *a3)
; RndismpSetInformation(__int64 a1, __int64 a2, const void *a3, unsigned int a4, __int64 a5, __int64 a6)
; ProcessSetInformation(__int64 a1, __int64 a2, int a3, const void *a4, unsigned int a5, __int64 a6, __int64 a7)
; DeviceSetInformation(__int64 a1, __int64 a2, int a3, const void *a4, unsigned int a5, __int64 a6, __int64 a7)
; QuerySetCompletionMessage(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rootmdm.c ;
; IoCompletionSetEvent(__int64 a1, __int64 a2, struct _KEVENT *a3)
; FakeModemOpen(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\rspndr.c ;
; TopCreateSession(__int64 a1, __int64 a2)
; TopAllowRspndrOnDomainPolicyCallback(__int64 a1)
; ToppOpenAdapterCompleteHandlerEx(__int64 a1, int a2)
; TopCopySetLastNetBufferListUnderLock(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TopCreateAndSendAckFrameUnderLock(__int64 a1, char a2)
; TopCreateAndSendFlatFrameUnderLock(__int64 a1, __int64 a2, __int64 a3)
; TopCreateAndSendQueryRespFrameUnderLock(__int64 a1, const void *a2, __int16 a3, char a4)
; TopGetCopyLastNetBufferListUnderLock(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ToppDeferredCreateWorkerThread(__int64 a1, __int64 a2, struct _IO_WORKITEM *a3)
; QosCreateSession(PVOID DeferredContext, __int64 a2, __int64 a3, __int64 a4)
; QospAllocateAndReferenceCopyCompleteNetBufferListForSendAtDpcLevel(PKSPIN_LOCK SpinLock, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; QospCreateAndSendAckAtDpcLevel(__int64 a1, __int64 a2, unsigned __int16 a3)
; QospCreateAndSendErrorFrameAtDpcLevel(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4)
; QospCreateAndSendQueryRespFrameUnderLock(__int64 a1, __int64 a2, unsigned __int16 a3, const void *a4, unsigned __int16 a5)
; QospCreateAndSendReadyFrameAtDpcLevel(__int64 a1, KSPIN_LOCK *a2, unsigned __int16 a3)
; QospFailAllPendingSessionsAtDpcLevelOpenLock(__int64 a1)
; QospSetUpInterruptModerationWorkItemToDisableAtDpcLevel(PKSPIN_LOCK SpinLock)
; QospSetUpInterruptModerationWorkItemToEnableAtDpcLevel(PKSPIN_LOCK SpinLock)
; TopRtlCopyMdlToBuffer(PMDL SourceMdl, unsigned __int64 a2, void *a3, size_t a4, __int64 a5)
; TopRtlCopyMdlToBufferWithReservedMappingAtDpcLevel(PMDL SourceMdl, unsigned __int64 a2, void *a3, __int64 a4)
; TopAllocateAndReferenceCopyNetBufferListEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; TopCreateBackChannel(__int64 a1, unsigned __int64 a2, __int64 a3, void *a4)
; TopRegReadUnicodeValue(UNICODE_STRING *a1, UNICODE_STRING *a2, POOL_TYPE a3, unsigned __int16 a4, HANDLE KeyHandle)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\RTKVHD64.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\RtsPer.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sbp2port.c ;
; Sbp2CreateClose(__int64 a1, __int64 a2)
; Sbp2DoLogin(__int64 a1)
; Sbp2DoReconnect(__int64 a1)
; Sbp2CreateRequestErrorLog(void *a1, __int64 a2, int a3, int a4)
; Sbp2SetManagementTimer(__int64 a1, unsigned int a2)
; Sbp2SetDeferLoginTimer(__int64 a1)
; Create1394TransactionForSrb(__int64 a1, __int64 a2, __int64 a3)
; ConvertSbp2SenseDataToScsi(__int64 a1, void *a2, unsigned int a3)
; Sbp2SetPowerState(PDEVICE_OBJECT DeviceObject, POWER_STATE_TYPE Type, POWER_STATE a3)
; Sbp2PdoSetPower(PDEVICE_OBJECT DeviceObject, PVOID Context, __int64 a3)
; Sbp2FdoSystemPowerDownCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; Sbp2FdoSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; Sbp2CreateDevObject(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT TargetDevice)
; Sbp2CreatePdo(__int64 a1, __int64 a2)
; Sbp2CreateDeviceRelations(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\scfilter.c ;
; WdfScFilter_EvtDeviceFileCreate(__int64 a1, __int64 a2)
; WdfScFilter_RecordReaderId(__int64 a1, __int64 a2, __int64 a3)
; WdfScFilter_GetReaderSlotByFileObject(__int64 a1, __int64 a2, __int64 a3)
; WdfScFilter_EvtFileCreateCompletionRoutine(__int64 a1, __int64 a2, __int64 a3)
; WdfScFilter_RemoveChildNodeByReaderName(__int64 a1, const char *a2)
; WdfScFilter_GetReaderIdMultiString(__int64 a1, void *a2, __int64 a3)
; WdfScFilter_GetReaderSlotByReaderId(__int64 a1, __int64 a2, __int64 a3)
; WdfScFilter_CreateDeviceNode(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; WdfScFilter_CreateRawPdo(__int64 a1)
; WdfScFilter_EvtDeviceListCreateSmartCardDeviceNode(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\scsiport.c ;
; ScsiPortSetBusDataByOffset(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6)
; SpDecrementActiveRequestCount(__int64 a1)
; ScsiPortReadPortUchar(unsigned __int16 a1)
; ScsiPortReadPortUshort(unsigned __int16 a1)
; ScsiPortReadPortUlong(unsigned __int16 a1)
; ScsiPortReadPortBufferUchar(unsigned __int16 a1, unsigned __int8 *a2, unsigned int a3)
; ScsiPortReadPortBufferUshort(unsigned __int16 a1, unsigned __int16 *a2, unsigned int a3)
; ScsiPortReadPortBufferUlong(unsigned __int16 a1, unsigned int *a2, unsigned int a3)
; ScsiPortReadRegisterUchar(__int64 a1)
; ScsiPortReadRegisterUshort(__int64 a1)
; ScsiPortReadRegisterUlong(__int64 a1)
; ScsiPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; ScsiPortConvertUlongToPhysicalAddress(__int64 a1)
; ScsiPortConvertPhysicalAddressToUlong(unsigned int a1)
; SpSetAdapterPower(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; SpSetLowerPowerCompletion(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; SpSetTargetDesiredPowerCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; SpSetTargetDeviceStateLockedCompletion(__int64 a1, int a2, __int64 a3)
; SpSetTargetDeviceStateUnlockedCompletion(PDEVICE_OBJECT DeviceObject, int a2, __int64 a3)
; SpSetTargetDeviceState(__int64 a1, __int64 a2, int a3)
; SpSetTargetSystemState(__int64 a1, __int64 a2, int a3)
; SpSetTargetSystemStateLockedCompletion(__int64 a1, int a2, __int64 a3)
; SpSetTargetSystemStateUnlockedCompletion(PDEVICE_OBJECT DeviceObject, NTSTATUS a2, __int64 a3)
; SpSetTargetDeviceStateForSystemStateCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, __int64 PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; SpCreateLogicalUnit(__int64 a1, __int64 a2)
; SpCreateInitiatorLU(__int64 a1, __int64 a2)
; SpCreateAdapter(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT *DeviceObject)
; SpOpenDeviceKey(UNICODE_STRING *a1, unsigned int a2)
; ScsiPortFdoCreateClose(__int64 a1, __int64 a2)
; SpCreateNumericKey(void *a1, ULONG a2, const WCHAR *a3)
; ScsiPortPdoCreateClose(__int64 a1, __int64 a2)
; AppendField(__int64 a1, __int64 a2, unsigned int a3)
; SpReadNumericInstanceValue(struct _DEVICE_OBJECT *a1, const WCHAR *a2, __int64 a3)
; SpReadNumericValue(HANDLE KeyHandle, __int64 a2, UNICODE_STRING *a3, __int64 a4)
; SpDoVerifierInit(__int64 a1, __int64 a2)
; SpReadNumericInstanceValue_fin_0(__int64 a1, __int64 a2)
; SpSetVerificationMarks(__int64 a1, char a2, char a3)
; ScsiPortSetBusDataByOffsetVrfy(ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter2, ULONG_PTR BugCheckParameter4, __int64 a4, __int64 a5, unsigned int a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sdbus.c ;
; SdbusFdoSetDevicePowerState(__int64 a1, __int64 a2)
; SdbusFdoSocketPowerDownCompletion(__int64 a1, __int64 a2)
; SdbusPdoSetPowerState(__int64 a1, __int64 a2)
; SdbusPdoSetDevicePowerState(__int64 a1, __int64 a2)
; SdbusPdoSetDevicePowerActivateComplete(__int64 a1, __int64 a2, int a3)
; SdbusInterfaceSetProperty(__int64 a1, __int64 a2)
; SdbusSetControllerSpeed(__int64 a1, __int64 a2)
; SdbusSetControllerSpeedComplete(__int64 a1, struct _KEVENT *a2)
; SdbusWorkerSetTimer(__int64 a1, __int64 a2, __int64 a3)
; SdbusWorkerSetStateCmdExecWithFlags(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, int a9, char a10)
; SdbusSetPStateTimer(__int64 a1)
; SdbusCheckCrashdumpDeviceReady(__int64 a1, __int64 a2)
; SdbusReadRegisterUchar(__int64 a1, int a2)
; SdbusReadRegisterUshort(__int64 a1, unsigned __int16 a2)
; SdbusFxSetComponentWake(__int64 a1)
; SdhcSetPower(__int64 a1, __int64 a2, int a3)
; SdhcSetClock(__int64 a1, __int64 a2, char a3, unsigned int a4, unsigned int a5)
; SdhcSetBusWidth(__int64 a1, char a2)
; SdhcSetBusWidthExplicit(__int64 a1, int a2)
; SdhcSetLed(__int64 a1, char a2)
; SdhcSetHighSpeed(__int64 a1, char a2)
; SdhcSetSignaling(__int64 a1, __int64 a2, char a3)
; SdhcSetUhsMode(__int64 a1, __int64 a2, signed __int16 a3, char a4)
; SdhcSetPresetValue(__int64 a1, char a2)
; SdhcSetBlockGapInterruptRequest(__int64 a1)
; SdhcSetEventMask(__int64 a1, int a2, int a3)
; PlSetHostAccessMode(__int64 a1, int a2)
; SdhcSetTransferParameters(__int64 a1, int a2, unsigned __int16 a3, unsigned __int16 a4, char a5, int a6)
; SdhcReadDataPort(__int64 a1, char *a2, unsigned int a3)
; SetPciConfigSpace(__int64 a1, unsigned __int8 a2, __int64 a3, int (__fastcall *a4)(_QWORD, _QWORD, _QWORD, _QWORD))
; SdhcSetInterruptAtBlockGap(__int64 a1)
; SdhcSaveContext(__int64 a1, void *a2)
; SdhcNvT40SetSavedTapValue(__int64 a1)
; SdbusGetRegistrySetting(HANDLE KeyHandle, HANDLE a2, PUNICODE_STRING ValueName, PVOID KeyValueInformation, int a5, __int64 a6)
; SdbusSetCardInterruptDeliverySynchronize(PVOID SynchronizeContext)
; SdbusSetCardAndWakeInterruptForward(__int64 a1, char a2, char a3)
; SdbusSetSocketCardChanged(__int64 a1)
; SdbusSetPowerWorker(__int64 a1, __int64 a2)
; SdbusMmcSetWriteGroupDef(__int64 a1, __int64 *a2)
; SdbusReadDeviceConfigWorker(__int64 a1, __int64 a2, __int64 a3)
; PlSetPower(__int64 a1, __int64 a2)
; PlSetClock(__int64 a1, __int64 a2, unsigned __int8 a3, unsigned int a4)
; PlSetBusWidth(__int64 a1, unsigned __int8 a2)
; PlSetBusWidthExplicit(__int64 a1, int a2)
; ReadDataPortInternal(__int64 a1, __int64 a2, unsigned int a3)
; PlSetHighSpeed(__int64 a1)
; PlSetSignaling(__int64 a1, __int64 a2, char a3)
; PlSetUhsMode(__int64 a1, __int64 a2, __int16 a3)
; PlSetEventMask(__int64 a1, int a2, int a3)
; SdbusCreatePdo(__int64 a1, __int64 a2, PDEVICE_OBJECT *a3)
; PdcPortOpen(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; SdbusOpenCloseDispatch(__int64 a1, __int64 a2)
; SdbusGetSocketRegistrySettings(struct _DEVICE_OBJECT *a1, __int64 a2)
; SdbusGetPdoRegistrySettings(__int64 a1)
; SdbusReadRegULongKey(__int64 a1, __int64 a2, __int64 a3)
; SdbusLoadGlobalRegistryValues(UNICODE_STRING *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sdstor.c ;
; SdStorRpmbAuthenticatedRead(PVOID VirtualAddress, __int64 Length, __int64 a3, int a4)
; SdStorRpmbReadWrite(PVOID VirtualAddress, __int64 Length, char a3, char a4, int a5, int a6, size_t a7, int a8)
; SdStorGppReadWrite(PVOID VirtualAddress, __int64 Length, LARGE_INTEGER a3, __int64 a4, int a5, int a6, int a7, char a8, int a9)
; RtlStringCchCopyExW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, wchar_t **ppszDestEnd, size_t *pcchRemaining, unsigned __int32 dwFlags)
; SdStorGetRegistrySetting(void *a1, void *a2, UNICODE_STRING *a3, void *a4, __int64 a5, ULONG *a6)
; SdStorFdoSetPower(__int64 a1, __int64 a2)
; SdStorFdoSetSystemPowerState(__int64 a1, __int64 a2)
; SdStorFdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, __int64 MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; SdStorPdoSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp, __int64 a3)
; SdStorPdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; SdStorFxPdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, __int64 MinorFunction, __int64 PowerState, PVOID Context)
; SdStorFxFdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, __int64 MinorFunction, POWER_STATE PowerState, PVOID Context)
; SdStorIssueReadWriteRequest(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4, int a5, char a6)
; SdStorPackedReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; SdStorPackedReadIssue(__int64 a1, __int64 a2)
; SdStorIssuePackedReadWriteRequest(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SdStorCreateClose(__int64 a1, __int64 a2)
; SdStorCreateChildPdo(__int64 a1, __int64 a2)
; SdStorGetRegistrySettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\secdrv.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\SerCx.c ;
; SerCxSetDefaultSecurityDescriptor(struct WDFDEVICE_INIT *a1, __int64 a2, __int64 a3, __int64 a4)
; SerCxCreateResourceHubTarget(struct WDFDEVICE__ *a1, struct _SERCX_INTERNAL_STATE *a2)
; SerCxSetupQueues(struct WDFDEVICE__ *a1, struct _SERCX_CONFIG *a2)
; SerCxCreateLocks(struct WDFDEVICE__ *a1)
; SerCxEvtIoRead(struct WDFQUEUE__ *a1, struct WDFREQUEST__ *a2, int a3)
; SerCxEvtIoReadStop(struct WDFQUEUE__ *a1, struct WDFREQUEST__ *a2, char a3)
; SerCxEvtReadCancel(struct WDFREQUEST__ *a1)
; SerCxReadRingBuffer(struct WDFDEVICE__ *a1)
; SerCxPurgeReads(struct WDFDEVICE__ *a1)
; SerCxEvtReadQueuePurgeComplete(struct WDFQUEUE__ *a1, void *a2)
; SerCxCtlSetWaitMask(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2)
; SerCxEvtDeviceFileCreate(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
; SerCxDeviceFileCreateWorker(struct WDFDEVICE__ *a1)
; SerCxCtlSetQueueSize(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, __int64 a3, __int64 a4)
; _SerCxGetReadIntervalTimeout(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, __int64 a3)
; SerCxCtlSetTimeouts(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\SerCx2.c ;
; TransferStateEntryFunc_CancelPioReadyNotification(__int64 a1)
; TransferStateEntryFunc_CopyBytesFromRingBuffer(__int64 a1)
; TransferStateEntryFunc_EnableAndWaitForPioReadyNotification(__int64 a1)
; TransferStateEntryFunc_IsDpcWatchDogExpiringSoon(__int64 a1)
; TransferStateEntryFunc_SetRequestStatusOnTimeout4(struct _TRANSFER_SM_CONTEXT *a1)
; TransferStateEntryFunc_SetStatusForCancelledRequestIfNoBytesTransferred3(struct _TRANSFER_SM_CONTEXT *a1)
; TransferStateEntryFunc_SetStatusForUnsupportedRequest(__int64 a1)
; Transfer_CancelPioReadyNotification(__int64 a1)
; Transfer_SetStatusForCancelledRequestIfNoBytesTransferred(struct _TRANSFER_SM_CONTEXT *a1)
; Transfer_SetRequestStatusOnTimeout(struct _TRANSFER_SM_CONTEXT *a1)
; SerCx_SetDefaultSecurityDescriptor(struct WDFDEVICE_INIT *a1, __int64 a2, __int64 a3, __int64 a4)
; SerCx_CreateResourceHubTarget(struct WDFDEVICE__ *a1, struct _SERCX_CONTEXT *a2)
; SerCx_SetupQueues(struct WDFDEVICE__ *a1)
; SerCx_CreateRecorderLog(unsigned int a1, __int64 a2, __int64 a3, char *a4, struct RECORDER_LOG__ **a5)
; SerCx_ReadRegistryValues(struct _SERCX_CONTEXT *a1)
; SerCx_ReadULongFromParametersRegistryValue(struct _SERCX_CONTEXT *a1, struct WDFKEY__ *a2, const unsigned __int16 *a3, unsigned __int32 *a4, unsigned __int8 *a5)
; _SerCx2PioTransmitCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_PIO_TRANSMIT_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2PIOTRANSMIT__ **a5)
; _SerCx2PioTransmitReady(struct _WDF_DRIVER_GLOBALS *a1, struct SERCX2PIOTRANSMIT__ *a2)
; _SerCx2SystemDmaTransmitCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_SYSTEM_DMA_TRANSMIT_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2SYSTEMDMATRANSMIT__ **a5)
; _SerCx2CustomTransmitCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_CUSTOM_TRANSMIT_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2CUSTOMTRANSMIT__ **a5)
; _SerCx2CustomTransmitTransactionCreate(struct _WDF_DRIVER_GLOBALS *a1, struct SERCX2CUSTOMTRANSMIT__ *a2, struct _SERCX2_CUSTOM_TRANSMIT_TRANSACTION_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2CUSTOMTRANSMITTRANSACTION__ **a5)
; _SerCx2PioReceiveCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_PIO_RECEIVE_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2PIORECEIVE__ **a5)
; _SerCx2PioReceiveReady(struct _WDF_DRIVER_GLOBALS *a1, struct SERCX2PIORECEIVE__ *a2)
; _SerCx2SaveReceiveFifoOnD0Exit(struct _WDF_DRIVER_GLOBALS *a1, struct SERCX2PIORECEIVE__ *a2, int a3)
; Receive_CopyBytesFromRingBuffer(struct _RECEIVE_CONTEXT *a1)
; Receive_EvtIoRead(struct WDFQUEUE__ *a1, struct WDFREQUEST__ *a2, __int64 a3)
; _SerCx2SystemDmaReceiveCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_SYSTEM_DMA_RECEIVE_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2SYSTEMDMARECEIVE__ **a5)
; _SerCx2CustomReceiveCreate(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _SERCX2_CUSTOM_RECEIVE_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2CUSTOMRECEIVE__ **a5)
; _SerCx2CustomReceiveTransactionCreate(struct _WDF_DRIVER_GLOBALS *a1, struct SERCX2CUSTOMRECEIVE__ *a2, struct _SERCX2_CUSTOM_RECEIVE_TRANSACTION_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct SERCX2CUSTOMRECEIVETRANSACTION__ **a5)
; Ioctl_SetTimeouts(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, __int64 a3, __int64 a4)
; Ioctl_SetWaitMask(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, __int64 a3)
; Ioctl_SetWaitMaskComplete(struct WDFDEVICE__ *a1, struct _IRP *a2)
; Ioctl_SetBreakOn(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2)
; Ioctl_SetBreakOff(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, __int64 a3, __int64 a4)
; Ioctl_EvtTransmitQueueStoppedForSetBreakOn(struct WDFQUEUE__ *a1, void *a2)
; Ioctl_SetBreakOffComplete(struct WDFDEVICE__ *a1, struct _IRP *a2)
; Ioctl_SetBreakOnComplete(struct WDFDEVICE__ *a1, struct _IRP *a2)
; File_EvtDeviceFileCreate(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
; Timer_Create(void *a1, void (__stdcall __high *a2)(void *, struct _SERCX_TIMER_PRIVCONTEXT *, enum _TIMEOUT_TYPE), void *a3, struct RECORDER_LOG__ *a4)
; Timer_SetTimeouts(struct _SERCX_TIMER_PRIVCONTEXT *a1, unsigned int a2, unsigned int a3, unsigned int a4)
; RingBuffer_Create(void *a1, __int64 a2, struct RECORDER_LOG__ *a3, struct _SERCX_RING_BUFFER_PRIVCONTEXT **a4)
; Etw_DeviceCreate(struct WDFDEVICE__ *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\serenum.c ;
; Serenum_CreateClose(__int64 a1, __int64 a2)
; Serenum_DecIoCount(__int64 a1)
; SerenumDoEnumProtocol(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Serenum_ReadSerialPort(PVOID Buffer, PIO_STATUS_BLOCK a2, __int64 a3, __int64 a4, PIO_STATUS_BLOCK a5, __int64 a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\serial.c ;
; SerialDoesPortExist(__int64 a1, __int64 a2, int a3, int a4)
; SerialSetBaud(PVOID SynchronizeContext)
; SerialSetDTR(__int64 a1)
; SerialSetRTS(__int64 a1)
; SerialSetupNewHandFlow(PVOID SynchronizeContext, __m128i *a2)
; SerialSetHandFlow(PVOID SynchronizeContext)
; SerialDecrementRTSCounter(PVOID SynchronizeContext)
; SerialCompleteRead(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; SerialReadTimeout(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; SerialIntervalReadTimeout(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; SerialKillAllReadsOrWrites(__int64 a1, __int64 a2, __int64 a3)
; SerialSetTimer(PKTIMER Timer, LARGE_INTEGER a2, struct _KDPC *a3, __int64 a4)
; SerialSetDeviceFlags(__int64 a1, __int64 a2, int a3, char a4)
; SerialReadSymName(__int64 a1, void *a2, __int64 a3, PCWSTR *a4)
; SerialSetPowerD0Completion(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; SetDeviceIsOpened(__int64 a1, char a2, char a3)
; SerialCreateOpen(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; SerialSetInformationFile(__int64 a1, __int64 a2)
; SerialCreateDevObj(PDRIVER_OBJECT DriverObject, __int64 a2)
; SerialDoExternalNaming(__int64 a1, void *a2)
; SerialSetWmiDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2, unsigned int a3)
; SerialSetPowerD0(__int64 a1, __int64 a2)
; SerialSetPowerD3(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; SerialSetChars(__int64 a1)
; SerialSetLineControl(__int64 a1)
; SerialSetMCRContents(__int64 a1)
; SerialSetFCRContents(__int64 a1)
; SerialSetEscapeChar(__int64 a1)
; SerialCheckOpen(PVOID SynchronizeContext)
; SerialMarkOpen(PVOID SynchronizeContext)
; SerialRead(__int64 a1, __int64 a2)
; SerialStartRead(__int64 a1)
; SerialCancelCurrentRead(__int64 a1, __int64 a2)
; SerialGrabReadFromIsr(__int64 a1)
; SerialUpdateReadByIsr(PVOID SynchronizeContext)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sermouse.c ;
; SerialMouseReadSerialPortComplete(__int64 a1, __int64 a2, struct _KEVENT *a3)
; SerialMouseReadComplete(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SerialMouseStartRead(__int64 a1)
; SerialMouseSetReadTimeouts(__int64 a1, int a2)
; SerialMouseReadSerialPort(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SerialMouseFlushReadBuffer(__int64 a1)
; CSerSetReportRate(__int64 a1, unsigned __int8 a2)
; *__fastcall CSerSetProtocol(__int64 a1))()
; SerialMouseCreate(__int64 a1, __int64 a2)
; SerialMouseSpinUpRead(__int64 a1)
; SerialMouseSetWmiDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
; SerialMouseSetLineCtrl(__int64 a1, void *a2)
; SerialMouseSetBaudRate(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sfloppy.c ;
; ScsiFlopReadWriteVerification(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sisraid2.c ;
; SetDeviceTransferMode(__int64 a1, unsigned __int16 a2, unsigned __int8 a3, char a4)
; SetSATAHotPlugInterrrupt(__int64 a1, unsigned __int8 a2)
; SetDeviceTiming(__int64 a1, __int64 a2, __int64 a3, int a4, int a5)
; SetDeviceParameter(__int64 a1, unsigned __int8 a2)
; SetRaidInfo(__int64 a1, unsigned __int8 a2)
; SetControllerInterrupt(__int64 a1, char a2)
; IsDeviceReady(__int64 a1, unsigned __int8 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\sisraid4.c ;
; AHCIPMReadWrite(__int64 a1, unsigned __int8 a2, unsigned __int8 a3, __int64 a4, __int64 a5, char a6, unsigned int *a7)
; AHCISetFeatures(__int64 a1, unsigned __int8 a2, unsigned __int8 a3, char a4, char a5, char a6)
; AHCISetDeviceParameter(__int64 a1, unsigned __int8 a2, unsigned __int8 a3)
; AHCIWaitingAdapterReady(__int64 a1)
; AHCIProcessBrokenJBOD_StripedSet(__int64 a1, unsigned __int16 a2)
; AHCIProcessBorkenMirrorSet(__int64 a1, unsigned __int16 a2)
; AHCIProcessBorkenStripedMirrorSet(__int64 a1, unsigned __int16 a2)
; AHCIWmiSetDataBlock(__int64 a1, __int64 a2, int a3, __int64 a4, int a5, __int64 a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\smclib.c ;
; SmartcardSetDebugLevel(int a1)
; SmartcardCreateLink(PUNICODE_STRING SymbolicLinkName, PUNICODE_STRING DeviceName)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\spaceport.c ;
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; SpStringCbCopyHelper(wchar_t *pszSrc, unsigned int a2, unsigned __int16 **a3)
; SpSdCopyHelper(PSECURITY_DESCRIPTOR SecurityDescriptorInput, ULONG SecurityDescriptorLength, void **a3, unsigned __int16 *a4)
; SpDrivesCopyHelper(struct _GUID *a1, unsigned int a2, struct _SDB_SPACE_DRIVE_INFO **a3)
; SpScsiReadCapacity(struct SP_DEVICE *a1, struct _IRP *a2)
; SpSrbToReadWrite(struct _SCSI_REQUEST_BLOCK *a1, unsigned int a2, unsigned __int64 *a3)
; SpScsiReadWrite(struct SP_DEVICE *a1, struct _IRP *a2)
; SpReadyCallback(struct _DEVICE_OBJECT *a1, struct _LIST_ENTRY *a2, struct _LIST_ENTRY *a3, void *a4)
; SpDriveReadyCallback(struct _DEVICE_OBJECT *a1, struct _LIST_ENTRY *a2, struct _LIST_ENTRY *a3, void *a4)
; SDB_CONFIG_INSTANCE::ReadHeader(SDB_CONFIG_INSTANCE *this, struct _GUID *a2)
; SDB_RAW_CONFIG::Read(SDB_RAW_CONFIG *this, struct SDB_CONFIG_INSTANCE *a2)
; SDB_RAW_CONFIG::CreateRawRecord(SDB_RAW_CONFIG *this, struct SDB_RECORD *a2, struct SDB_RAW_RECORD **a3)
; SDB_RAW_CONFIG::ReadHeader(SDB_RAW_CONFIG *this, struct SDB_CONFIG_INSTANCE *a2)
; SDB_RAW_CONFIG::SetBlocksAllocSize(SDB_RAW_CONFIG *this, int a2)
; SIO_PACKET::DoubleBufferMdl(SIO_PACKET *this, struct _MDL *a2, unsigned int a3, unsigned int a4, unsigned __int32 Size)
; SIO_DESTAGE::OnPacketCompletionDestageRead(SIO_DESTAGE *this, struct SIO_PACKET *a2)
; SIO_DRT::BuildChildPacketsRead(SIO_DRT *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_DRT::OnOperationCompletionRead(SIO_DRT *this, struct SIO_PACKET *a2)
; SIO_RAID::BuildChildPacketsRead(SIO_RAID *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SioRaidOverlapRoutineRead(int a1, __int64 a2, __int64 a3, ULONG a4, __int64 a5, __int64 a6)
; SIO_RAID::OnPacketCompletionRead(SIO_RAID *this, struct SIO_PACKET *a2)
; SIO_RAID::BuildChildPacketsDestageRead(SIO_RAID *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_RAID::BuildChildPacketsDestageReadFull(SIO_RAID *this, struct SIO_PACKET *a2, struct _SL_TABLE_NODE *a3)
; SIO_RAID::BuildChildPacketsDestageReadPartial(SIO_RAID *this, struct SIO_PACKET *a2, struct _SL_TABLE_NODE *a3)
; SIO_RAID::SetColumnPendingState(__int64 a1, unsigned int a2, char a3, char a4)
; SIO_RAID::SetColumnState(SIO_RAID *this, struct SDB_COLUMN_INFO *a2)
; SIO_LOG::Read(SIO_LOG *this, struct SIO_PACKET *a2)
; SIO_LOG::BuildChildPacketsRead(SIO_LOG *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_RAID5::ReadUnit(SIO_RAID5 *this, struct SIO_PACKET *a2)
; SIO_RAID5::BuildChildPacketsReadUnit(SIO_RAID5 *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_RAID5::OnPacketCompletionReadUnit(SIO_RAID5 *this, struct SIO_PACKET *a2)
; SIO_RAID5::BuildChildPacketsDestageRead(SIO_RAID5 *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_RAID5::OnOperationCompletionDestageReadFull@<rax>(SIO_RAID5 *this@<rcx>, struct SIO_PACKET *a2@<rdx>, __int64 a3@<r10>)
; SIO_RAID5::OnOperationCompletionDestageReadPartial(SIO_RAID5 *this, struct SIO_PACKET *a2)
; SIO_RAID5::SetBitMap(SIO_RAID5 *this, struct SIO_LOG_BITMAP *a2)
; SIO_RAID1::ReadUnit(SIO_RAID1 *this, struct SIO_PACKET *a2)
; SIO_RAID1::BuildChildPacketsReadUnit(SIO_RAID1 *this, struct SIO_PACKET *a2, struct SIO_SEQUENTIAL_CONTEXT *a3)
; SIO_RAID1::OnPacketCompletionReadNormal(SIO_RAID1 *this, struct SIO_PACKET *a2)
; SIO_RAID1::OnPacketCompletionReadRepair(SIO_RAID1 *this, struct SIO_PACKET *a2)
; SIO_RAID1::OnPacketCompletionRegenerateRead(SIO_RAID1 *this, struct SIO_PACKET *a2)
; SL_SPARSE::SetObject(SL_SPARSE *this, signed __int64 a2, void *a3)
; SL_SPARSE::Copy(SL_SPARSE *this, struct SL_SPARSE *a2)
; SL_MATRIX::AppendWithProduct(SL_MATRIX *this, struct SL_MATRIX *a2)
; SL_MATRIX::GenerateDecodeSchedule(SL_MATRIX *this, int a2, int a3, struct SL_SCHEDULE **a4)
; LogReadControlRecord(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; LogDecodeEntryHeader(__int64 a1, __int64 a2)
; LogDecodeEntryPayload(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; LogReadRecordComplete(__int64 a1)
; LogReadHeaderCompletion(__int64 a1, __int64 a2, int a3, unsigned int a4, __int64 a5)
; LogReadPayloadCompletion(__int64 a1, __int64 a2, int a3, unsigned int a4, __int64 a5)
; LogReadCommonCompletion(__int64 a1, unsigned int a2, __int64 a3)
; SlLogOpenLog(size_t Size, char a2, char a3, unsigned int a4, size_t Sizea, __int64 a6, __int64 a7)
; SlLogReadLogRecord(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, int a6, void *a7, unsigned int a8, __int64 a9)
; SlLogSetEndOfLog(__int64 a1, __int64 a2)
; SlLogSetHostInfo(void *Src, __int64 a2, __int64 a3, __int64 a4, char a5)
; LogCoreReadControlArea(__int64 a1, __int64 a2, __int64 a3)
; LogCoreReadDataRecord(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, int a6, void *Dst, unsigned int Size, __int64 a9)
; StorSqmSetQWORD(__int64 a1, __int64 a2, __int64 a3)
; StorSqmSetDWORD(__int64 a1, __int64 a2, __int64 a3)
; SP_ENCLOSURE::SetIndications(__int64 a1, __int64 a2, unsigned int a3)
; SP_ENCLOSURE::SetIndications(SP_ENCLOSURE *this, struct _SP_ELEMENT_INFO *a2, unsigned int a3)
; SpSetIndications(__int64 a1, int a2, char a3, char a4)
; SpIoctlSetPoolInfo(struct _IRP *a1)
; SpIoctlCreatePool(struct _IRP *a1)
; SpIoctlSetPoolAttributes(struct _IRP *a1)
; SpIoctlSetDriveInfo(struct _IRP *a1)
; SpIoctlSetSpaceInfo(struct _IRP *a1)
; SpIoctlCreateSpaceInternal(char a1, struct _IRP *a2)
; SpIoctlSetSpaceAttributes(struct _IRP *a1)
; SpIoctlSetEnclosureInfo(struct _IRP *a1)
; SpIoctlSetTierInfo(struct _IRP *a1)
; SpIoctlCreateTierInternal(char a1, struct _IRP *a2)
; SpIoctlSetControlInfo(struct _IRP *a1)
; SpPoolTransactionSetPoolInfo(struct SP_POOL *a1, void *a2, void *a3, void *a4)
; SpPoolTransactionCreatePool(struct SP_POOL *this, struct SP_DRIVE *a2, struct SDB_RECORD **a3, void *a4)
; SpPoolTransactionSetDriveInfo(struct SP_POOL *a1, void *a2, void *a3, void *a4)
; SpPoolTransactionSetSpaceInfo(struct SP_POOL *this, struct SDB_RECORD *a2, struct _SP_SPACE_INFO *a3, void *a4)
; SpPoolTransactionCreateSpace(struct SP_POOL *this, struct _SP_SPACE_INFO *a2, void *a3, void *a4)
; SpPoolTransactionSetTierInfo(struct SP_POOL *this, struct SDB_RECORD *a2, struct _SP_TIER_INFO *a3, void *a4)
; SpPoolTransactionCreateTier(struct SP_POOL *this, void *a2, void *a3, void *a4)
; SP_POOL::TearDownSpace(SP_POOL *this, struct SP_SPACE *a2)
; SP_POOL::SetPoolInfoTransaction(SP_POOL *this, struct _SP_POOL_INFO *a2)
; SpManageDataSetAttributes(struct SP_DEVICE *a1, struct _IRP *a2)
; SpCreateDevice(struct SP_SPACE *a1, struct _DEVICE_OBJECT **a2)
; SP_POOL::CreateSpaceTransaction(__int64 a1, const struct _GUID *a2, char a3, __int64 a4, __int64 a5)
; SP_POOL::CreateConfigSpaceTransaction(SP_POOL *this, struct SP_DRIVE *a2)
; SP_POOL::CreateChildSpaceTransaction(SP_POOL *this, struct SDB_SPACE_INFO *a2, struct _SP_SPACE_INFO *a3)
; SP_POOL::CreateExtent(SP_POOL *this, struct SDB_RECORD *a2, struct _SP_EXTENT_INFO *a3, struct SDB_RECORD **a4)
; SP_POOL::CreateTierTransaction(SP_POOL *this, const struct _GUID *a2, struct _SP_TIER_INFO *a3, struct SDB_RECORD *a4, struct SDB_RECORD **a5)
; SP_GLOBAL_DATA::SetParameter(SP_GLOBAL_DATA *this, unsigned __int16 *a2, struct _GUID *a3)
; SDB_CONFIG::Read(SDB_CONFIG *this, struct SDB_CONFIG_INSTANCE *a2)
; SDB_CONFIG::CreateAssociations(SDB_CONFIG *this)
; SDB_CONFIG::DoubleIncrement(SDB_CONFIG *this, __int64 a2)
; SDB_CONFIG::CreateRecord(__int64 a1, __int64 a2, __int64 a3)
; SDB_POOL_CONFIG::CreateSpaceRecord(SDB_POOL_CONFIG *this, const struct _GUID *a2, struct SDB_RECORD **a3)
; SDB_POOL_CONFIG::CreateSubdiskRecord(SDB_POOL_CONFIG *this, struct SDB_RECORD **a2)
; SDB_POOL_CONFIG::CreateDiskRecord(SDB_POOL_CONFIG *this, struct SDB_RECORD **a2)
; SDB_POOL_CONFIG::CreatePackRecord(SDB_POOL_CONFIG *this, struct SDB_RECORD **a2)
; SDB_SPACE_CONFIG::Create(struct SP_POOL *this, struct SDB_SPACE_INFO *a2)
; SDB_SPACE_CONFIG::Read(struct SDB_SPACE_INFO *a1, struct SP_POOL *a2, char a3, struct SDB_SPACE_CONFIG **a4)
; SDB_DRIVE_INFO::SetElement(SDB_DRIVE_INFO *this, struct SP_DRIVE *a2)
; SDB_TIER_INFO::AppendRegion(SDB_TIER_INFO *this, __int64 a2, __int64 a3)
; SP_DRIVE::Read(SP_DRIVE *this, __int64 a2, ULONG a3, unsigned __int8 *a4)
; SP_DRIVE::SetFailurePredict(SP_DRIVE *this, char a2)
; SP_DRIVE::CreateMetadata(SP_DRIVE *this, struct SP_POOL *a2, struct _GUID *a3)
; SP_DRIVE::ReadHeader(SP_DRIVE *this, struct SDB_DRIVE_HEADER **a2)
; SP_DRIVE::CreateProtectivePartition(SP_DRIVE *this, unsigned __int16 *a2, unsigned __int64 *a3, unsigned __int64 *a4)
; SP_DRIVE::CreateDriveLayoutExGpt(SP_DRIVE *this)
; SP_DRIVE::CreateProtectivePartitionGpt(SP_DRIVE *this, unsigned __int16 *a2, struct _DRIVE_LAYOUT_INFORMATION_EX *a3, __int64 a4, unsigned __int64 a5)
; SIO_DRT::Read(SIO_DRT *this)
; SIO_RAID::CreateColumnRecord(SIO_RAID *this, __int64 a2)
; SIO_LOG::Open(SIO_LOG *this)
; SIO_LOG::ReadRecordSync(SIO_LOG *a1, __int64 a2, __int64 a3, int a4, int a5, int a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\SpbCx.c ;
; CScxController::_DeviceInitSetDefaultCallbacks(struct WDFCXDEVICE_INIT *a1)
; CScxController::_CreateAndInitialize(struct WDFDEVICE__ *a1, struct _SPB_CONTROLLER_CONFIG *a2)
; CScxController::_OnFileCreate(struct WDFDEVICE__ *a1, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
; CScxController::_OnLockQueueReady(struct WDFQUEUE__ *a1, void *a2)
; CScxController::InvokeSpbIoRead(CScxController *this, struct CScxRequest *a2, __int64 a3)
; _SpbControllerSetIoOtherCallback(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, void (__stdcall *a3)(struct WDFDEVICE__ *, struct SPBTARGET__ *, struct SPBREQUEST__ *, unsigned __int64, unsigned __int64, unsigned __int32), void (__stdcall *a4)(struct WDFDEVICE__ *, struct WDFREQUEST__ *))
; _SpbControllerSetRequestAttributes(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _WDF_OBJECT_ATTRIBUTES *a3)
; _SpbControllerSetTargetAttributes(struct _WDF_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _WDF_OBJECT_ATTRIBUTES *a3)
; CScxTarget::_CreateAndInitialize(struct CScxController *a1, struct WDFFILEOBJECT__ *a2, union _LARGE_INTEGER *a3, unsigned __int16 *a4)
; CScxRequest::_CreateAndInitialize(__int64 a1, struct WDFREQUEST__ *a2, int a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\srv.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\srv2.c ;
; Smb2SetSuccess(__int64 a1, int a2)
; SrvQueueSpinDownThread(__int64 a1)
; Smb2SequentialReadComplete(__int64 a1)
; Smb2SetError(__int64 a1, int a2, __int64 a3)
; SrvCreateBuildResponse(__int64 a1)
; Smb2LeaseDecrementOpensInProgressAndCloseIfUnused(__int64 a1, __int64 a2, char a3)
; Smb2FindOrCreateLease(__int64 a1, __int64 a2, char a3, char a4, char a5)
; Smb2LeaseCreateRelativeHandle(__int64 a1, __int64 a2)
; Smb2LeaseCloseDurableOpens(__int64 a1, char a2, KIRQL *a3)
; Smb2SaveSessionKey(__int64 a1, const void *a2, unsigned int a3)
; RfsTable64SetSignature(__int64 a1, __int64 a2, __int64 a3)
; RfsTableCreate(POOL_TYPE PoolType, __int64 a2, unsigned int a3, int a4, __int64 a5)
; Smb2SetConnectionKeepalive(__int64 a1, int a2)
; RfsTable64Create(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5)
; RfsHashTableCreate(__int64 a1, int a2, int a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; Smb2SetSharesForSlowIO(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; SrvAppInstanceCopyCacheEntry(__int64 a1, __int64 a2)
; SrvCreateFileWithBypassEcp(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
; SrvRequestOplockForResumedCreate(__int64 a1)
; SrvReadChunk(__int64 a1)
; SrvRetrieveCreate(__int64 a1)
; Smb2BuildReadRequest(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, __int64 a6, int a7, __int64 a8, __int64 a9, int a10, signed __int64 (__fastcall *a11)(__int64 a1, __int64 a2, __int64 a3), char a12)
; Smb2ExecuteReadCallback(__int64 a1)
; Smb2PreSequentialRead(__int64 a1)
; SrvReadHashCompletionRoutine(signed int a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; CreateDedupStreamingContext(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, int a7, __int64 a8, __int64 a9, __int64 a10)
; CreateHashFileParseContext(__int64 a1, __int64 a2, signed int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, __int64 a11, __int64 a12)
; ChunkReadComplete(PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG Reserved)
; PostAnotherRead(PVOID ApcContext)
; ReadHashBlobFromDedup(__int64 a1)
; ReadFinalSegmentSizeCompletion(PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG Reserved)
; ReadLastSegmentSize(PVOID ApcContext)
; TransitionToReadingSegments(__int64 a1, signed int a2)
; DeDupCreateHash(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; ConvertToString(struct _UNICODE_STRING *a1, unsigned __int8 *a2)
; SrvSetResponseBufferToReceiveBuffer(__int64 a1)
; Smb2ValidateRead(__int64 a1)
; Smb2ContinueUncachedRead(__int64 a1)
; Smb2ExecuteRead(__int64 Entry)
; Smb2RestartNonMdlRead(PVOID Entry)
; BuildPipeReadOrWriteRequest(__int64 a1, __int64 a2, char a3, __int64 a4, int a5)
; SrvFindShareAndSetServerName@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, int a3@<ebx>, __int64 a4@<r8>, __int64 a5@<r9>)
; SrvCreateFile(PCUNICODE_STRING Source, unsigned int a2, int a3, int a4, int a5, __int64 a6, int a7, int a8, int a9, __int64 a10, __int64 a11, __int64 a12, __int64 a13, __int64 a14, __int64 a15, __int64 a16)
; SrvQueryNetworkOpenInfo(__int64 a1, __int64 a2, __int64 a3)
; SrvCreateEcps(__int64 a1, __int64 *a2)
; Smb2ValidateCreateContexts(__int64 a1, __int64 a2)
; Smb2ExecuteCreateReal(__int64 a1)
; Smb2ValidateCreate(__int64 a1)
; Smb2ExecuteCreate(__int64 a1, __int64 a2, __int64 a3)
; SrvSetDefaultPipeMode(__int64 a1)
; Smb2ValidateCreateContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 SecurityDescriptorLength)
; SrvAddCreateContextToResponse(unsigned __int16 a1, const void *a2, unsigned int a3, const void *a4, __int64 a5, __int64 a6, __int64 a7)
; SrvAddNtfsFidCreateContextToResponse(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Smb2BuildReadOrWriteRequest(__int64 a1, __int64 a2, __int64 a3, char a4, char a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, signed __int64 (__fastcall *a11)(__int64 a1, __int64 a2, __int64 a3), char a12, char a13)
; Smb2ContinueMdlRead(PVOID Entry)
; SrvContinueSetInfo(__int64 a1)
; Smb2ValidateSetInfo(__int64 a1)
; ValidateSetFileInfoParameters(__int64 a1)
; Smb2ExecuteSetInfo(__int64 a1)
; Smb2ExecuteSetInfoReal(__int64 a1)
; Smb2ValidateSessionSetup(__int64 a1)
; Smb2ExecuteSessionSetupReal(PVOID Entry)
; Smb2ExecuteSessionSetup(__int64 a1)
; SrvSetSessionNames(__int64 a1, __int64 a2, __int64 a3, char a4)
; SrvCreate(__int64 a1, __int64 a2)
; Srv2LoadGuid(__int64 a1)
; SrvCreateThread(void (__stdcall *a1)(PVOID StartContext), void *a2)
; SrvShareCheckForAndCreateSnapShot(__int64 a1, __int64 a2)
; SrvCreateRkfBypassEcp(__int64 a1)
; Smb2GetUserAndDomainName(__int64 a1, PCWSTR *a2, __int64 a3, __int64 a4)
; Smb2RkfReadState(__int64 a1, struct _FILE_OBJECT *a2, __int64 *a3, int *a4)
; Smb2RkfReadStateAndResume(__int64 a1, __int64 a2)
; Smb2RkfResumeCreate(__int64 a1)
; Smb2RkfpConvertDeprecatedBlob(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; SrvChunkCopyWaitForOplockBreak(__int64 a1)
; SrvCreateHandleWithOptions(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, char a6, __int64 a7)
; SrvPerformCopyChunk(__int64 a1)
; SrvPerformCopyChunkWorker(__int64 a1)
; Smb2CreateRetryOnSharingViolation(__int64 a1)
; Smb2ExecuteCreateReopenReal(__int64 a1, __int64 a2)
; SrvCreateContinueOnOplockAck(__int64 a1)
; SrvMdlReadCompleteComplete(PVOID Entry)
; Smb2pSaveFileLockState(__int64 a1)
; ValidateSetFsInfoParameters(__int64 a1)
; SrvReadFile(HANDLE FileHandle, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, __int64 a5)
; SrvReadHashFile(__int64 a1, void *a2)
; SrvReadHashFileV2(PVOID Entry, HANDLE FileHandle)
; SrvReadHashFromDeDupe(PVOID Entry, void *a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\srvnet.c ;
; SvcCopyUnicodeStringToBuffer(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; SrvAdminOpenInstanceHandle(struct _DEVICE_OBJECT *a1, __int64 a2)
; SrvLibIsDottedQuadAddress(__int64 a1)
; SrvNetCopyIndicationToBufferEx(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; SrvLibIsDosDeviceName(PCUNICODE_STRING String2)
; SrvNetSetConnectionOptions(__int64 a1, __int16 a2)
; SrvNetSetConnectionActiveCount(__int64 a1, int a2)
; SrvNetSetConnectionInstanceId(__int64 a1, char a2)
; SrvLibCreateAclForSid(__int64 a1)
; SrvLibCreateSelfSD(__int64 a1, __int64 a2, __int64 a3)
; RfsTable64SetSignature(__int64 a1, __int64 a2, __int64 a3)
; RtlStringCbCopyUnicodeString(__int64 a1, unsigned __int64 a2, unsigned __int16 *a3)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; RtlStringCbCatNW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbMaxAppend)
; SrvNetCreateAndCacheSessionKey(unsigned __int8 a1, __int64 a2, int *a3, int a4)
; SrvNetSetConnectionServerName(__int64 a1, __int64 a2, __int64 a3)
; SrvNetWskSetKeepAlive(__int64 a1)
; SrvNetWskSetMaxRT(__int64 a1)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; SrvNetDecrementConnectionActiveCount(__int64 a1)
; RtlUnicodeStringCopyStringEx(__int64 a1, __int64 a2, __int64 a3)
; ConvertInterfaceGuidToIndex(__int64 a1, __int64 a2)
; SrvLibSetSrvErrorLogIgnore(unsigned int a1, int a2)
; SrvLibLookasideCreatePool(PVOID (__stdcall *a1)(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag), void (__stdcall *a2)(PVOID Buffer), ULONG a3, SIZE_T a4, ULONG a5, USHORT a6)
; SrvAdminSetUserLimit(int a1)
; RfsTableCreate(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5)
; RfsHashTableCreate(__int64 a1, int a2, int a3, int a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; RfsTable64Create(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)
; PplCreateLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, __int64 a8, __int64 a9, char a10)
; SvcShareSetInfo(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; XsOpenPrinter(__int64 a1)
; XsProcDownLevelAPI(__int64 a1)
; SrvNetRdmaReadWriteDataCallback(__int64 a1, __int64 a2)
; SrvAdminDoesPipeAllowAnonymous(PCUNICODE_STRING String2)
; SrvAdminDoesShareAllowAnonymous(__int64 a1)
; SvcNodeSetInfo(__int64 a1, __int64 a2)
; SrvLibIsDottedDnsName(__int64 a1, __int64 a2)
; SrvNetCreate(__int64 a1, __int64 a2)
; SrvNetSetConnectionInboundMessageSizeLimit(__int64 a1, int a2)
; SrvAdminSetSessionName(__int64 a1, __int64 a2, const UNICODE_STRING *a3, int a4)
; SrvLibCreateNegotiateHandle(__int64 a1, __int64 a2, void *a3, unsigned int *a4)
; SrvNetSetConnectionInformation(__int64 a1, int a2, __int64 a3, int a4)
; OpenEndpointHandle(PVOID DeviceName, PVOID Name, PHANDLE FileHandle, PVOID *Object)
; OpenConnectionHandle(__int64 a1)
; IssueSetEventHandlerRequest(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; LoadUserDefinedFsctlAllowList(__int64 *a1, unsigned int *a2)
; SrvNetWskOpenListenSocket(__int64 a1, __int64 a2)
; SrvLibCreateCredentialHandle(__int64 a1, __int64 a2, __int64 a3)
; SetRegistryParameter(wchar_t *Str1, int a2, unsigned int *a3, unsigned int a4)
; SrvAdminNodeSetInfo(unsigned int a1, unsigned int a2, unsigned int a3)
; SrvLibSetDWord(PCWSTR SourceString, PCWSTR a2, int a3)
; SrvNetSetInterfaceEndpoint(__int64 a1)
; SrvNetSetEndpointFlag(__int64 a1, __int64 a2, int a3)
; SrvNetSetEndpointFlagEx(__int64 a1, __int16 a2, __int64 a3)
; SrvNetReadDirectData(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SrvXsDownLevelAPI(__int64 a1)
; SrvXsDownLevelAPI_filt_0(__int64 a1, __int64 a2)
; SrvXsOpenPrinter(__int64 a1, __int64 a2, __int64 a3)
; SrvXsOpenPrinter_filt_0(__int64 a1, __int64 a2)
; SrvNetRdmaCreateListener(__int64 a1, __int64 a2, __int64 a3)
; SrvNetRdmaReadDirectData(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SrvAdminSetSessionIsCsvUser(__int64 a1, char a2, int a3)
; SvcXportSetInfo(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\stexstor.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\storahci.c ;
; AhciSetF1IdleTimer(__int64 a1)
; AhciPortPowerDown(__int64 a1)
; IssueReadLogExtCommand(__int64 a1, __int64 a2, char a3, __int16 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9)
; ReadQueryLogPage(__int64 a1, __int64 a2, unsigned __int16 a3)
; IssuePreservedSettingCommands(__int64 a1)
; SetDateAndTimeCompletion(__int64 a1, __int64 a2)
; BuildSetDateAndTimeTaskFile(__int64 a1)
; SetAllowedLpmStates(__int64 a1)
; AhciLpmSettingsModes(__int64 a1, int a2)
; AhciPortPowerSettingNotification(__int64 a1, __int64 a2)
; AhciPortSetDevslpIdleTimeout(__int64 a1)
; AhciPortSetDevslpDetoAndMdat(__int64 a1)
; Set_PxIE(__int64 a1, __int64 a2)
; ReadMultiSzRegistryValueAndCompareId(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, size_t *a5, unsigned int *a6, __int64 a7, unsigned int a8)
; GetMiniportRegistrySettings(__int64 a1)
; GetAdapterRegistrySettings(__int64 a1)
; GetDeviceRegistrySettings(__int64 a1)
; DigestDeviceRegistrySettings(__int64 a1)
; UpdateSetFeatureCommands(__int64 a1, char a2, char a3, char a4, char a5)
; RestorePreservedSettings(__int64 a1, char a2)
; SrbConvertToATAPICommand(__int64 a1, __int64 a2, __int64 a3)
; SrbConvertToATACommand(__int64 a1, __int64 a2, __int64 a3, int a4)
; BuildReadWriteCommand(__int64 a1, __int64 a2, __int64 a3, int a4)
; AtaReadCapacityCompletion(__int64 a1, __int64 a2)
; AtaReadCapacityRequestCompletion(__int64 a1, __int64 a2)
; AtaReadCapacityRequest(__int64 a1, __int64 a2, __int64 a3, int a4)
; CopyField(__int64 a1, unsigned __int8 *a2, __int64 a3)
; HybridSetDirtyThreshold(__int64 a1, __int64 a2)
; ConvertDataSetRangeToAtaLbaRanges(__int64 a1, unsigned __int64 *a2, __int64 a3, unsigned __int64 a4)
; TelemetrySetHostSettings(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\stornvme.c ;
; BuildReadWriteCommand(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5)
; ScsiReadCapacityRequest(__int64 a1, __int64 a2, __int64 a3, int a4)
; ScsiReadWriteRequest(__int64 a1, __int64 a2, __int64 a3, int a4)
; NVMeFirmwareDownloadCompletion(__int64 a1, __int64 a2)
; FirmwareDownload(__int64 a1, __int64 a2)
; NVMeSetIoQueueCountCompletion(__int64 a1, __int64 a2, __int64 a3)
; NVMeSetIoQueueCount(__int64 a1, unsigned __int8 a2, char a3)
; NVMeSetInterruptCoalescing(__int64 a1, char a2)
; NVMeSetArbitration(__int64 a1, char a2)
; NVMeSetSenseData(__int64 a1, char a2, __int64 a3, unsigned __int8 a4)
; ReadMultiSzRegistryValueAndCompareId(__int64 a1, __int64 a2, __int64 a3, __int64 *a4, size_t *a5, unsigned int *a6, __int64 a7, unsigned int a8, __int64 a9)
; GetRegistrySettings(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\storport.c ;
; RaidXrbSetDataBufferAddress(__int64 a1, __int64 a2, char a3)
; RaidHandleCreateCloseIrp(int a1, __int64 a2)
; RaUnitCreateIrp(__int64 a1, __int64 a2)
; RaidSetUnitPauseTimer(__int64 a1, unsigned int a2)
; StorPortSetDeviceQueueDepth(__int64 a1, char a2, char a3, char a4, int a5)
; StorUpdateCrashDumpPowerReady(__int64 a1, __int64 a2)
; RaidAdapterSetDevicePowerCompletionRoutine(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; RaidAdapterSetDevicePowerIrp(__int64 a1, __int64 a2)
; RaidAdapterSetPowerIrp(__int64 a1, __int64 a2, __int64 a3)
; RaidAdapterSetSystemPowerIrp(__int64 a1, __int64 a2)
; RaidAdapterSetSystemPowerCompletion(__int64 a1, __int64 a2)
; RaidAdapterPowerDownDevice(__int64 a1, __int64 a2)
; RaidAdapterDevicePowerDownSrbComplete(__int64 a1)
; RaidAdapterPowerDownDeviceCompletion(__int64 a1, __int64 a2)
; RaidUnitProcessSetDevicePowerIrp(__int64 a1, __int64 a2)
; RaidUnitProcessSetDevicePowerIrpComplete(__int64 a1, __int64 a2)
; RaidUnitSetPowerIrp(__int64 a1, __int64 a2)
; RaidUnitSetDevicePowerIrp(__int64 a1, __int64 a2)
; RaidUnitSetDevicePowerCompletionRoutine(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; RaidUnitSetSystemPowerIrp(__int64 a1, __int64 a2)
; RaidXrbSetCompletionRoutine(__int64 a1, __int64 a2)
; RaidUnitConvertToNormalUnit(__int64 a1)
; PortRegistrySetValueKey(HANDLE KeyHandle, const WCHAR *a2, ULONG a3, unsigned __int16 *a4, ULONG a5)
; RaidUnitPoFxSetDeviceIdleTimeout(__int64 a1, unsigned int a2)
; StorCreateIoGateway(PKSPIN_LOCK SpinLock)
; StorCreateDictionary(__int64 a1)
; PortMapOpenKey(__int64 a1)
; *StorSetFunctionExtensionTable())(__int64 a1)
; RaidCreateUnit(__int64 a1, __int64 a2)
; RaidUnitSetInitialQueueDepth(__int64 a1)
; RaUnitSetQueueDepth(__int64 a1, __int64 a2, __int64 a3)
; StorCreateAnsiString(__int64 a1, const void *a2, int a3, __int64 a4, void *a5)
; RaidCreateAdapter(void *a1)
; RaidCreateDeferredQueue(void *a1)
; StorCreateScsiSymbolicLink(PUNICODE_STRING DeviceName, __int64 a2)
; RaidUnitSetEnumerated(__int64 a1, char a2)
; RaidAdapterCreateDevmapEntry(__int64 a1)
; RaidCreateDeviceName(void *a1, UNICODE_STRING *a2, __int64 a3)
; StorPortRegistryRead(__int64 a1, const char *a2, int a3, int a4, __int64 a5, __int64 a6)
; PortMiniportRegistryRead(__int64 a1, __int64 a2, int a3, __int64 *a4)
; StorPortReady(__int64 a1)
; StorSetIoGatewayNotBusy(__int64 a1)
; RaidAdapterSetPauseTimer(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; RaidAdapterDeviceReady(__int64 a1, unsigned int a2)
; RaidPowerSettingCallback(__int64 a1, __int64 a2, int a3, __int64 a4)
; RaidpLinkDown(__int64 a1)
; StorPortDeviceReady(__int64 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
; StorPortReadPortBufferUchar(__int64 a1, unsigned __int16 a2, unsigned __int8 *a3, unsigned int a4)
; StorPortReadPortBufferUlong(__int64 a1, unsigned __int16 a2, unsigned int *a3, unsigned int a4)
; StorPortReadPortBufferUshort(__int64 a1, unsigned __int16 a2, unsigned __int16 *a3, unsigned int a4)
; StorPortReadPortUchar(__int64 a1, unsigned __int16 a2)
; StorPortReadPortUlong(__int64 a1, unsigned __int16 a2)
; StorPortReadPortUshort(__int64 a1, unsigned __int16 a2)
; StorPortReadRegisterBufferUchar(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; StorPortReadRegisterBufferUlong(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; StorPortReadRegisterBufferUshort(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; StorPortReadRegisterUchar(__int64 a1, __int64 a2)
; StorPortReadRegisterUlong(__int64 a1, __int64 a2)
; StorPortReadRegisterUshort(__int64 a1, __int64 a2)
; StorPortSetBusDataByOffset(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned int a6)
; StorPortpSetPowerSettingNotificationGuids(__int64 a1, unsigned int a2, __int64 a3)
; StorpSetUnitAttributes(__int64 a1, __int64 a2, int a3)
; RaUnitRequestPowerDown(__int64 a1)
; RaidSetD3Cold(PDEVICE_OBJECT DeviceObject)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; StorCreateSystemLogEntry(PVOID IoObject, __int64 a2, __int64 a3)
; RaUnitSetAtaPassThroughCdb(__int64 a1, __int64 a2)
; RaidUnitConvertToZombieUnit(__int64 a1)
; RaidUnitSetDefaultWriteCachePolicy(__int64 a1)
; StorPortConvertUlongToPhysicalAddress(__int64 a1)
; StorSetIoGatewayEmptyEvent(__int64 a1, struct _KEVENT *a2)
; RaidDecodeSmRegistryBlob(__int64 a1)
; PortpBinaryReadCallBack(__int64 a1, __int64 a2, const void *a3, unsigned int a4, __int64 a5, __int64 a6)
; StorSqmCreateStringStreamEntry(__int64 a1, __int64 a2)
; RaDriverCreateIrp(__int64 a1, __int64 a2)
; PortPassThroughSetAddress(__int64 a1, char a2, char a3, char a4)
; RaUnitStorageDataSetManagementIoctl(__int64 a1, __int64 a2)
; PortRegistryRead(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; *__fastcall RaCreateDriver(void *a1))(__int64 a1)
; RaidCreateDma(void *a1)
; RaCopyPaddedString(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4)
; RaCreateMiniport(__int64 a1)
; RaCreateTagList(__int64 a1)
; RaCreateBus(__int64 a1)
; RaidCreateResourceList(__int64 a1)
; PortRegistryReadDeviceKey(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; PortRegistryReadWithHandle@<rax>(__int64 a1@<rdx>, void *a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>)
; PortGetRegistrySettings(UNICODE_STRING *a1, unsigned int a2, __int64 a3)
; PortOpenDeviceKey(UNICODE_STRING *a1, unsigned int a2)
; RaSaveDriverInitData(__int64 a1, const void *a2)
; PortReadStorageBusType(UNICODE_STRING *a1, __int64 a2)
; PortpReadBusType(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
; PortpOpenParametersKey(UNICODE_STRING *a1)
; PortpReadDriverParameterEntry(HANDLE KeyHandle, __int64 a2)
; PortpReadLinkTimeoutValue(HANDLE KeyHandle)
; PortpReadNumberOfRequestsEntry(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
; PortpReadMinimumUCXAddressEntry(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
; PortpReadMaximumUCXAddressEntry(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
; PortpReadMaximumLogicalUnitEntry(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
; PortReadRegistrySettings(HANDLE KeyHandle, __int64 a2)
; PortpReadUncachedExtAlignmentEntry(HANDLE KeyHandle, PVOID KeyValueInformation, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\storvsc.c ;
; StorChannelCopySrbToPacket(__int64 a1, __int64 a2)
; ProcgrpSetSystemGroupAffinityThread(__int64 a1, __int64 a2)
; ProcgrpSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
; StorChannelOpen(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int16 a5, int a6, __int64 a7, __int64 a8, __int64 a9)
; StorChannelOpenSubChannel(__int64 a1, unsigned __int16 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\stream.c ;
; SCSetCurrentDPowerState(__int64 a1, int a2)
; SciCreateSymbolicLinks(__int64 a1, unsigned int a2, __int64 a3)
; StreamClassReadWriteConfig(PVOID HwDeviceExtension, BOOLEAN Read, PVOID Buffer, ULONG Offset, ULONG Length)
; StreamClassCompleteRequestAndMarkQueueReady(PHW_STREAM_REQUEST_BLOCK Srb)
; SCSetMasterClockWhenDeviceInaccessible(__int64 a1, __int64 a2)
; SciSetMasterClockInfo(__int64 a1, __int64 a2)
; IoWorkerRead(__int64 a1)
; DMABuffer::DoneMapping(DMABuffer *this, DMATransfer *a2)
; SCOpenMinidriverInstance(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SCCheckPowerDown(__int64 a1)
; SCCopyMinidriverProperties(unsigned int a1, const void *a2)
; SCCopyMinidriverEvents(unsigned int a1, const void *a2)
; SCCopyMinidriverMethods(unsigned int a1, const void *a2)
; SCCreateChildPdo(__int64 a1, __int64 a2, int a3)
; FilterDispatchGlobalCreate(PVOID Object, PIRP Irp)
; StreamDispatchCreate(__int64 a1, __int64 a2)
; SCOpenStreamCallback(__int64 a1)
; SCStreamSetFormat(__int64 a1, __int64 a2, __int64 a3)
; StreamClassMinidriverDeviceSetProperty(__int64 a1, __int64 a2, __int64 a3)
; StreamClassMinidriverStreamSetProperty(__int64 a1, __int64 a2, __int64 a3)
; ClockDispatchCreate(__int64 a1, __int64 a2)
; AllocatorDispatchCreate(__int64 a1, __int64 a2)
; SCOpenMasterCallback(__int64 a1)
; SCSetMasterClock(__int64 a1, __int64 a2, HANDLE *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\swenum.c ;
; DispatchCreate(PDEVICE_OBJECT DeviceObject, PIRP Irp)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tape.c ;
; TapeReadWriteVerification(__int64 a1, __int64 a2)
; TapeReadWrite(__int64 a1, __int64 a2)
; CreateTapeDeviceObject(char *a1, struct _DEVICE_OBJECT *a2, __int64 a3, char a4)
; TapeCreateSymbolicName(__int64 a1, char a2)
; TapeCreateUniqueId(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TapeCreateNewDeviceSubKey(void *a1, unsigned int *a2, HANDLE *a3)
; TapeCreateNonPersistentSymbolicName(void *a1, unsigned int *a2, __int64 a3, wchar_t *a4)
; TapeSetWmiDataBlock(__int64 a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tbs.c ;
; Tbsi_Context_Create(__int64 a1, __int64 a2)
; TbsBase64Decode(const unsigned __int16 *a1, unsigned __int8 *a2, unsigned int *a3)
; TpmOpen(PHANDLE FileHandle)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tdi.c ;
; TdiCopyBufferToMdl(PVOID SourceBuffer, ULONG SourceOffset, ULONG SourceBytesToCopy, PMDL DestinationMdlChain, ULONG DestinationOffset, PULONG BytesCopied)
; TdiCopyMdlToBuffer(PMDL SourceMdlChain, ULONG SourceOffset, PVOID DestinationBuffer, ULONG DestinationOffset, ULONG DestinationBufferSize, PULONG BytesCopied)
; TdiOpenNetbiosAddress(PHANDLE FileHandle, PUCHAR Buffer, PVOID DeviceName, PVOID Name)
; TdiProviderReady(HANDLE ProviderHandle)
; TdiCopyBufferToMdlWithReservedMappingAtDpcLevel(PVOID SourceBuffer, PMDL DestinationMdl, ULONG DestinationOffset, ULONG BytesToCopy)
; TdiCopyMdlChainToMdlChain(PMDL SourceMdlChain, ULONG SourceOffset, PMDL DestinationMdlChain, ULONG DestinationOffset, PULONG BytesCopied)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tdx.c ;
; TdxSynchronousTlCreateRequestComplete(__int64 a1, int a2, __int64 a3, __int64 a4)
; TdxCreateControlChannel(__int64 a1, __int64 a2, char a3, __int64 a4)
; TdxTcpSetInformationEx(__int64 a1, __int64 a2)
; TdxTcpSetInformationConnectionEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, char a6)
; TdxTdiDispatchCreate(__int64 a1, __int64 a2)
; TdxCreateConnection(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TdxSetEventTransportAddress(__int64 NewIrql, __int64 a2, __int64 a3)
; TdxCreateTransportAddress(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; TdxDecrementTlEndpointReference(__int64 a1, KIRQL a2, char a3)
; TdxSetOptionsConnection(__int64 a1, KIRQL a2)
; TdxCreateAndRegisterNetAddress(int a1, __int64 a2, unsigned int a3, __int64 a4)
; TdxCreateAndRegisterDeviceObject(__int64 a1, int a2, __int64 a3, __int64 a4)
; TdxDecrementNotReadyInterfaceCount(int a1, __int64 a2, __int64 a3)
; TdxIncrementNotReadyInterfaceCount(int a1, __int64 a2, __int64 a3)
; TdxProviderReadyTimeoutRoutine(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; TdxProviderReadyWorkItemRoutine(__int64 a1, __int64 a2, __int64 a3)
; TdxTcpSetInformationTransportAddressEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\terminpt.c ;
; PtCreate(__int64 a1, __int64 a2, __int64 a3)
; PtSetWmiDataItem(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3)
; PtSetWmiDataBlock(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3)
; TiCreate(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tm.c ;
; TmpCreateLogFile(__int64 a1)
; TmpCreateOrOpenLogTransactionManager(__int64 a1)
; TmReadOnlyEnlistmentExt(void *a1, __int64 a2)
; TmSetCurrentTransactionExt(__int64 a1)
; TmpTxActionDoPrePrepare@<rax>(__int64 a1@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; TmpTxActionDoPrePrepareComplete@<rax>(PVOID Object@<rcx>, __int64 a2@<rbp>)
; TmpTxActionDoPrepare@<rax>(PVOID Object@<rcx>, __int64 a2@<rbp>)
; TmpTxActionDoPrepareComplete@<rax>(PVOID Object@<rcx>, __int64 a2@<rbp>)
; TmpTxActionDoCommit@<rax>(PVOID Object@<rcx>, __int64 a2@<rbp>)
; TmpTxActionDoCommitComplete@<rax>(PVOID Object@<rcx>, __int64 a2@<rbp>, __int64 a3@<r8>)
; TmpTxActionDoRollback(__int64 a1, __int64 a2, __int64 a3)
; TmpTxActionDoRollbackComplete(PRKEVENT Event, __int64 a2, __int64 a3)
; TmpSetTransactionProperties(PVOID Object, __int64 a2, unsigned int a3)
; TmpOpenResourceManager(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TmpSetNotificationResourceManager(PRKEVENT Event, __int64 a2, __int64 a3, size_t Size, void *Src, size_t Sizea, void *Srca)
; NtCreateEnlistmentExt(PVOID a1, unsigned int a2, HANDLE Handle, HANDLE a4, __int64 a5, int a6, int a7, __int64 a8)
; TmCreateEnlistmentExt(PVOID a1, unsigned __int8 a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6, int a7, int a8, __int64 a9)
; NtOpenEnlistmentExt(unsigned __int64 a1, int a2, __int64 a3, __m128i *a4, __int64 a5)
; NtSetInformationEnlistmentExt(HANDLE Handle, int a2, SIZE_T a3, unsigned int a4)
; NtReadOnlyEnlistmentExt(void *a1, unsigned __int64 a2)
; NtCreateResourceManagerExt(unsigned __int64 a1, unsigned int a2, void *a3, __m128i *a4, __int64 a5, unsigned int a6, unsigned __int64 a7)
; NtOpenResourceManagerExt(unsigned __int64 a1, unsigned int a2, void *a3, __m128i *a4, __int64 a5)
; NtSetInformationResourceManagerExt(HANDLE Handle, int a2, void *a3, int a4)
; TmpCreateInternalCrmTransaction(void *a1, char a2, void *a3, __int64 a4, __int64 a5)
; TmpCreateInternalCrmEnlistment(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5, __int64 a6, PVOID *a7, HANDLE *a8)
; NtCreateTransactionExt(HANDLE Handle, unsigned int a2, __int64 a3, __m128i *a4, __int64 Handlea, int a6, int a7, __int64 a8, __int64 a9, __int64 a10)
; NtOpenTransactionExt(HANDLE Handle, unsigned int a2, __int64 a3, unsigned __int64 a4, HANDLE Handlea)
; NtSetInformationTransactionExt(HANDLE Handle, int a2, void *a3, unsigned int a4)
; NtCreateTransactionManagerExt(unsigned __int64 a1, unsigned int a2, __int64 a3, unsigned __int64 a4, unsigned int a5)
; NtOpenTransactionManagerExt(unsigned __int64 a1, unsigned int a2, __int64 a3, unsigned __int64 a4, unsigned __int64 a5)
; NtSetInformationTransactionManagerExt(void *a1, int a2, __int64 a3, int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tpm.c ;
; TpmCore::PcrRead(TpmCore *this, __int64 a2, unsigned __int8 *a3)
; TpmTransportTis::WaitForBitSet<unsigned char>(TpmTransport *this, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, __int64 a9)
; TpmTransport::SetCancelState(__int64 a1, int a2)
; TpmEvtIrpPreprocessSetPower(__int64 a1, __int64 a2)
; TpmSetMorBitState(struct _DEVICE_OBJECT *a1, char a2)
; Tpm20Context::CreateInternalTpm20Request(struct Tpm20Context *a1, struct _TPM20RM_COMPLETION *a2, void (__stdcall static *a3)(struct _TPM20RM_COMPLETION *), void *a4, unsigned int a5, void *a6, unsigned int a7, struct Tpm20Request **a8)
; Tpm20Context::CreateTpm20Request(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, int a6, __int64 a7, unsigned int a8, __int64 a9, unsigned int a10, __int64 a11)
; Tpm20ResourceMgr::ContextSaveAllResources(Tpm20ResourceMgr *this)
; Tpm20ResourceMgr::ContextSaveResource(Tpm20ResourceMgr *this, struct Tpm20Resource *a2)
; Tpm20ResourceMgr::CreateTpm20Context(Tpm20ResourceMgr *this, struct Tpm20Context **a2)
; Tpm20ResourceMgr::CreateTpm20ResourceMgr(struct TpmTransport *a1, int a2, struct Tpm20ResourceMgr **a3)
; Tpm20ResourceMgr::LoadObject(Tpm20ResourceMgr *this, struct Tpm20Resource *a2, unsigned int a3, struct Tpm20Resource **a4)
; Tpm20ResourceMgr::LoadObjects(Tpm20ResourceMgr *this, unsigned int a2, struct Tpm20Resource **a3)
; Tpm20ResourceMgr::LoadedUnloadedResource(__int64 a1, __int64 a2, int a3)
; Tpm20ResourceMgr::RemovedLoadedResource(Tpm20ResourceMgr *this, struct Tpm20Context *a2, struct Tpm20Resource *a3)
; Tpm20ResourceMgr::UnloadedLoadedResource(Tpm20ResourceMgr *this, struct Tpm20Resource *a2)
; Tpm20Scheduler::CreateTpm20Scheduler(struct WDFDEVICE__ *a1, int a2, struct Tpm20ResourceMgr *a3, struct TpmTransport *a4, struct Tpm20Scheduler **a5)
; Tpm20Scheduler::DoS4S5Start(Tpm20Scheduler *this, __int64 a2)
; Tpm20Scheduler::DoSaveTpmStateAndSignalSuspended(Tpm20Scheduler *this, __int64 a2, __int64 a3)
; TpmStack::CreateTpmStack(struct WDFDEVICE__ *a1, struct TpmDevice *a2, struct TpmStack **a3)
; TpmBufferAccessor::Append<unsigned char>(__int64 a1, char a2, __int64 a3)
; TpmBufferAccessor::Append<unsigned short>(__int64 a1, __int16 a2, __int64 a3)
; TpmBufferAccessor::Append<unsigned int>(__int64 a1, int a2, __int64 a3)
; TpmBufferAccessor::Append(TpmBufferAccessor *this, const void *a2, unsigned int a3, void *a4)
; TpmCore::ReadCounterByLabel(TpmCore *this, int a2, unsigned int *a3, unsigned int *a4)
; TpmCore::ReadTpmFlags(TpmCore *this, __int64 a2, unsigned __int8 *a3)
; TpmDevice::CreateContext(TpmDevice *this, void **a2)
; TpmReadPortByte(unsigned __int8 *a1, int a2)
; TpmRegCreateKey(struct _UNICODE_STRING *a1, void *a2)
; TpmCreateHiddenDummyDevice(__int64 a1)
; TpmEvtDeviceFileCreate(__int64 a1, __int64 a2, __int64 a3)
; TpmEvtDeviceFileCreateFail(__int64 a1, __int64 a2)
; TpmResourceManager::CanLoadResource(TpmResourceManager *this, int a2, unsigned __int8 *a3, __int64 a4, int *a5)
; TpmResourceManager::CreateResource(TpmResourceManager *this, struct TpmContext *a2, int a3, unsigned int a4, int a5, struct TpmResource **a6)
; TpmResource::Load(TpmResource *this, struct TpmResourceManager *a2)
; TpmResourceManager::LoadResource(TpmResourceManager *this, struct _LIST_ENTRY *a2, int a3, struct TpmResource **a4)
; TpmResourceManager::SaveContext(TpmResourceManager *this, int a2, unsigned __int8 **a3, unsigned int *a4)
; TpmScheduler::LoadKey2@<rax>(TpmScheduler *this@<rcx>, struct TpmContext *a2@<rdx>, unsigned __int8 *a3@<r9>, __int64 a4@<rbx>, unsigned int a5, unsigned __int8 *a6, unsigned int a7, unsigned int *a8)
; TpmSWAntiHammeringMgr::LoadConfiguration(TpmSWAntiHammeringMgr *this)
; TpmSWAntiHammeringMgr::LoadUserAuthFailures(TpmSWAntiHammeringMgr *this)
; TpmSWAntiHammeringMgr::_ReadUserAuthFailureData(TpmSWAntiHammeringMgr *this, const unsigned __int16 *a2)
; RtlStringCbCopyNW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, size_t cbSrc)
; TpmTransportType::CreateTpmTransport(struct WDFDEVICE__ *a1, int a2, struct TpmTransport **a3)
; TpmTransportMemBase::CopyFromResponseBuffer(TpmTransportMemBase *this, __int64 a2, void *a3, unsigned int a4)
; TpmTransportMemBase::CopyToCommandBuffer(TpmTransportMemBase *this, __int64 a2, void *a3, unsigned int a4)
; TpmTransportMemBase::TreeVendorSetupPowerRelations(TpmTransportMemBase *this, struct WDFIOTARGET__ *a2)
; TpmTransportMemBase::TreeVendorSetupWorkItemCb(PDEVICE_OBJECT DeviceObject, PVOID Context)
; TpmTransportMemBase::TreeVendorSetupWorkItemDestroy(TpmTransportMemBase *this, struct TpmTransportMemBase::TREE_SETUP_WI_CONTEXT *a2)
; TpmUserAuthFailureData::SetAuthFailureHistoryData(TpmUserAuthFailureData *this, unsigned __int64 *a2, unsigned int a3)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; Tpm20CmdContextLoad(struct TpmTransport *a1, unsigned int a2, struct _TPM20_CONTEXT_BLOB_CMD *a3, union _TPM20_HANDLE *a4)
; Tpm20CmdContextSave(TpmTransport *a1, int a2, unsigned int a3, __int64 a4)
; Tpm20CmdLoad(TpmTransport *a1, unsigned int a2, const void *a3, unsigned int a4)
; Tpm20CmdPcrRead(struct TpmTransport *a1, __int64 a2, void *a3)
; Tpm20CmdReadPublic(TpmTransport *a1, unsigned int a2, void *a3, int *a4)
; Trustpoint::AppendToWbcl(unsigned __int8 *Src, size_t Size)
; BufferAccessor::Append(BufferAccessor *this, const void *a2, unsigned int a3)
; Utils::CreateSidString(const unsigned __int16 **a1)
; RtlStringCchCopyNW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, size_t cchSrc)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\TsUsbFlt.c ;
; CUsbBusFilter::CreateInstance(struct WDFDEVICE__ *a1, char a2, void *a3, struct CUsbBusFilter **a4)
; CUsbPdoFilter::CreateInstance(struct WDFDEVICE__ *a1, struct _DEVICE_OBJECT *a2, struct _GUID *a3, struct _EPROCESS *a4, const unsigned __int16 *a5, struct CUsbPdoFilter **a6)
; CUsbFilterControl::CreateInstance(struct WDFDRIVER__ *a1, struct CUsbFilterControl **a2)
; CUsbFilterControl::EvtDeviceFileCreate(CUsbFilterControl *this, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
; CUsbFilterIoTarget::CreateInstance(struct WDFDEVICE__ *a1, struct WDFDEVICE__ *a2, struct CUsbFilterIoTarget **a3)
; FcEvtDeviceFileCreate(__int64 a1, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\TsUsbGD.c ;
; CGenericUSB::CreateInstance(struct WDFDEVICE__ *a1, CGenericUSB *this, struct CGenericUSB **a3)
; CGenericUSB::EvtDeviceFileCreate(CGenericUSB *this, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
; CSimpleHash::CreateInstance(__int64 a1, struct CSimpleHash **a2)
; CTsUrbResult::CreateInstance(void *a1, unsigned __int8 *a2, unsigned int a3, __int64 a4, struct CSimpleHash *a5, struct CSimpleHash *a6, struct CSimpleHash *a7, struct _MDL *a8, struct CTsUrbResult **a9)
; GdEvtDeviceFileCreate(__int64 a1, struct WDFREQUEST__ *a2, struct WDFFILEOBJECT__ *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\tunnel.c ;
; RtlAcquireReadLock(PKSPIN_LOCK SpinLock, __int64 a2)
; TunnelSetDirectInformation(__int64 a1, __int64 a2, int a3, __int64 a4, int a5, __int64 a6)
; TunnelSetInformation(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; TunnelNlSetCurrentAddress(__int64 a1, __int64 a2, int a3, __int64 a4)
; TunnelInitSetGeneralAttributes(__int64 a1, __int64 a2)
; TunnelInitSetMiniportAttributes(__int64 a1, __int64 a2)
; PplCreateLookasideList(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, int a6, ULONG Tag, ULONG Taga)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, int a5, ULONG Tag, int a7, __int64 Taga, __int64 a9, char a10)
; TunnelEtherUdpDeviceCreate(__int64 a1, __int64 a2, __int64 a3)
; TunnelEtherUdpSetCurrentAddress(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; TunnelCpConvertAddressToTid(__int64 a1, __int64 a2)
; TunnelCpHandleTransitionToActiveDormantIrp(PIRP Irp, __int64 a2, char a3)
; TeredoWfpLocateOrCreateV4Flow(int a1, int a2, __int16 a3, __int16 a4, char a5, __int64 a6)
; TeredoWfpLocateOrCreateV6Flow(__int64 a1, __int64 a2, char a3, char a4, __int64 a5)
; CpProvidersTransitionProviderToDormant(__int64 a1)
; CpSafeRpcCallInsertInSet(__int64 a1, __int64 a2)
; CpSafeRpcCallRemoveFromSet(__int64 a1, __int64 a2)
; CpSafeRpcCallSetInitialize(PKSPIN_LOCK SpinLock)
; TtCreateTable(__int64 a1, __int16 a2)
; TunnelDriverDispatchCreate(__int64 a1, __int64 a2)
; TunnelDriverDispatchRead(__int64 a1, __int64 a2)
; TunnelConvertInterfaceIndexToLuid(int a1, __int64 a2)
; TunnelReadStringFromRegistry(NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, PCWSTR SourceString, PUNICODE_STRING DestinationString, PUNICODE_STRING DestinationStringa)
; TunnelServiceReadRequests(__int64 a1, __int64 a2)
; TunnelTeredoSetCurrentAddress(__int64 a1, __int64 a2, int a3, __int64 a4)
; TunnelUserCancelPendingReads(__int64 a1)
; TunnelUserCreateFile(__int64 a1, __int64 a2, __int64 a3)
; TunnelUserDequeueReadIrp(__int64 a1, __int64 a2)
; TunnelUserGetAndCreateDevice(__int64 a1, void *a2, __int64 a3, UNICODE_STRING *a4)
; TunnelUserGetNextReadIrp(__int64 a1)
; TunnelUserIoCancelRead(__int64 a1, __int64 a2)
; TunnelUserPauseOrPowerDown(__int64 a1)
; TunnelUserReadFile(__int64 a1, __int64 a2)
; TunnelUserSatisfyRead(__int64 a1, __int64 a2, __int64 a3)
; TunnelUserServiceBatchedReadRequests(PVOID DeferredContext, __int64 a2, __int64 a3, char a4)
; TunnelUserSetCurrentAddress(__int64 a1, unsigned __int64 a2, unsigned int a3, __int64 a4)
; TunnelRegCreateKey(__int64 a1, const WCHAR *a2)
; TunnelRegSetDwordValue(PCWSTR SourceString, PCWSTR a2, int a3)
; TunnelRegSetStringValue(PCWSTR SourceString, __int64 a2, void *a3)
; CpWfpCallCalculateAndSetCompleteAction(__int64 a1)
; CpWfpCallExecuteAndDereferenceSet(__int64 a1, __int64 a2, __int64 a3)
; CpWfpCallRemoveFromSet(__int64 a1)
; CpWfpExtractReadyCalls(__int64 a1, __int64 a2)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; TunnelEtherUdpSetMode(__int64 a1, int a2)
; TunnelEtherUdpCreateDatagramSocket(__int64 a1, __int64 a2)
; TunnelEtherUdpCreateDatagramSocketComplete(__int64 a1, __int64 a2, __int64 a3)
; TunnelEtherUdpSetSocketOptionComplete(__int64 a1, __int64 a2, __int64 a3)
; TunnelEtherUdpSetDatagramReceiveEvent(__int64 a1, char a2)
; TunnelEtherUdpSetSocketOption(__int64 a1)
; TunnelEtherUdpCreateDatagramContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; TunnelEtherUdpCreateNetBufferContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; TunnelEtherUdpCreatePacketListContext(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; TunnelEtherUdpCreateDataChannel(__int64 a1, __int64 a2, __m128i *a3, __int16 a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\UAGP35.c ;
; AgpSetAperture(__int64 a1, __int64 a2, __int64 a3)
; Uagp35SetRate(__int64 a1, unsigned int a2, __int64 a3)
; ApGetSetDeviceBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; AgpLibReadAgpTargetConfig(__int64 a1, __int64 a2, unsigned int a3)
; AgpLibSetAgpCapability(__int64 a1, __int64 a2, __int64 a3)
; ApSetExtendedAgpCapability(__int64 a1, __int64 a2, int a3, __int64 a4)
; ApSetTargetCapability(__int64 a1, __int64 a2)
; AgpLibSetExtendedTargetCapability(__int64 a1, int a2, __int64 a3)
; ApLegacySetBusData(__int64 a1, __int64 a2, __int64 a3)
; AgpVerifierSetTargetCapability(__int64 a1, __int64 a2)
; AgpSetEventCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; Uagp35CreateGart(__int64 a1)
; AgpInterfaceSetRate(__int64 a1, int a2, __int64 a3)
; AgpOpenKey(PCWSTR SourceString, void *a2, HANDLE *a3, __int64 a4)
; AgpSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\uaspstor.c ;
; OpenStreamArray(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; ReadyIUCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CancelReadyIrp(__int64 a1)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, __int64 a3, __int64 a4)
; StorSqmSetString(__int64 a1, int a2, __int64 a3, __int64 a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\UCX01000.c ;
; Ucx_FailDueToVerifierSetting(unsigned int a1)
; RootHub_StaticPdoSetup(__int64 a1, __int64 a2, __int64 a3)
; UcxRootHubCreate(__int64 a1, __int64 a2, const void *a3, int *a4, __int64 a5)
; RootHub_Pdo_EvtSetPowerIrpPreprocessCallback(__int64 a1, __int64 a2)
; UsbDevice_Create(__int64 a1, __int64 a2, __int64 a3)
; UsbDevice_SetPdoInformation(__int64 a1, __int64 a2, __int64 a3)
; UcxUsbDeviceInitSetEventCallbacks(__int64 a1, __int64 a2, const void *a3)
; UcxUsbDeviceCreate(__int64 a1, __int64 a2, __int64 a3, __int64 *a4)
; DefaultEndpoint_Create(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; Endpoint_Create(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; UcxDefaultEndpointInitSetEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; UcxEndpointInitSetEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; UcxEndpointSetWdfIoQueue(__int64 a1, __int64 a2, __int64 a3)
; UcxEndpointCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; UcxControllerCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; UcxControllerSetFailed(__int64 a1, __int64 a2)
; UrbHandler_USBPORTStyle_Legacy_SCT_GetSetDescriptor(__int64 a1, __int64 a2, PVOID Context, __int64 a4)
; UrbHandler_USBPORTStyle_Legacy_SCT_SetClearFeature(__int64 a1, __int64 a2, PVOID Context, __int64 a4)
; UcxEndpointStateEntryFunc_NeedToSetStale(__int64 a1)
; UcxEndpointStateEntryFunc_SettingEnabledFlag1(__int64 a1)
; StaticStreams_Create(__int64 a1, int a2, __int64 a3)
; UcxStaticStreamsSetStreamInfo(__int64 a1, __int64 a2, __int64 a3)
; UcxStaticStreamsCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; UsbUserIoctl_CheckAndSetParamLength(__int64 a1)
; Etw_UcxControllerCreate(__int64 a1, __int64 a2)
; Etw_UcxEndpointCreate(__int64 a1, __int64 a2)
; Wmi_Create(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\udfs.c ;
; UdfSetMetaSectorState(__int64 a1, int a2, int a3, __int64 a4)
; UdfConvertNtTimeToUdfTime(__int64 a1, LARGE_INTEGER *a2, __int64 a3)
; UdfSetDirtyFid(__int64 a1, __int64 a2)
; UdfConvertUdfTimeToNtTime(__int64 a1, __int64 a2, LARGE_INTEGER *a3)
; UdfCreateFileLock(__int64 a1, __int64 a2, char a3)
; UdfDomainIdentifierContained(__int64 a1, __int64 a2, unsigned __int16 a3, unsigned __int16 a4)
; UdfSetThreadContext(__int64 a1, __int64 a2)
; UdfCreateFileTimesEa(__int64 a1, __int64 a2)
; UdfCreateLink(__int64 a1, __int64 a2, __int64 a3, int a4, unsigned int a5, char a6, __int64 a7, __int64 a8, __int64 a9, char a10)
; UdfSetVolumeDirtyState(__int64 a1, char a2)
; UdfMarkVolumeOpenAndQueueCloseDpc(__int64 a1)
; UdfVmcbSetSectorState(__int64 a1, __int64 a2, int a3, int a4, __int64 a5)
; UdfRmwReadWriteSectors(PVOID VirtualAddress, unsigned int a2, int a3, __int64 a4, char a5, int a6)
; UdfTearDownAllocationSupport(__int64 a1, __int64 a2)
; UdfCreateNewIcb(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, __int64 a6, char a7)
; UdfSetFileAllocationSize(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, char a6, char a7)
; UdfCopyMoveMcbAllocation(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6)
; UdfCreateSparseReservationBitmap(__int64 a1, __int64 a2)
; UdfCreateInternalStream(__int64 a1, __int64 a2, __int64 a3, __m128i *a4)
; UdfTearDownSpecialScb(__int64 a1, __int64 a2, __int64 a3)
; UdfCommonCreate@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; UdfOpenObjectByFileId@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 *a5@<r9>, int a6)
; UdfOpenExistingScb(__int64 a1, __int64 a2, __int64 *a3, __int64 a4, __int64 a5, unsigned int a6, char a7, char a8, char a9, __int64 a10, int a11)
; UdfOpenObjectFromDirContext@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 *a5@<r9>, __int64 a6, char a7, __int64 a8, __int64 a9, __int64 a10, __int64 *a11, int a12)
; UdfCompleteScbOpen@<eax>(__int64 VirtualAddress@<rcx>, __int64 a2@<rdx>, __int64 a3@<rbp>, __int64 a4@<r8>, __int64 *a5@<r9>, __int64 a6, __int64 a7, unsigned int a8, int a9, int a10, char a11)
; UdfOpenStreamDirectory(__int64 a1, __int64 a2, int a3)
; UdfCreateNewFile(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 *a4, char a5, char a6, unsigned int a7)
; UdfDvdReadStructure(__int64 a1, __int64 a2, __int64 a3)
; UdfReadWriteSectors(__int64 a1, unsigned __int64 a2, __int64 a3, char a4, PVOID Buffer, PDEVICE_OBJECT DeviceObject, char a7)
; UdfCommonSetInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>)
; UdfFillNetworkOpenInfo(__int64 a1, __int64 a2, __int64 a3)
; UdfSetEndOfFileInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5)
; UdfSetAllocationInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 *a5)
; UdfSetDispositionInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; UdfSetBasicInfo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; UdfSetRenameInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; UdfSetLinkInfo@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbp>, __int64 a4@<r8>)
; UdfSetHiddenAttribute(__int64 a1, __int64 a2, __int64 a3, char a4)
; UdfDecodeFileObject(__int64 a1, __int64 a2, __int64 a3)
; UdfSetDefectManagement(__int64 a1, __int64 a2)
; UdfFindFileSetDescriptor(__int64 a1, __int64 a2, __int64 a3, void **a4)
; UdfCheckForOpenRMedia(__int64 a1, struct _DEVICE_OBJECT *a2, __int64 a3, __int64 a4)
; UdfSetPurgeFailureMode(__int64 a1, __int64 a2)
; UdfConvertUnicodeToCS0Dstring(__int64 a1, __int64 a2, char a3, __int64 a4)
; UdfConvertCS0DstringToUnicode(__int64 a1, __int64 a2, unsigned __int8 a3, unsigned __int8 a4, __int64 a5)
; UdfPowTrackInfoSave(__int64 a1, __int64 a2)
; UdfCommonRead(__int64 a1, __int64 a2, __int64 a3)
; UdfFilterCallbackAcquireForCreateSection(__int64 a1)
; UdfReleaseForCreateSection(__int64 a1)
; UdfCreateOrResetVatAndVmcbStreams(__int64 a1, __int64 a2, int a3, __int64 a4, unsigned __int16 a5)
; UdfCreateIrpContext(__int64 a1, char a2)
; UdfCreateScb(__int64 a1, __int64 a2, __int16 a3, __int64 a4, __int64 a5)
; UdfVmcbCheckForNoOpRead(__int64 a1, __int64 a2, int a3, int a4)
; UdfVmcbNoOpRead(__int64 a1, __int64 a2, int a3, int a4, signed __int32 a5)
; UdfCommonSetVolInfo(__int64 a1, __int64 a2)
; UdfSetFsLabelInfo(__int64 a1, __int64 a2, int a3)
; UdfSeqCacheTearDown(__int64 a1, __int64 a2)
; UdfSeqCacheReadBlocksForFile(__int64 a1, __int64 a2, __int64 a3, int a4)
; UdfLoadSparingTables(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; UdfTearDownRmwSupport(__int64 a1, __int64 a2)
; UdfReadDiscInfo(struct _DEVICE_OBJECT *a1, void *a2, unsigned int a3)
; UdfReadTrackInfo(struct _DEVICE_OBJECT *a1, char a2, void *a3, unsigned int a4)
; UdfReadFormattableCapacity(struct _DEVICE_OBJECT *a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\uefi.c ;
; RtlStringCbCopyExW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, wchar_t **ppszDestEnd, size_t *pcbRemaining, unsigned __int32 dwFlags)
; UefiOpenRegistryKey(__int64 a1, __int64 a2, __int64 a3, HANDLE *a4)
; UefiCreateRegistryKey(__int64 a1, PHANDLE KeyHandle, __int64 a3, __int64 a4, ULONG *a5, HANDLE *KeyHandlea)
; UefiOpenDeviceClassRegistryKey(GUID *Guid, __int64 a2, HANDLE *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ULIAGPKX.c ;
; AgpSetAperture(__int64 a1, __int64 a2, __int64 a3)
; Gagp30KxSetRate(__int64 a1, unsigned int a2, __int64 a3)
; KxSetGartBase(signed __int64 a1)
; KxSetApertureSize(int a1)
; KxSetApertureEnable(char a1, char a2, char a3)
; ApGetSetDeviceBusData(__int64 a1, char a2, __int64 a3, __int64 a4, int a5)
; AgpLibReadAgpTargetConfig(__int64 a1, __int64 a2, unsigned int a3)
; AgpLibSetAgpCapability(__int64 a1, __int64 a2, __int64 a3)
; ApSetExtendedAgpCapability(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ApSetTargetCapability(__int64 a1, __int64 a2)
; ApLegacySetBusData(__int64 a1, __int64 a2, __int64 a3)
; AgpVerifierSetTargetCapability(__int64 a1, __int64 a2)
; AgpSetEventCompletion(__int64 a1, __int64 a2, struct _KEVENT *a3)
; Gagp30KxCreateGart(__int64 a1)
; AgpInterfaceSetRate(__int64 a1, int a2, __int64 a3)
; AgpOpenKey(PCWSTR SourceString, void *a2, HANDLE *a3, __int64 a4)
; AgpSetWmiDataBlock(struct _DEVICE_OBJECT *a1, struct _IRP *a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\umbus.c ;
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; UMBus_GetRegistrySettings(__int64 a1)
; UMBus_CreateChild(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4)
; UMBus_SetChildPresence(__int64 a1, __int64 a2)
; UMBus_CreateChildNode(__int64 a1, size_t Size, __int64 a3, __int64 a4)
; UMBus_EvtDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; UMBus_CreatePdo(__int64 a1, unsigned int a2, const void *a3, __int64 a4)
; UMBus_GetPDORegistrySettings(__int64 a1)
; UMBus_SetPDORegistryValues(__int64 a1)
; UMBus_SetPropertyValue(__int64 a1, __int64 a2, int a3)
; UMBus_CreateProperty(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\umpass.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usb8023.c ;
; TryReadUSB(PVOID Context)
; ReadPipeCompletion(__int64 a1, __int64 a2, __int64 a3)
; SubmitNotificationRead(__int64 a1, char a2)
; ReadPacketFromControlPipe(__int64 a1, char a2)
; ControlPipeReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; EnqueueCompletedReadPacket(__int64 a1)
; SimulateRNDISSetPacketFilter(__int64 a1)
; SimulateRNDISSetCurrentAddress(__int64 a1)
; CopyMdlToBuffer(__int64 a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usb8023x.c ;
; TryReadUSB(PVOID Context)
; ReadPipeCompletion(__int64 a1, __int64 a2, __int64 a3)
; SubmitNotificationRead(__int64 a1, char a2)
; ReadPacketFromControlPipe(__int64 a1, char a2)
; ControlPipeReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; EnqueueCompletedReadPacket(__int64 a1)
; SimulateRNDISSetPacketFilter(__int64 a1)
; SimulateRNDISSetCurrentAddress(__int64 a1)
; CopyMdlToBuffer(__int64 a1, __int64 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\USBAUDIO.c ;
; DeviceCreate(__int64 a1)
; USBCaptureSetClientBufferTime(__int64 a1, int a2)
; USBMidiInCreatePin(__int64 a1)
; USBMidiOutCreateBulkUrbs(PKSSTREAM_POINTER StreamPointer)
; DeviceSetPowerState(__int64 a1, __int64 a2, int a3, int a4)
; DriverCopyRegistryString(__int64 a1, __int64 a2)
; FilterCreate(void *a1)
; FilterCreateFilterPropertySets(__int64 a1, __int64 a2, __int64 *a3)
; FilterCreateFilterFactory(__int64 a1)
; PinCreate(PKSPIN Pin)
; PinSetDataFormat(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; DecrementActivePinCount(void *a1)
; PinSetDeviceState(__int64 a1, unsigned int a2, int a3)
; IntersectConvertDatarangeToFormat(__int64 a1, __int64 a2, __int64 a3)
; TopologyConvertTermTypeToNodeType(__int64 a1, __m128i *a2, __m128i *a3)
; TopologyPUUpDownMix(__int64 a1, __int64 a2, __int64 a3)
; PropertyGetSetSampleRate(struct _IRP *a1, __int64 a2, unsigned int *a3)
; PropertySetClientBufferDuration(struct _IRP *a1, __int64 a2, unsigned int *a3)
; SetCopyProtectionOnTerminal(PIRP Irp, unsigned int a2, __int64 a3)
; PropertyDrmAudioStream_SetContentId(PIRP Irp, __int64 a2, __int64 a3)
; PropertySetFeatureValue(PIRP Irp, __int64 a2, __int64 a3)
; PropertySetBoolean(PIRP Irp, __int64 a2, __int64 a3)
; PropertySetDbLevel(PIRP Irp, __int64 a2, __int64 a3)
; PropertyGetSetMuxSource(PIRP Irp, __int64 a2, __int64 a3)
; PropertySetMixerLevels(PIRP Irp, __int64 a2, __int64 a3)
; PropertyGetSetChannelConfiguration(PIRP Irp, __int64 a2, __int64 a3)
; PropertySetTopologyNodeEnable(PIRP Irp, __int64 a2, __int64 a3)
; RegistryReadNameValue(unsigned int a1, void *a2, ULONG *a3, __int64 a4)
; RegistryCreateMediaCategoriesKey(UNICODE_STRING *a1, HANDLE *a2)
; RegistryReadPnPKeyValue(struct _DEVICE_OBJECT *a1, const WCHAR *a2, __int64 a3, __int64 a4)
; USBDeviceCreate(__int64 a1)
; USBDeviceSetPowerState(__int64 a1, int a2)
; USBHwGetSetProperty(__int64 a1, __int16 a2, int a3, char a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int64 a9, int a10)
; USBHwGetSetByte(__int64 a1, __int16 a2, __int16 a3, __int16 a4, __int64 a5, char a6)
; USBHwGetSetShort(__int64 a1, __int16 a2, __int16 a3, __int16 a4, __int64 a5, char a6)
; USBHwGetSetMemory(__int64 a1, char a2, char a3, __int16 a4, __int16 a5, __int16 a6, __int64 a7, __int64 a8)
; USBParseCreateMIDLegacyInterfaceList(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, __int64 a2)
; USBParseCreateInterfaceList(PVOID StartPosition, struct _USB_INTERFACE_DESCRIPTOR *a2, __int64 a3)
; USBParseConvertControlUnits(__int64 a1)
; USBParseConvertMIDIJacksAndElements(__int64 a1)
; USBParseConvertUnitsToFunctionUnits(__int64 a1)
; USBParseConvertInterfaceToDataRange(struct _USB_CONFIGURATION_DESCRIPTOR *a1, struct _USB_INTERFACE_DESCRIPTOR *a2, __int64 a3)
; USBCntrlGetSetDbLevel@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, signed int *a3@<r8>, unsigned int a4@<r9d>, __m128d *a5@<xmm4>, __m128i *a6@<xmm5>, __m128i *a7@<xmm6>, __m128d *a8@<xmm7>, int a9, __int64 a10)
; USBCntrlGetSetBoolean(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, char a5, __int64 a6)
; USBCntrlGetSetGEQ(__int64 a1, __int64 a2, signed int *a3, unsigned int a4, int a5)
; USBCntrlGetSetProcessingUnitValue(__int64 a1, __int64 a2, char a3, __int16 a4, __int64 a5, int a6)
; USBCntrlGetSetProcessingUnitEnable(__int64 a1, __int64 a2, char a3, __int64 a4)
; USBCntrlGetSetMixerLevels(__int64 a1, __int64 a2, unsigned int a3, int a4, __int64 a5, unsigned int a6, signed int *a7)
; USBCntrlGetSetMem(struct _IRP *a1, __int64 a2, __int64 a3)
; USBCntrlGetFilterPropertySet(__int64 a1, __int64 a2, __int64 a3)
; USBType1SetSampleRate(__int64 a1, int a2)
; USBType1SetCopyProtect(__int64 a1, int a2, __int16 a3)
; USBType1Create1MsecBuffers(__int64 a1)
; USBType1RenderCreatePin(PVOID *PointerToPointerToItem)
; USBCaptureCreatePin(PVOID *PointerToPointerToItem)
; USBCaptureCopyRequestToBuffer(__int64 a1, __int64 a2, unsigned __int64 a3)
; USBMidiInCopyEvent(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 a5)
; USBMidiOutCreatePin(__int64 a1)
; USBMidiOutCreateFirstByte(__int64 a1, __int64 a2, unsigned __int8 a3)
; USBMidiOutCreateSecondByte(__int64 a1, __int64 a2, char a3)
; USBMidiOutCreateThirdByte(__int64 a1, __int64 a2, char a3)
; USBMIDICreateEventPackets(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\USBCAMD2.c ;
; USBCAMD_CompleteReadRequest(__int64 a1, __int64 a2, char a3)
; USBCAMD_SetIsoPipeState(__int64 a1, int a2)
; USBCAMD_SetIsoPipeWorkItem(__int64 a1)
; USBCAMD_ProcessSetIsoPipeState(__int64 a1, __int64 a2, int a3)
; AdapterOpenStream(__int64 a1)
; USBCAMD_SetVideoFormat(__int64 a1, __int64 a2)
; USBCAMD_CompleteRead(__int64 a1, __int64 a2, int a3, int a4)
; USBCAMD_OpenChannel(__int64 a1, __int64 a2, __int64 a3)
; USBCAMD_ReadChannel(__int64 a1, __int64 a2, __int64 a3)
; USBCAMD_SetDevicePowerState(__int64 a1, __int64 a2)
; USBCAMD_BulkReadWrite(__int64 a1, unsigned __int16 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; USBCAMD_ProcessStillReadWorkItem(PVOID P)
; USBCAMD_CancelBulkReadWrite(__int64 a1, unsigned int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbccgp.c ;
; DispatchPdoSetPower_SetParentD0Completion(PVOID PeekContext, PVOID Tag, int a3)
; CallbackFdoDeviceSetD0(__int64 a1)
; DispatchFdoSetPower(PVOID Context, PIRP Irp, __int64 a3)
; CompletionFdoSystemSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context)
; CompletionFdoDeviceSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context)
; DispatchPdoSetPower(PVOID PeekContext, __int64 a2, __int64 a3)
; FdoSendSetPowerRequest(POWER_STATE a1, void (__fastcall *a2)(__int64 a1), void *a3, __int64 a4)
; CallbackFdoDeviceSetDx(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; SetPdoIdle(__int64 a1, __int64 a2, int a3, unsigned __int8 a4, char a5)
; SetCompletionRoutine(__int64 a1, struct _DEVICE_OBJECT *a2, struct _IRP *a3, NTSTATUS (__stdcall *a4)(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context), PVOID Context)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3)
; RtlStringCchCopyA(char *pszDest, size_t cchDest, const char *pszSrc)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, __int64 a3, __int64 a4, __int64 a5)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; PoCallbackIdleSetDx(__int64 a1, __int64 a2, __int64 a3, struct _KEVENT *a4)
; ParentSetD0(__int64 a1, char a2, __int64 a3, __int64 a4, __int64 a5)
; RtlStringCopyWorkerW_0(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; UsbcDecrementPendingCount(__int64 a1, __int64 a2)
; SendSetFeatureControlRequestForFunctionSuspend(__int64 a1, __int64 a2, __int64 a3, int a4)
; SetSelectiveSuspendRegistryFlag(__int64 a1, __int64 a2)
; SyncSendSetFeatureControlRequestForFunctionSuspend(__int64 a1, __int64 a2, int a3)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; CreateStaticFunctionPDOs(__int64 a1)
; GetMsOs20DescriptorSet(__int64 a1)
; CreateFunctionList(__int64 a1)
; USBC_Create(__int64 a1, __int64 a2)
; USBC_SetContentId(__int64 a1, __int64 a2, __int64 a3)
; AppendPdoIds(void *Src, __int64 a2)
; D3ColdSupportInterfaceFunctionSetD3ColdSupport(__int64 a1, char a2)
; IsMSOSCompatibleIDFlagSet(__int64 a1)
; SetFunctionHandleData(__int64 a1, __int64 a2, __int64 a3)
; SetPdoRegistryParameter(PDEVICE_OBJECT DeviceObject, __int64 Type, void *a3, ULONG a4, ULONG Typea)
; CreateFunctionDescriptorArray(unsigned __int8 a1, __int64 a2)
; KsPropertyHandleDrmSetContentId(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbcir.c ;
; UsbIrSetupNextRequest(__int64 a1, __int64 a2, __int64 a3)
; IrSetupCurrentReceive(__int64 a1, __int64 a2)
; IrSetupCurrentPriorityReceive(__int64 a1, __int64 a2)
; SetCarrierInfo(__int64 a1, unsigned __int16 a2)
; SetIrTxPorts(__int64 a1, char a2)
; SetIrRxPort(__int64 a1, unsigned __int8 a2)
; SetIrTimeout(__int64 a1, unsigned __int16 a2)
; UsbIrConfigContReaderForInterruptEndPoint(__int64 a1)
; UsbIrEvtUsbInterruptPipeReadComplete(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)
; UsbIrEvtUsbInterruptPipeReadFailed(__int64 a1, __int64 a2, int a3)
; UsbIrReadGlobalParameters(__int64 a1)
; UsbIrReadWakeProtocolAndPayloadFromRegistry(__int64 a1)
; CreateLegacyPowerKeyFirmwareString(__int64 a1, int a2, __int64 a3, int a4, __int64 *a5)
; UsbIrReadWakeFirmwareFromRegistry(__int64 a1, int a2, PVOID P, int a4, __int64 a5, __int64 a6, PVOID Pa)
; UsbIrEvtDeviceFileCreate(__int64 a1, __int64 a2)
; FtReadEE(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4)
; IrSetWakePattern(__int64 a1, __int64 a2, unsigned __int64 a3)
; LegacyGetBootLoaderVersion(__int64 a1, __int64 a2)
; DoBeanBagDownload(__int64 a1, unsigned int a2, __int64 a3)
; DoSnowFlakeDownload(__int64 a1, unsigned int a2, __int64 a3)
; DoCommonDownload(__int64 a1, unsigned int a2, int a3, __int64 a4, __int64 a5, __int64 a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbd.c ;
; USBD_CreateConfigurationRequest(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PUSHORT Siz)
; USBD_CreateConfigurationRequestEx(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PUSBD_INTERFACE_LIST_ENTRY InterfaceList)
; USBD_ParseConfigurationDescriptor(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, UCHAR InterfaceNumber, UCHAR AlternateSetting)
; USBD_ParseConfigurationDescriptorEx(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PVOID StartPosition, LONG InterfaceNumber, LONG AlternateSetting, LONG InterfaceClass, LONG InterfaceSubClass, LONG InterfaceProtocol)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbehci.c ;
; EHCI_IsAsyncDoorbellPending(__int64 a1)
; EHCI_SetPeriodicScheduleState(__int64 a1, int a2)
; EHCI_SetAsyncScheduleState(__int64 a1, int a2)
; EHCI_AcquireAsyncDoorbellLock(__int64 a1, __int64 a2)
; EHCI_SetEndpointStatus(__int64 a1, __int64 a2, __int64 a3)
; EHCI_SetAsyncEndpointStatus(__int64 a1, __int64 a2, int a3)
; EHCI_SetEndpointDataToggle(__int64 a1, __int64 a2, int a3)
; EHCI_ProcessDoneAsyncTd(__int64 a1, __int64 a2, __int64 a3)
; EHCI_DecPendingTransfer(__int64 a1, __int64 a2, __int64 a3)
; EHCI_RH_SetWakeConnect(__int64 a1, char a2)
; EHCI_SetEndpointState(__int64 a1, __int64 a2, int a3)
; EHCI_SetAsyncEndpointState(__int64 a1, __int64 a2, int a3)
; EHCI_ClearAsyncDoorbellList(__int64 a1)
; EHCI_SetAsyncDoorbellState(__int64 a1, int a2)
; EHCI_RH_SetFeaturePortSuspend(__int64 a1, __int16 a2)
; EHCI_ReadUlongRegValue(__int64 a1, __int64 a2, unsigned int a3, int a4, __int64 a5, __int64 a6, int a7)
; EHCI_CreateDeviceData(__int64 a1)
; EHCI_ReadUlongRegFlag(__int64 a1, __int64 a2, unsigned int a3, int a4, __int64 a5, __int64 a6, int a7)
; EHCI_RH_SetFeaturePortPower(__int64 a1, unsigned __int16 a2)
; EHCI_ReadConfigFlag(__int64 a1)
; EHCI_OpenEndpoint(__int64 a1, __int64 a2, __int64 a3)
; EHCI_OpenBulkOrControlEndpoint(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4)
; EHCI_RH_SetFeaturePortReset(__int64 a1, unsigned __int16 a2, __int64 a3)
; EHCI_OpenInterruptEndpoint(__int64 a1, __int64 a2, __int64 a3)
; EHCI_OpenHsIsochronousEndpoint(__int64 a1, __int64 a2, __int64 a3)
; EHCI_OpenIsochronousEndpoint(__int64 a1, __int64 a2, __int64 a3)
; EHCI_SetIsoEndpointState(__int64 a1, __int64 a2, int a3)
; EHCI_AnswerAsyncDoorbell(__int64 a1)
; EHCI_RingAsyncDoorbell(__int64 a1)
; EHCI_ReadQcHsicDbg1Register(__int64 a1)
; EHCI_SetPortResumeTime(__int64 a1, unsigned __int16 a2, char a3, unsigned __int8 a4)
; EHCI_ResetControllerDontReinit(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbhub.c ;
; UsbhDecPdoIoCount(ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter4)
; UsbhFdoSetD0Warm(__int64 DeviceObject, __int64 a2)
; UsbhPdoSetD0_Finish(__int64 a1, __int64 a2, __int64 a3)
; UsbhSet_D0_wQueued_Action(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UsbhSetSuspendPending(__int64 a1, __int64 a2)
; UsbhFdoSetPowerSx_Action(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context)
; UsbhSet_Pdo_Dx(PDEVICE_OBJECT DeviceObject, POWER_STATE State)
; UsbhSshSetPortsBusyState(__int64 a1, unsigned __int16 a2, int a3, int a4)
; UsbhDecrementHubIsrWorkerReference(__int64 a1)
; UsbhSetTimer(__int64 a1, int a2, __int64 a3, struct _KDPC *a4, int a5, char a6)
; UsbhPCE_wDone(__int64 a1, __int64 a2, __int64 a3)
; Usbh_UsbdReadFrameCounter(__int64 a1)
; Usbh_PCE_wDone_Action(__int64 a1, __int64 a2)
; UsbhSetPcqEventStatus(__int64 a1, __int64 a2, int a3, int a4)
; UsbhSetPausePending(__int64 a1, __int64 a2)
; UsbhSetResumePending(__int64 a1, __int64 a2)
; UsbhFdoSetPowerDx_Action(__int64 DeviceObject, __int64 a2, __int64 a3)
; UsbhSshResumeDownstream(__int64 a1, __int64 a2, char a3)
; UsbhFdoPower_SetPower(__int64 DeviceObject, __int64 Irp)
; UsbhSetFdoPowerState(__int64 a1, int a2, int a3, int a4)
; UsbhSetHubRemoteWake(__int64 a1, char a2)
; UsbhFdoSetPowerD0_Action(__int64 a1, __int64 a2, __int64 a3)
; UsbhFdoSetPowerS0_Action(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context)
; Usbh_HRS_WaitReady(__int64 a1, int a2)
; UsbhPdoSetD0(PDEVICE_OBJECT DeviceObject, unsigned int a2, __int64 a3)
; UsbhSetPdoPowerState(__int64 a1, __int64 a2, __int64 a3, int a4, int a5)
; UsbhPdoPower_SetPower(__int64 a1, ULONG_PTR a2)
; UsbhSetPdoIdleReady(__int64 a1, __int64 a2, __int64 a3)
; Usbh_HubSetDeviceHandleIdleReadyState(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; UsbhClearPdoIdleReady(__int64 a1, __int64 a2, __int64 a3)
; UsbhPdoSetDx(__int64 a1, __int64 a2, __int64 a3)
; UsbhSetIdleIrpState(__int64 a1, __int64 a2, int a3, int a4, KIRQL a5)
; UsbhFdoSetD0Cold(__int64 DeviceObject, __int64 a2, char a3)
; UsbhCreateDevice(__int64 a1, __int64 a2, unsigned __int16 a3, unsigned __int16 a4)
; UsbhBusIf_SetContainerIdForPort(__int64 a1, unsigned __int16 a2, __int64 a3)
; UsbhSetPortPower(__int64 a1, unsigned __int16 a2)
; UsbhSetPortData(__int64 a1, __int64 a2, __int64 a3)
; UsbhReferenceListOpen(__int64 a1)
; UsbhSetFdoPnpState(__int64 a1, int a2, int a3)
; UsbhCreatePdo(__int64 a1, __int64 a2)
; UsbhReadPdoRegistryKeys(__int64 a1, struct _DEVICE_OBJECT *a2)
; UsbhGetGlobalUxdSettings(__int64 a1, void *a2)
; UsbhSetupDevice(__int64 a1, __int64 a2, __int64 a3)
; UsbhCreateConfigurationRequestEx(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; UsbhPdoSetDeviceData(__int64 a1, __int64 a2, __int64 a3)
; UsbhPdoCreateSymbolicLink(PDEVICE_OBJECT DeviceObject, GUID *InterfaceClassGuid)
; UsbhSetPdo_AllowIo(__int64 a1, __int64 a2)
; UsbhUpdateUxdSettings(__int64 a1, __int64 a2, char a3, __int64 a4)
; UsbhSetPdoRegistryParameter(PDEVICE_OBJECT DeviceObject, PCWSTR SourceString, ULONG Type, PVOID Data, ULONG a5)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; UsbhFdoPnp_DoDefault(__int64 a1, __int64 a2)
; UsbhCopyPnpString(__int64 a1, __int64 a2)
; UsbhPdoPnp_DoDefault(__int64 a1, __int64 a2)
; Usbh_SetPdo_SELECTIVESUSPENDED_INSTALLED(__int64 a1, __int64 a2, __int64 a3, int a4)
; UsbhSetOutOfBandwidthTimer(__int64 a1, unsigned __int16 a2, int a3, int a4)
; UsbhSetPindicatorState(__int64 a1, __int64 a2, int a3)
; UsbhSetPortIndicator(__int64 a1, __int16 a2, __int16 a3)
; Usbh_PIND_SetAuto_Action(__int64 a1, __int64 a2, __int64 a3)
; Usbh_PIND_SetBlink_Action(__int64 a1, __int64 a2, __int64 a3)
; UsbhGetMsOs20DescriptorSet(__int64 a1, __int64 a2, __int64 a3)
; UsbhPCE_ResumeDone(__int64 a1, __int64 a2, unsigned __int16 a3)
; Usbh_PCE_ResumeDone_Action(__int64 a1, __int64 a2, __int64 a3)
; UsbhSetPdo_FailIo(__int64 a1)
; Usbh_HRS_PausedWaitDone(__int64 a1, int a2)
; Usbh_HRS_WaitDone(__int64 a1, int a2)
; USBHUB_BugCheckSaveHubExtData(KBUGCHECK_CALLBACK_REASON Reason, struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record, PVOID ReasonSpecificData, ULONG ReasonSpecificDataLength)
; USBHUB_BugCheckSavePortArrayData(KBUGCHECK_CALLBACK_REASON Reason, struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record, PVOID ReasonSpecificData, ULONG ReasonSpecificDataLength)
; UsbhResetNotifyDownstreamHub(__int64 a1)
; UsbhSetHubOvercurrentDetectedKey(__int64 a1)
; UsbhSetHubSelectiveSuspend(__int64 a1, char a2)
; UsbhSetPdoSelectiveSuspendedKey(__int64 a1, __int64 a2, struct _DEVICE_OBJECT *a3)
; Usbh_SetFORCE_PORT_POWER(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetFORCE_SINGLE_TT(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetHUB_OVERCURRENT_DETECTED(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetHUB_SELECTIVE_SUSPEND(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetPdoEXT_PROPERTY_INSTALLED(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetPdoFRIENDLY_NAME(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetPdo_ALLOWIDLEIRPIND3_INSTALLED(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetPdo_USBPDO_D3COLDRECONNECTTIMEOUT_INSTALLED(__int64 a1, __int64 a2, __int64 a3, int a4)
; Usbh_SetWAKE_ON_CONNECT(__int64 a1, __int64 a2, __int64 a3, int a4)
; UsbhSetWmiDataBlock(__int64 a1, struct _IRP *a2, int a3, int a4, unsigned int a5, __int64 a6)
; UsbhWmiDoNothing(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; UsbhBusIf_SetClearRootPortResumeTime(__int64 a1, __int64 a2, char a3, char a4)
; UsbhBusIf_SetMsOs20Support(__int64 a1, __int64 a2, __int64 a3, char a4)
; UsbhSetEnumerationFailed(__int64 a1, __int64 a2, __int64 a3, int a4, void *a5)
; UsbhValidateBOSDescriptorSet(__int64 a1, __int64 a2, int a3, char *a4)
; UsbhValidateMsOs20DescriptorSet(__int64 a1, __int64 a2, __int64 a3)
; UsbhValidateMsOs20DescriptorSetHeader(__int64 a1, __int64 a2, __int64 *a3)
; UsbhD3ColdSupportInterfaceSetD3ColdSupport(__int64 a1, char a2)
; UsbhPdoCheckBootDeviceReady(__int64 a1)
; UsbhIdleExIrp_IdleReady(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, KIRQL a6)
; UsbhDeleteUxdPortSettings(__int64 a1, const WCHAR *a2, unsigned int a3)
; UsbhDeleteUxdSettings(__int64 a1, __int64 a2, int a3)
; UsbhGetUxdLoadKeySettings(__int64 a1, void *a2, const WCHAR *a3, void *a4)
; UsbhOpenUxdPortHandle(__int64 a1, __int64 a2)
; KsPropertyHandleDrmSetContentId(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\USBHUB3.c ;
; HUBHTX_CheckAndSelectIfAny30PortChangeSet(__int64 a1)
; HUBSM_FindAndSetTargetState(__int64 a1, __int64 a2, __int64 a3)
; HUBMUX_QueuePowerDownEventToDSMs(__int64 a1, unsigned int a2)
; HUBPSM30_DoesDeviceSupportsReAttachWithResetInProgress(__int64 a1)
; HUBHTX_CheckAndSelectIfAny20PortChangeSet(__int64 a1)
; HUBHTX_SettingPortPowerUsingControlTransfer(__int64 a1)
; HUBFDO_PowerSettingCallback(void *Source1, int *a2, unsigned int a3, __int64 a4)
; RtlStringCbCatNA(char *pszDest, size_t cbDest, const char *pszSrc, size_t cbMaxAppend)
; HUBMUX_CreateChildPSMs(__int64 a1)
; HUBMUX_CreatePSM(__int64 a1, __int64 a2)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, __int64 a3, __int64 a4)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; HUBHTX_SetLinkStateToSSDisabledUsingControlTransfer(__int64 a1)
; HUBHTX_SetLinkStateToRxDetectUsingControlTransfer(__int64 a1)
; HUBPARENT_SetHubConfigurationComplete(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; HUBPARENT_SetHubConfiguration(__int64 a1)
; HUBHSM_SettingHubConfiguration(__int64 a1)
; HUBHSM_SettingHubDepth(__int64 a1)
; HUBPSM20_CheckingIfConnectBitChangeSetOnResume(__int64 a1)
; HUBPSM30_SettingU1TImeOut(__int64 a1)
; HUBPSM30_SettingU2TImeOut(__int64 a1)
; HUBPDO_D3ColdSupportInterfaceSetD3ColdSupport(__int64 a1, char a2)
; HUBPDO_RegisterForPowerSettingsForDevice(__int64 a1)
; HUBPDO_RegisterForPowerSettingsForHub(__int64 a1)
; HUBPDO_PowerSettingCallback(void *Source1, __int64 a2, unsigned int a3, __int64 a4)
; HUBPDO_OpenDummyHandleOnParentStack(__int64 a1)
; HUBID_AppendStringToIDString(__int64 a1, __int64 a2)
; HUBDSM_FlushingHubPowerDownEventsForFailedDevice(__int64 a1)
; HUBDSM_SettingConfigurationInformationInClientRequest(__int64 a1)
; HUBDSM_SettingExitLatencyAdjustmentOnNoPingResponseError(__int64 a1)
; HUBDSM_SettingForceResetOnRenumFlag(__int64 a1)
; HUBDSM_SettingInterfaceInformationInClientRequest(__int64 a1)
; HUBDSM_StoppingTimerOnHubSuspendInSettingAddress(__int64 a1)
; HUBDSM_SettingSpeedFlagFor20Devices(__int64 a1)
; HUBDSM_SettingVersionFlagInEnumerating(__int64 a1)
; HUBDSM_CheckingIfIgnoreHWSerNumIsSet(__int64 a1)
; HUBDSM_CheckingIfWaitRequiredAfterSetAddress(__int64 a1)
; HUBDSM_SettingNonZeroAddress(__int64 a1)
; HUBDSM_WaitingForTimerAfterSetAddress(__int64 a1)
; HUBDSM_GetMsOs20DescriptorSet(__int64 a1)
; HUBDSM_ValidatingMsOs20DescriptorSetIfPresent(__int64 a1)
; HUBDSM_CheckingIfRequestConfigDescOnResetIsSet(__int64 a1)
; HUBDSM_DeconfiguringEndpointsInControllerForDeviceConfiguration(__int64 a1)
; HUBDSM_ProgrammingEndpointsInControllerAfterDecreasingExitLatency(__int64 a1)
; HUBDSM_SettingDeviceInterfaceInSettingInterfaceOnFailureForCompat(__int64 a1)
; HUBDSM_CheckingIfResetOnLastResumeFlagIsSet(__int64 a1)
; HUBDSM_SettingResetOnLastResumeFlagForPDOAfterD3Cold(__int64 a1)
; HUBDSM_SettingResetOnLastResumeFlagForPDO(__int64 a1)
; HUBDSM_SettingExtPropDescSemaphoreForMsOs2(__int64 a1)
; HUBDSM_CheckingIfSetIsochDelayShouldBeSkipped(__int64 a1)
; HUBDSM_CheckingIfSetSelShouldBeSkipped(__int64 a1)
; HUBDSM_SettingSEL(__int64 a1)
; HUBDSM_SetttingIsochDelay(__int64 a1)
; HUBDSM_CheckingIfExitLatencyNeedsToBeDecreased(__int64 a1)
; HUBDSM_QueuingSetU1TimeoutToPsm(__int64 a1)
; HUBDSM_QueuingSetU2TimeoutToPsm(__int64 a1)
; HUBUCX_CreateDefaultEndpointInUCX(__int64 a1)
; HUBUCX_CreateDeviceInUCX(__int64 a1)
; HUBUCX_CreateEndpointsInUCX(__int64 a1)
; HUBDTX_SetDeviceInterfaceUsingControlTransfer(__int64 a1)
; HUBDTX_SetDeviceNullConfigurationUsingControlTransfer(__int64 a1)
; HUBDTX_SetSelUsingControlTransfer(__int64 a1)
; HUBMISC_SetDeviceVersionFlag(__int64 a1)
; HUBMISC_CreateNewDSM(__int64 a1)
; HUBMISC_IsBootDeviceReady(__int64 a1)
; HUBMISC_ConvertUsbDeviceIdsToString(__int64 a1, char *a2, char *a3, char *a4, __int64 a5, __int64 a6, __int64 a7)
; HUBREG_QueryUsbflagsAlternateSettingFilter(__int64 a1, __int64 a2)
; HUBDESC_ValidateConfigurationDescriptorSet(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; HUBDESC_ValidateBOSDescriptorSet(__int64 a1, int a2, __int64 a3, char *a4)
; HUBDESC_ValidateMsOs20DescriptorSetHeader(__int64 a1, __int64 a2, __int64 a3)
; HUBDESC_ValidateMsOs20DescriptorSet(__int64 a1, __int64 a2)
; WER_CreateReport(unsigned __int64 a1)
; HUBBOOT_IsBootDeviceReady(__int64 a1, __int64 a2)
; WerpCreateRegistryKey(__int64 a1, const WCHAR *a2, ACCESS_MASK a3, char a4, HANDLE *a5, __int64 a6)
; WerKernelCreateReport(const WCHAR *a1, const WCHAR *a2, __int64 a3)
; HUBREG_QueryGlobalUsb20HardwareLpmSettings(__int64 a1)
; HUBREG_OpenCreateUsbflagsDeviceKey(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; HUBPDO_CreatePdoInternal(__int64 a1, char a2)
; HUBPDO_CreatePdo(__int64 a1)
; HUBPDO_CreateUnknownPdo(__int64 a1)
; HUBMISC_SetExtPropDescSemaphoreInRegistry(__int64 a1)
; HUBREG_QueryGlobalUxdSettings(__int64 a1)
; HUBREG_UpdateUxdSettings(__int64 a1, __int64 a2, __int64 a3)
; HUBREG_DeleteUxdSettings(__int64 a1, int a2)
; KsPropertyHandleDrmSetContentId(__int64 a1)
; TelemetryData_pCreateDumpFile(__int64 a1, HANDLE *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbohci.c ;
; OHCI_OpenEndpoint(__int64 a1, __int64 a2, __int64 a3)
; OHCI_SetEndpointStatus(__int64 a1, __int64 a2, int a3)
; OHCI_SetEndpointState(__int64 a1, __int64 a2, int a3)
; OHCI_ProcessDoneAsyncTd(__int64 a1, __int64 a2, char a3)
; OHCI_RH_SetFeaturePortPower(__int64 a1, unsigned __int16 a2)
; OHCI_ReadRhDescriptorA(__int64 a1)
; OHCI_RH_SetWakeConnect(__int64 a1, int a2)
; OHCI_RH_SetFeaturePortReset(__int64 a1, unsigned __int16 a2)
; OHCI_RH_SetFeaturePortSuspend(__int64 a1, unsigned __int16 a2)
; OHCI_OpenIsoEndpoint(__int64 a1, __int64 a2, __int64 a3)
; OHCI_ProcessDoneIsoTd(__int64 a1, __int64 a2, char a3)
; OHCI_OpenBulkEndpoint(__int64 a1, __int64 a2, __int64 a3)
; OHCI_RH_SetFeaturePortEnable(__int64 a1, unsigned __int16 a2)
; OHCI_SetEndpointDataToggle(__int64 a1, __int64 a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbport.c ;
; USBPORT_SetEp_REMOVE(__int64 a1, ULONG_PTR a2)
; MPx_OpenEndpoint(__int64 a1, __int64 a2)
; MPf_OpenEndpoint(__int64 a1, __int64 a2)
; USBPORT_SetEp_PAUSE(__int64 a1, int a2, ULONG_PTR a3)
; USBPORT_SetMiniDumpData(PVOID Object, int a2, __int64 a3)
; USBPORT_InternalOpenInterface(__int64 a1, ULONG_PTR a2, __int64 a3, ULONG_PTR a4, __int64 a5, ULONG_PTR *a6, char a7)
; USBPORT_SetGlobalEndpointStateAndWait(__int64 a1, ULONG_PTR a2, int a3, int a4)
; USBPORT_OpenEndpoint(ULONG_PTR a1, __int64 a2, __int64 a3, __int64 a4, char a5)
; USBPORT_SetGlobalEndpointState(__int64 a1, ULONG_PTR a2, int a3)
; MPf_SetEndpointStatus(__int64 a1, ULONG_PTR a2)
; USBPORT_Core_DecIoRequestCount(__int64 a1, __int64 a2, char a3)
; USBPORT_SetUSBDError(__int64 a1, int a2)
; USBPORT_TxSetState(__int64 a1, __int64 a2, __int64 a3, int a4, int a5)
; USBPORT_Xdpc_iSetState(__int64 a1, __int64 a2, int a3, int a4)
; USBPORT_Core_iIrpCsqCompleteDoneTransfer(ULONG_PTR BugCheckParameter4, __int64 a2, __int64 a3, KIRQL a4)
; USBPORT_Core_iCompleteDoneTransfer(ULONG_PTR BugCheckParameter4, struct _IRP *a2, __int64 a3, __int64 a4)
; USBPORT_Core_UsbDoneDpc_Worker(__int64 a1, __int64 a2, KIRQL a3)
; USBPORT_Xdpc_Worker_DoneDpc(__int64 a1, ULONG_PTR a2)
; USBPORT_iSetGlobalEndpointState(__int64 a1, __int64 a2, __int64 a3)
; USBPORT_SetEp_ACTIVE(__int64 a1, ULONG_PTR a2)
; MPf_SetEndpointState(__int64 a1, __int64 a2, unsigned int a3)
; USBPORT_SetEp_CLOSED(__int64 a1, ULONG_PTR a2)
; USBPORT_SetHcFdoPowerState(__int64 a1, __int64 a2, int a3, int a4)
; USBPORTBUSIF_SetBusSystemWakeMode(__int64 a1, int a2)
; USBPORTBUSIF_SetDevH_IdleReadyState(ULONG_PTR a1, ULONG_PTR a2, signed __int32 a3)
; USBPORT_SetDevH_IdleReadyState(__int64 a1, ULONG_PTR a2, signed __int32 a3)
; USBPORT_SetHighResTimer(__int64 a1, int a2)
; MPf_SetEndpointDataToggle(__int64 a1, ULONG_PTR a2)
; USBPORTSVC_ReadWriteConfigSpace(__int64 a1, char a2, void *a3, unsigned int a4, unsigned int a5)
; USBPORT_ReadWriteConfigSpace(__int64 a1, char a2, void *a3, unsigned int a4, unsigned int Size)
; MPf_SetWakeOnConnect(__int64 a1)
; USBPORT_SCT_GetSetDescriptor(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; USBPORT_SetHcPnpState(__int64 a1, int a2, int a3)
; USBPORTBUSIF_CreateUsbDeviceV7(ULONG_PTR a1, __int64 a2, ULONG_PTR a3, __int16 a4, __int64 a5, __int64 a6, unsigned __int16 a7, __int64 a8, __int64 a9)
; USBPORT_NeoCreateDevice(__int64 a1, size_t Size, ULONG_PTR a3, __int16 a4, __int64 a5, __int64 Sizea, unsigned __int16 a7, __int64 a8, __int64 a9)
; USBPORT_SetDeviceHandleState(__int64 a1, ULONG_PTR a2, int a3, int a4)
; USBPORTBUSIF_SetContainerIdForPort(ULONG_PTR a1)
; USBPORT_CreateLegacyFdoSymbolicLink(__int64 a1)
; USBPORT_SetRegistryKeyValueForPdo(struct _DEVICE_OBJECT *a1, __int64 a2, ULONG a3, const WCHAR *a4, __int64 a5, PVOID a6, ULONG a7)
; USBPORT_CreateRootHubPdo(__int64 a1, __int64 a2)
; ReadUsb2CfgFlag(__int64 a1)
; MPf_ReadCfgFlag(__int64 a1)
; USBPORTBUSIF_SetDeviceHandleData(__int64 a1, __int64 a2, __int64 a3)
; USBPORT_Ev_Rh_IntrEp_Open(__int64 a1, ULONG_PTR a2)
; USBPORT_SetRootHubPdo(__int64 a1, __int64 a2)
; USBPORT_SetRhPnpState(__int64 a1, int a2, int a3)
; USBPORT_PowerSettingCallback(__int64 a1, __int64 a2, int a3)
; ConvertBtoHFrame(char a1, unsigned __int8 a2, __int64 a3, __int64 a4)
; MPf_ResetControllerDontReinit(__int64 a1)
; MPf_SetClearPortResumeTime(__int64 a1, unsigned __int16 a2, char a3, char a4)
; MPf_UsbxOpenEndpoint(__int64 a1, __int64 a2, __int64 a3)
; USBPORTBUSIF_CreateUsbDeviceEx(ULONG_PTR a1, __int64 a2, ULONG_PTR a3, __int16 a4, __int64 a5, __int64 a6, unsigned __int16 a7)
; USBPORTBUSIF_SetClearRootPortResumeTime(ULONG_PTR a1, ULONG_PTR a2, char a3, char a4)
; USBPORTBUSIF_SetDeviceErrataFlag(__int64 a1, __int64 a2, char a3)
; USBPORTBUSIF_SetMsOs20Support(__int64 a1, ULONG_PTR a2, __int64 a3, char a4)
; USBPORTBUSIF_SetUsbPortMiniDumpFlags(ULONG_PTR a1)
; USBPORTSVC_NotifyDoubleBuffer(__int64 a1, __int64 a2, const void *a3, unsigned int a4)
; USBPORT_Core_RevertIsoTegraDoubleBuffers(__int64 a1, __int64 a2)
; USBPORT_BugCheckSaveData(KBUGCHECK_CALLBACK_REASON Reason, struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record, PVOID ReasonSpecificData, ULONG ReasonSpecificDataLength)
; USBPORT_BugCheckSaveExtData(KBUGCHECK_CALLBACK_REASON Reason, struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record, PVOID ReasonSpecificData, ULONG ReasonSpecificDataLength)
; USBPORT_BugCheckSaveLog(KBUGCHECK_CALLBACK_REASON Reason, struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record, PVOID ReasonSpecificData, ULONG ReasonSpecificDataLength)
; USBPORT_CreateRootHubDeviceHandle(__int64 a1)
; USBPORT_UserSetRootPortFeature(__int64 a1, __int64 a2, __int64 a3)
; USBPORT_SCT_SetClearFeature(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; SetCdPathError(__int64 a1, int a2, unsigned int a3)
; USBPORTRTPM_FindAndSetTargetState(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbprint.c ;
; USBPRINT_DecrementIoCount(__int64 a1)
; LoadPortsUsed(void *a1, __int64 a2, __int64 a3)
; SetPortName(__int64 a1, __int64 a2, __int64 a3, struct _DEVICE_OBJECT *a4)
; HPUsbIOCTLVendorSetCommand(__int64 a1, __int64 a2)
; USBPRINT_AsyncReadWrite_Complete(PDEVICE_OBJECT DeviceObject, __int64 a2, __int64 a3)
; USBPRINT_Read(__int64 a1, __int64 a2)
; USBPRINT_Create(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbrpm.c ;
; HubCreate(PCUNICODE_STRING SourceString)
; RPMLoadAlternateDriverForDevice(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; RegSetUxdRegistry@<rax>(PDEVICE_OBJECT DeviceObject@<rcx>, __int64 a2@<rdx>, void *a3@<rbx>, __m128i *a4@<r8>, __int64 a5@<r9>)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\USBSTOR.c ;
; USBSTOR_FdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context)
; USBSTOR_PdoSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; USBSTOR_FdoSetPower(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; USBSTOR_PdoSetPowerCompletion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; USBSTOR_FdoSetPowerD0Completion(PVOID Object, PIRP Irp)
; USBSTOR_1667ReadGroupPolicy(__int64 a1, __int64 a2)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3)
; StorSqmSetDWORD(__int64 a1, __int64 a2, __int64 a3)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, __int64 a3, __int64 a4)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; USBSTOR_FdoSetPowerD3ToD0Completion(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; USBSTOR_FdoSetPowerSx(PDEVICE_OBJECT DeviceObject)
; USBSTOR_FdoSetPowerSxCompletion(PVOID Context, PIRP Irp, POWER_STATE PowerState)
; USBSTOR_SetModeSenseDataProtect(__int64 a1, __int64 a2, __int64 a3)
; USBSTOR_SetSrbPending(__int64 a1, char a2)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; USBSTOR_Create(__int64 a1, __int64 a2)
; USBSTOR_GetWriteProtectSetting(__int64 a1)
; AppendField(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; USBSTOR_CreateChildPDO(__int64 a1, unsigned __int8 a2, char a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; USBSTOR_GlobalSelectiveSuspendSetting(__int64 a1)
; USBSTOR_UseReadCapacity16(__int64 a1, __int64 a2, __int64 a3)
; USBSTOR_ReadWrite(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\usbuhci.c ;
; UhciProcessDoneAsyncTd(__int64 a1, __int64 a2, __int64 a3)
; UhciSetEndpointState(__int64 a1, __int64 a2, int a3)
; UhciOpenEndpoint(__int64 a1, __int64 a2, __int64 a3)
; UhciProcessDoneIsochTd(__int64 a1, __int64 a2)
; UhciSetEndpointStatus(__int64 a1, __int64 a2, int a3)
; UhciSetAsyncEndpointState(__int64 a1, __int64 a2, int a3)
; UhciRHSetFeaturePortSuspend(__int64 a1, __int16 a2)
; UhciSetNextQh(__int64 a1, __int64 a2, __int64 a3)
; UhciRHSetFeaturePortReset(__int64 a1, unsigned __int16 a2)
; UhciRHSetFeaturePortResetWorker(__int64 a1, __int64 a2)
; UhciSetEndpointDataToggle(__int64 a1, __int64 a2, int a3)
; UhciRHSetFeaturePortEnable(__int64 a1, __int16 a2)
; UhciViaRHSetFeaturePortResetResume(__int64 a1, __int64 a2)
; UhciViaRHSetFeaturePortResetSuspend(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\USBXHCI.c ;
; Controller_D0ExitSaveState(__int64 a1, __int64 a2, __int64 a3)
; Controller_SetControllerGone(__int64 a1, char a2)
; Controller_WdfEvtPreprocessSetPowerIrp(__int64 a1, __int64 a2)
; DeviceSlot_SetDeviceContext(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; Endpoint_CreateClearStallContext(__int64 a1)
; Endpoint_StreamsOnResetSetDequeuePointerComplete(__int64 *a1)
; Endpoint_OnResetSetDequeuePointerCompletion(__int64 a1, int a2, __int64 a3)
; Endpoint_OnResetSetDequeuePointer(__int64 *a1, unsigned int a2)
; Endpoint_StreamsOnCancelSetDequeuePointerComplete(__int64 a1)
; Endpoint_OnCancelSetDequeuePointerCompletion(__int64 a1, int a2, __int64 a3)
; Endpoint_OnCancelSetDequeuePointer(__int64 a1, unsigned int a2)
; Endpoint_SetUpConfigureEndpointCommand(__int64 a1, int a2, __int64 a3, void *Dst, __int64 a5, __int64 a6, __int64 a7, void *Dsta)
; Endpoint_ControlEndpointResetSetDequeuePointerCompletion(__int64 a1, int a2, __int64 a3)
; Register_WaitForControllerReady(__int64 a1)
; RootHub_UcxEvtSetHubFeature(__int64 a1, __int64 a2)
; RootHub_UcxEvtSetPortFeature(__int64 a1, __int64 a2)
; TR_AcquireDoubleBuffer(__int64 a1)
; TR_ReleaseDoubleBuffer(__int64 a1, __int64 a2)
; TR_DoesSegmentContainDequeuePointer(__int64 a1, int a2, unsigned int a3, signed __int64 a4)
; Control_EP_WasDoorbellRungSinceMappingStart(__int64 a1)
; Isoch_EP_WasDoorbellRungSinceMappingStart(__int64 a1)
; Isoch_WdfEvtIoQueueReadyNotification(__int64 a1, __int64 a2)
; Bulk_EP_WasDoorbellRungSinceMappingStart(__int64 a1)
; Bulk_WdfEvtIoQueueReadyNotification(__int64 a1, __int64 a2)
; UsbDevice_SetAddress(__int64 a1, char a2)
; UsbDevice_SetAddressCompletion(__int64 a1, int a2, __int64 a3)
; UsbDevice_SetDeviceDisabled(__int64 a1)
; Etw_ControllerCreate(__int64 a1, __int64 a2)
; Etw_DeviceCreate(__int64 a1, __int64 a2)
; Etw_EndpointCreate(__int64 a1, __int64 a2)
; Wmi_CreateControllerCapabilities(__int64 a1)
; Crashdump_DoBulkTransfer(__int64 a1, __int64 a2, __int64 a3, char a4)
; ESM_FindAndSetTargetState(__int64 a1, unsigned int a2, __int64 a3)
; ESM_CheckingIfIgnoreContextErrorOnEPStopFlagIsSet(__int64 a1)
; WerpCreateRegistryKey(__int64 a1, const WCHAR *a2, ACCESS_MASK a3, char a4, HANDLE *a5, __int64 a6)
; WerKernelCreateReport(const WCHAR *a1, const WCHAR *a2, __int64 a3)
; TelemetryData_CreateReport(__int64 a1, __int64 a2, __int64 a3)
; Command_Create(__int64 a1, __int64 a2, __int64 a3)
; Command_CreateCommandTimeoutTimer(__int64 a1)
; CommonBuffer_Create(__int64 a1, __int64 a2)
; Controller_ConfigureS0IdleSettings(__int64 a1)
; Controller_CreateWdfDevice(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Controller_SetLogIdentifier(__int64 a1)
; Controller_Create(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; Controller_SetDeviceDescription(__int64 a1)
; DeviceSlot_Create(__int64 a1, __int64 a2, __int64 a3)
; Endpoint_Create(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; Interrupter_CreateInterrupter(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; IoControl_Create(__int64 a1, __int64 a2, __int64 a3)
; Register_Create(__int64 a1, __int64 a2, __int64 a3)
; RootHub_Create(__int64 a1, __int64 a2, __int64 a3)
; TR_Create(__int64 a1, __int64 a2, __int64 a3, int a4)
; Wmi_Create(__int64 a1, __int64 a2, __int64 a3)
; IntelPptFilter_Create(__int64 a1, __int64 a2, __int64 a3)
; Counter_CreateInterrupterInstance(__int64 a1)
; Counter_CreateCommonBufferInstance(__int64 a1)
; Counter_CreateTransferRingInstance(__int64 a1, __int64 a2, __int64 a3)
; TelemetryData_pCreateDumpFile(__int64 a1, HANDLE *a2)
; IntelPptFilter_DecreaseEndpointCount(__int64 a1, int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vdrvroot.c ;
; VdrvCreateVirtualHba(__int64 a1)
; VdrvpDoStaticEnumeration(__int64 a1, LARGE_INTEGER a2)
; VdrvDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; VdrvpCreatePdo(__int64 a1, __int64 a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\VerifierExt.c ;
; SLIC_ZwSetValueKey_entry_IrqlZwPassive(KIRQL a1)
; ZwSetValueKey_wrapper(void *a1, UNICODE_STRING *a2, ULONG a3, ULONG a4, void *a5, ULONG a6)
; SLIC_ZwOpenKey_entry_IrqlZwPassive(KIRQL a1)
; ZwOpenKey_wrapper(HANDLE *a1, ACCESS_MASK a2, OBJECT_ATTRIBUTES *a3)
; SLIC_ZwCreateKey_entry_IrqlZwPassive(KIRQL a1)
; ZwCreateKey_wrapper(HANDLE *a1, ACCESS_MASK a2, OBJECT_ATTRIBUTES *a3, ULONG a4, UNICODE_STRING *a5, ULONG a6, ULONG *a7)
; SLIC_SDV_ReadDmaCounter_entry_IrqlDispatch(KIRQL a1)
; SDV_ReadDmaCounter_wrapper(__int64 a1, int (__fastcall *a2)(_QWORD))
; SLIC_PsSetLoadImageNotifyRoutine_entry_IrqlPsPassive(KIRQL a1)
; PsSetLoadImageNotifyRoutine_wrapper(__int64 a1)
; SLIC_PsSetCreateThreadNotifyRoutine_entry_IrqlPsPassive(KIRQL a1)
; PsSetCreateThreadNotifyRoutine_wrapper(__int64 a1)
; SLIC_PsSetCreateProcessNotifyRoutine_entry_IrqlPsPassive(KIRQL a1)
; PsSetCreateProcessNotifyRoutine_wrapper(__int64 a1, __int64 a2)
; SLIC_PsCreateSystemThread_entry_IrqlPsPassive(KIRQL a1)
; PsCreateSystemThread_wrapper(HANDLE *a1, ULONG a2, OBJECT_ATTRIBUTES *a3, void *a4, CLIENT_ID *a5, void (__stdcall *a6)(PVOID StartContext), void *a7)
; SLIC_ProbeForRead_entry_IrqlExApcLte2(KIRQL a1)
; ProbeForRead_wrapper(const void *a1, SIZE_T a2, ULONG a3)
; PoFxSetDeviceIdleTimeout_wrapper(__int64 a1, __int64 a2)
; PoFxSetComponentWake_wrapper(__int64 a1, __int64 a2, __int64 a3)
; PoFxSetComponentResidency_wrapper(__int64 a1, __int64 a2, __int64 a3)
; PoFxSetComponentLatency_wrapper(__int64 a1, __int64 a2, __int64 a3)
; SLIC_KeSetTimerEx_entry_IrqlKeDispatchLte(KIRQL a1)
; KeSetTimerEx_wrapper(PKTIMER Timer, LARGE_INTEGER a2, LONG a3, struct _KDPC *a4)
; SLIC_KeSetTimer_entry_IrqlKeDispatchLte(KIRQL a1)
; KeSetTimer_wrapper(PKTIMER Timer, LARGE_INTEGER a2, struct _KDPC *a3)
; SLIC_KeSetEvent_entry_IrqlKeSetEvent(KIRQL a1)
; KeSetEvent_wrapper(struct _KEVENT *a1, KPRIORITY a2, KIRQL a3)
; SLIC_KeReadStateTimer_entry_IrqlKeDispatchLte(KIRQL a1)
; KeReadStateTimer_wrapper(struct _KTIMER *a1)
; SLIC_KeReadStateEvent_entry_IrqlKeDispatchLte(KIRQL a1)
; KeReadStateEvent_wrapper(struct _KEVENT *a1)
; SLIC_IofCompleteRequest_entry_IoSetCompletionExCompleteIrp(__int64 a1, ULONG_PTR a2, __int64 a3)
; SLIC_IoSetShareAccess_entry_IrqlIoPassive5(KIRQL a1)
; IoSetShareAccess_wrapper(ACCESS_MASK a1, ULONG a2, struct _FILE_OBJECT *a3, struct _SHARE_ACCESS *a4)
; SLIC_IoSetPartitionInformation_entry_IrqlIoPassive5(KIRQL a1)
; IoSetPartitionInformation_wrapper(__int64 a1, unsigned int a2, unsigned int a3, unsigned int a4)
; SLIC_IoSetDeviceToVerify_entry_IrqlIoDispatch(KIRQL a1)
; IoSetDeviceToVerify_wrapper(__int64 a1, __int64 a2)
; SLIC_IoSetDeviceInterfaceState_entry_IrqlIoPassive1(KIRQL a1)
; IoSetDeviceInterfaceState_wrapper(UNICODE_STRING *a1, BOOLEAN a2)
; SLIC_IoSetCompletionRoutineEx_exit_IoSetCompletionExCompleteIrp(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IoSetCompletionRoutineEx_wrapper(PDEVICE_OBJECT DeviceObject, PIRP Irp, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID Context, BOOLEAN a5, int a6, BOOLEAN a7)
; SLIC_IoReadPartitionTable_entry_IrqlIoPassive5(KIRQL a1)
; IoReadPartitionTable_wrapper(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; SLIC_IoCreateUnprotectedSymbolicLink_entry_IrqlIoPassive4(KIRQL a1)
; IoCreateUnprotectedSymbolicLink_wrapper(UNICODE_STRING *a1, UNICODE_STRING *a2)
; SLIC_IoCreateSynchronizationEvent_entry_IrqlIoPassive4(KIRQL a1)
; IoCreateSynchronizationEvent_wrapper(UNICODE_STRING *a1, HANDLE *a2)
; SLIC_IoCreateSymbolicLink_entry_IrqlIoPassive3(KIRQL a1)
; IoCreateSymbolicLink_wrapper(UNICODE_STRING *a1, UNICODE_STRING *a2)
; SLIC_IoCreateNotificationEvent_entry_IrqlIoPassive4(KIRQL a1)
; IoCreateNotificationEvent_wrapper(UNICODE_STRING *a1, HANDLE *a2)
; SLIC_IoCreateFile_entry_IrqlIoPassive4(KIRQL a1)
; IoCreateFile_wrapper(HANDLE *a1, ACCESS_MASK a2, OBJECT_ATTRIBUTES *a3, struct _IO_STATUS_BLOCK *a4, LARGE_INTEGER *a5, ULONG a6, ULONG a7, ULONG a8, ULONG a9, void *a10, ULONG a11, CREATE_FILE_TYPE a12, void *a13, ULONG a14)
; SLIC_IoCreateDevice_entry_IrqlIoPassive1(KIRQL a1)
; IoCreateDevice_wrapper(struct _DRIVER_OBJECT *a1, ULONG a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, PDEVICE_OBJECT *a7)
; SLIC_IoCreateController_entry_IrqlIoPassive2(KIRQL a1)
; IoCreateController_wrapper(unsigned int a1)
; SLIC_ExUuidCreate_entry_IrqlExPassive(KIRQL a1)
; ExUuidCreate_wrapper(__int64 a1)
; SLIC_ExSetTimerResolution_entry_IrqlExApcLte2(KIRQL a1)
; ExSetTimerResolution_wrapper(ULONG a1, BOOLEAN a2)
; SLIC_ExCreateCallback_entry_IrqlExPassive(KIRQL a1)
; ExCreateCallback_wrapper(PCALLBACK_OBJECT *a1, OBJECT_ATTRIBUTES *a2, BOOLEAN a3, BOOLEAN a4)
; SLIC_ExConvertExclusiveToSharedLite_entry_IrqlExApcLte3(KIRQL a1)
; ExConvertExclusiveToSharedLite_wrapper(struct _ERESOURCE *a1)
; SLIC_xdv_IRP_MJ_WRITE_exit_IoSetCompletionExCompleteIrp(__int64 a1, ULONG_PTR a2, void **a3)
; XdvCreateThreadContext(__int64 a1)
; CreateWatchedState(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; CreateState(__int64 a1)
; LoadState(KIRQL a1)
; XdvCreateExtension(__int64 a1, __int64 a2, __int64 a3)
; AutofailLoadImageHandler(__int64 a1, const UNICODE_STRING *a2, unsigned __int64 a3, unsigned int a4, __int64 a5, int a6)
; ReadRegistryData(HANDLE KeyHandle, const WCHAR *a2)
; XdvLoggingLoadImageHandler(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; XdvReadRegistryKeyDword(PUNICODE_STRING ValueName, __int64 a2)
; XdvTimedLoadImageHandler(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; XdvDispatchCreate(__int64 a1, __int64 a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vhdmp.c ;
; StorBalCreateDeviceFromFileObject(struct _FILE_OBJECT *a1, __int64 a2, char a3, char a4, PKSPIN_LOCK *a5)
; BalanceCreateDevice(__int64 a1, char a2, __int64 a3, __int64 a4)
; VhdmpiCreateBalancerDeviceContext(__int64 *a1, char a2)
; VhdmpiMakeLongPathDecorationAppropriate(__int64 a1)
; VhdmpiScsiCommandRead(__int64 a1)
; VhdmpiScsiCommandReadCapacity(__int64 a1, char a2)
; VhdmpiSectorBitmapSetNormalizedBitWorkItem(__int64 a1, __int64 a2, __int64 a3)
; StorBalInsureTimerSet(__int64 a1)
; VhdmpiSectorBitmapAttachSrbRangeToReadCompletion(__int64 a1, __int64 a2)
; VhdmpiSectorBitmapSetBitRangeInternal(__int64 a1, unsigned int a2, int a3)
; StorBalAppendList(__int64 a1, __int64 a2)
; BalanceSetLowerThreshold(__int64 a1)
; VhdmpiSectorBitmapDecPrerequisiteIoCount(__int64 a1, __int64 a2, __int64 a3)
; StorBalSetLatencyTarget(__int64 a1, unsigned __int64 a2)
; VhdmpiSectorBitmapReadIoCompletion(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiSectorBitmapInitiateRead(__int64 a1, __int64 *a2, __int64 a3)
; VhdmpiSectorBitmapSetNormalizedBitAsync(__int64 a1, __int64 a2)
; VhdmpiSetSafeFileReference(__int64 a1, __int64 a2, struct _FILE_OBJECT *a3)
; StorBalCopyUnicodeString(__int64 a1, unsigned __int16 *a2)
; VhdmpiLoadVhdBat(__int64 a1)
; RtlStringCbCopyUnicodeString(__int64 a1, __int64 a2, __int64 a3)
; StorBalSetClientQosConfiguration(PKSPIN_LOCK SpinLock, __int64 a2)
; VhdmpiOpenDriveDirectoryObject(__int64 a1, unsigned int a2)
; VhdmpiVhd1SetItemState(__int64 a1, __int64 a2, unsigned int a3)
; VhdmpiIsoScsiCommandRead(__int64 a1, __int64 a2)
; VhdmpiIsoScsiCommandRead12(__int64 a1, __int64 a2)
; VhdmpiIsoScsiCommandReadBufferCapacity(__int64 a1)
; VhdmpiIsoScsiCommandReadCapacity(__int64 a1)
; VhdmpiIsoScsiCommandReadDiscInformation(__int64 a1)
; VhdmpiIsoScsiCommandReadDvdStructure(__int64 a1)
; VhdmpiIsoScsiCommandReadToc(__int64 a1)
; VhdmpiIsoScsiCommandReadTrackInformation(__int64 a1)
; VhdmpiIsoScsiCommandSetStreaming(__int64 a1)
; VhdmpiIsoScsiCommandTestUnitReady(__int64 a1)
; VhdmpiIsoSetUnitAttributes(__int64 a1)
; VhdmpiOffloadReadOrWriteVhdFileAtPassiveLevel(char a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, const void *Src, __int64 a7, __int64 a8)
; VhdmpiOffloadReadVhdFileAtPassiveLevel(__int64 a1, __int64 a2, __int64 a3, const void *a4, __int64 a5, __int64 a6)
; RmwiCallDownLevelDriver(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RmwiCallDownLevelDriverAtPassive(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RmwiSetDiskOffset(__int64 a1, char a2, __int64 a3, int a4)
; VhdmpiDecoupleVirtualDiskSurface(__int64 a1)
; VhdmpiAllocateDoubleBufferMdl(__int64 a1, __int64 a2, void *a3, unsigned int a4, struct _MDL *a5, int a6, __int64 a7)
; VhdmpiDeclareVirtualDiskInvalid(__int64 a1, signed __int32 a2, int a3)
; VhdmpiFreeDoubleBufferMdl(__int64 **a1, __int64 a2, char a3)
; VhdmpiSetEof(__int64 *a1, __int64 a2)
; VhdmpiHwCreateLun(__int64 a1, __int64 a2, __int64 a3)
; Vhd2eSetBufferIo(__int64 a1, __int64 a2, unsigned int a3)
; Vhd2eSetEndOfFile(__int64 *a1, __int64 a2)
; Vhd2eSynchronousRead(__int64 a1, __int64 a2, void *a3, ULONG a4)
; VhdmpiVhd2ContinueDoubleBuffering(__int64 a1)
; VhdmpiVhd2CopyVirtualDiskMetadata(__int64 a1, __int64 a2)
; VhdmpiVhd2DoubleBufferComplete(__int64 a1, char a2)
; VhdmpiVhd2DoubleBufferIrpWorkerRoutine(__int64 a1)
; VhdmpiVhd2SetUserMetadata(__int64 a1, char a2, __m128i *a3, int a4, __int64 a5)
; VhdmpiBeginDoubleBuffering(__int64 a1, struct _MDL *a2, void *a3, unsigned int a4, int a5)
; VhdmpiCreateErrorLogEntry(__int64 a1)
; VhdmpiEndDoubleBuffering(__int64 a1, char a2)
; VhdmpiMainOffloadReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiSetZeroDataCompletion(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiCopyOffloadIrpStatusNeedsSpecificScsiSense(signed int a1, __int64 a2)
; VhdmpiInsureOffloadTimerSetLocked(__int64 a1)
; VhdmpiReceiveRodTokenInformationRead(__int64 a1, __int64 a2)
; VhdmpiScsiCommandCopyOperationAbort(__int64 a1)
; VhdmpiScsiCommandCopyOperations(__int64 a1)
; VhdmpiScsiCommandRead12(__int64 a1)
; VhdmpiScsiCommandRead6(__int64 a1)
; VhdmpiSetSrbHoldRange(__int64 a1, __int64 a2, __int64 a3, char a4)
; VhdmpiCTlogSetVirtualDiskParameters(__int64 a1)
; VhdmpiCreateAclFromSid(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiLoadBAT(__int64 a1, __int64 a2)
; VhdmpiSetDeviceSecurity(__int64 a1, __int64 a2)
; VhdmpSaveData(__int64 a1, void *a2, unsigned int a3)
; VhdmpiCTLogDecrementPendingIOCount(__int64 a1)
; VhdmpiCTLogSetKEventIoCompletionWithContext(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiCTCreateMasterMDL(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; VhdmpiSetLogBufferManagerMaxDirtyBufferThreshold(__int64 a1, int a2)
; *__fastcall Vhd2SetParentRangeStateQueryRoutine(__int64 a1, __int64 (__fastcall *a2)(__int64 a1, __int64 a2)))(__int64 a1, __int64 a2)
; Vhd2iReadEarlyStructures(__int64 *a1, __int64 a2)
; Vhd2iSetEofAsync(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iSetBlockMappingLocked(__int64 a1, unsigned int a2, unsigned __int64 a3)
; Vhd2iSetSectorBitmapCompleteDuringBlockAllocate(__int64 a1, __int64 a2, __int64 a3)
; Vhd2IssueReadWriteEx(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8)
; Vhd2iContinuePartialReadWithNode(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5)
; Vhd2iContinueRead(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iDereferenceReadWrite(__int64 a1, __int64 a2, int a3, signed __int32 a4, __int64 a5)
; Vhd2iGotBlockMappingForPartialBlockRead(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iGotBlockMappingForRead(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iIssueReadWrite(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iPerformPartialBlockRead(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5)
; Vhd2iPerformPartialBlockReadWithMapping(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, unsigned __int64 a5, __int64 a6)
; Vhd2iPerformReadWithMapping(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Vhd2iSectorBitmapReadComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iCacheReadCompletion(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iDecrementCacheTransactionWaitCount(__int64 a1, signed __int64 a2, __int64 a3)
; Vhd2iDecrementReserveNodeCountLocked(__int64 a1, __int64 a2)
; Vhd2iPerformCacheRead(__int64 *a1, __int64 a2, __int64 a3)
; Vhd2iReadCacheNode(__int64 *a1, __int64 a2, __int64 a3)
; Vhd2iCheckAndSetNormalizedSectorBitmap(__int64 a1, ULONG *a2, unsigned int a3)
; Vhd2iContinueSetBitmapWithBlock(PRTL_BITMAP BitMapHeader, __int64 a2, __int64 a3, __int64 a4)
; Vhd2iContinueSetSectorBitmapBits(PRTL_BITMAP BitMapHeader, __int64 a2, __int64 a3)
; Vhd2iIsNormalizedSectorBitSet(__int64 a1, unsigned __int64 a2, __int64 a3)
; Vhd2iSetSectorBitmapBits(RTL_BITMAP *a1, __int64 a2, __int64 a3, int a4, char a5, __int64 a6, __int64 a7)
; DvpRemoveWorkQueueRunningDown(__int64 a1)
; VhdmpiCreateParentBackingStore(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, char a6, __int64 a7, __int64 a8)
; VhdmpiReleaseExclusiveReadAccess(__int64 a1)
; VhdmpiOpenFileForMatching(__int64 a1, __int64 a2, char a3, void *a4)
; VhdmpiOpenBackingFileWithOptions(__int64 a1, int a2, int a3)
; VhdmpiFreeBackingStoreOpenEcp(__int64 a1)
; VhdmpiCreateBackingStoreOpenEcp(char a1, __int64 a2)
; VhdmpiCreateNtFilePath(__int64 a1, __int64 a2)
; VhdmpiDetermineDosPathNameType(__int64 a1)
; VhdmpiCreateBackingStoreChain(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, char a7, unsigned int a8, __int64 a9)
; VhdmpiCreateOrShareVirtualDisk(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiAcquireExclusiveReadAccess(__int64 a1, __int64 a2)
; VhdmpiFileWrapperAcquireExclusiveReadAccess(__int64 a1, __int64 a2)
; VhdmpiReadVhdFileAtPassiveLevel(__int64 a1, void *a2, ULONG a3, __int64 a4, __int64 a5)
; VhdmpiVhd1InitAndLoadAndVerifyBackingStore(__int64 a1, int a2, __int64 a3)
; VhdmpiCreateVirtualDisk(__m128i *a1, __int64 a2)
; VhdmpiInitAndLoadAndVerifyBackingStore(__int64 *a1, unsigned int a2, __int64 a3)
; VhdmpiLoadFlatBackingStoreFile(__int64 a1, char a2, char a3, __int64 a4)
; VhdmpiOpenFileWrapperExclusiveHandle(__int64 a1, int a2, char a3)
; StorBalCreateClient(unsigned __int16 *a1)
; VhdmpiLoadDynamicBackingStoreFile(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiLoadDifferencingBackingStoreFile(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiSetFileWrapperVirtualMachineId(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiOpenBackingFile(__int64 a1, int a2, int a3, char a4)
; VhdmpiCreateHandler(__int64 a1, char **a2)
; VhdmpiCreateBackingStore(__int64 a1, __int64 a2, const UNICODE_STRING *a3, __int64 a4, int a5, __int64 a6, unsigned __int8 a7, __int64 a8)
; VhdmpiCreateOrShareCandidateVirtualDisk(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; VhdmpiCopyRawSectorsSync(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, signed __int64 a5, unsigned int a6, __int64 a7)
; VhdmpiCompactionCopyRangeSync(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; VhdmpiDoCompaction(__int64 a1)
; VhdmpiDowngradeFileAccessLock(__int64 a1)
; VhdmpiDowngradeFileWrapperToRS(__int64 a1)
; VhdmpiDowngradeFileWrapperToRX(__int64 a1, char a2)
; VhdmpiSetParentFilename(__int64 a1, unsigned int a2, __int64 a3)
; VhdmpiSetVhdPhysicalSectorSize(__int64 a1, __int64 a2)
; VhdmpiCleanupCreate(__int64 a1)
; VhdmpiCreateNewVhd(__int64 a1, __int64 a2)
; VhdmpiCreateThread(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiIsValidVhd1CreateRequest(UNICODE_STRING *a1, __int64 a2)
; VhdmpiIsValidVhd2CreateRequest(UNICODE_STRING *a1, __int64 a2)
; VhdmpiIsValidVhdCreateRequest(PUNICODE_STRING DestinationString, __int64 a2)
; VhdmpiReadFromSource(__int64 a1, struct _FILE_OBJECT *a2, __int64 a3, int a4, __int64 a5, char a6)
; VhdmpiVhd1InitializeCreate(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiVhd1SetProjectedEofForNewBackingStoreFile(__int64 a1)
; VhdmpiVhd1SetupFinalCreateRequestSizes(__int64 *a1, __int64 a2)
; VhdmpiVhd2InitializeCreate(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiVhdInitializeCreate(__int64 a1, __int64 a2, __int64 a3, int a4)
; VhdmpiCopyVirtualBlock(__int64 a1)
; VhdmpiIsoInitAndLoadAndVerifyBackingStore(__int64 a1, __int64 a2, __int64 a3)
; VhdmpiVhd1SetBackingStoreLinkageId(__int64 a1, __m128i *a2)
; VhdmpCreateControlObject(__int64 a1, __int64 a2, __int64 a3, struct _DEVICE_OBJECT *a4, __int64 a5)
; VhdmpiVhd2InitAndLoadAndVerifyBackingStore(__int64 a1, char a2, __int64 a3)
; VhdmpiVhd2SetBackingStoreLinkageId(__int64 a1, __m128i *a2)
; VhdmpiVhd2SetItemState(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, int a5)
; VhdmpiVhd2SetPage83Data(__int64 a1, __m128i *a2)
; VhdmpiVhd2SetParentLocator(GUID *Guid, GUID *a2, __int64 a3, __int64 a4, GUID *Guida, GUID *a6)
; VhdmpiVhd2SetPhysicalSectorSize(__int64 a1, int a2)
; VhdmpiContinueOffloadReadWithOffloadRead(__int64 a1)
; VhdmpiContinueOffloadWriteZeroWithSetZeroData(__int64 a1)
; VhdmpiCreateNonGenericSecurityDescriptorFromSddlString(PCWSTR SourceString, char a2, PSECURITY_DESCRIPTOR *a3)
; VhdmpiDiskVolumesAreReady(__int64 a1, __int64 a2)
; VhdmpiReadVirtualDiskData(__int64 a1, __int64 a2)
; VhdmpiSetMetadata(__int64 a1, __int64 a2, unsigned int a3)
; VhdmpiSetUserMetadataHandler(__int64 a1, __int64 a2)
; VhdmpiAcquireOpenHandleBackingStoreChainAccess(__int64 a1, __int64 a2)
; VhdmpiReleaseOpenHandleBackingStoreChainAccess(__int64 a1, __int64 a2, char a3)
; VhdmpiCTLogMirroringCopyLogBlocks(__int64 a1, __int64 a2, __int64 a3, void *a4)
; VhdmpiCTLogCreateBackingStore(__int64 a1, char a2, void *a3, __int64 a4)
; VhdmpiCTLogVerifyAndLoadBackingStore(__int64 a1, char a2, __int64 a3)
; VhdmpiReadCTLogFileAtPassiveLevel(__int64 a1, void *a2, ULONG a3, __int64 a4)
; VhdmpiConvertVolumePathToDriveLetterPath(void *Dst)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; Vhd2DowngradeToReadOnly(__int64 a1, void *a2, int a3, __int64 a4)
; Vhd2OpenVhdEx(__int64 a1, void *a2, int a3, __int64 a4)
; Vhd2iCleanBatForDowngradeComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iCompleteOpen(__int64 a1, __int64 a2, int a3, __int64 a4)
; Vhd2iDowngradeCompleteOnFailedOpen(__int64 a1, __int64 a2)
; Vhd2iFreeOpen(__int64 a1)
; Vhd2iHeaderUpdateForDowngradeComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iHeaderUpdateForOpenComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iIssueMetadataReadForOpen(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, __int64 a5, int a6, char a7, __int64 a8)
; Vhd2iUpdateRegionTableForOpenComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2ConvertMappingToBlockTrimmed(__int64 a1, unsigned __int64 a2)
; Vhd2ConvertMappingToBlockUndefined(__int64 a1, unsigned __int64 a2)
; Vhd2iConvertMappingToUnallocated(__int64 a1, __int64 a2)
; Vhd2ForceSetLastWriteGuid(__int64 a1, __m128i *a2, __int64 a3)
; Vhd2iUpdateDoneForEnableWriteModes(__int64 a1, __int64 a2, __int64 a3)
; Vhd2SetParentLocator(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iGetParentLocatorAfterRead(__int64 a1, __int64 a2)
; Vhd2iLocatorReadComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2ReadMetadata(__int64 a1, char a2, __m128i *a3, __int64 a4, char a5, __int64 a6)
; Vhd2iContinueCopyingForExpandMetadata(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iMetadataReadComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iReadCompleteForExpandMetadata(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iReadMetadataInternal(__int64 a1, char a2, __m128i *a3, __int64 a4, char a5, __int64 a6, __int64 a7)
; Vhd2iReadMetadataTable(__int64 a1)
; Vhd2CopyVirtualDiskMetadata(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; Vhd2iBeginCopyMetadata(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iCompleteCopyMetadata(__int64 a1, int a2, __int64 a3)
; Vhd2iContinueDeletingMetadataForCopy(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iContinueReadingMetadataForCopy(__int64 a1, __int64 a2)
; Vhd2iMetadataDeleteForCopyComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iMetadataReadForCopyComplete(__int64 a1, __int64 a2)
; Vhd2iMetadataWriteForCopyComplete(__int64 a1, __int64 a2, __int64 a3)
; Vhd2iReadBat(__int64 a1, __int64 a2)
; Vhd2iCacheReadReserveIo(__int64 a1, __int64 a2)
; Vhd2iReadLogSector(void *Dst, __int64 a2, int a3, int a4, void *Dsta)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\viaide.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\videoprt.c ;
; VideoPortReadRegisterUchar(__int64 a1)
; VideoPortReadRegisterUshort(__int64 a1)
; VideoPortReadRegisterUlong(__int64 a1, __int64 a2, __int64 a3)
; VideoPortReadRegisterBufferUchar(__int64 a1, __int64 a2, unsigned int a3)
; VideoPortReadRegisterBufferUshort(__int64 a1, __int64 a2, unsigned int a3)
; VideoPortReadRegisterBufferUlong(__int64 a1, __int64 a2, unsigned int a3)
; VideoPortInterlockedDecrement(volatile signed __int32 *a1)
; VideoPortSetEvent(__int64 a1, PRKEVENT *a2)
; VideoPortReadStateEvent(__int64 a1, PRKEVENT *a2)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; VPSetRegistryParameters(__int64 a1, __int64 a2, void *a3, ULONG a4, wchar_t *pszSrc, unsigned int a6)
; VpCopyRegistry(void *a1, void *a2, const WCHAR *a3, const WCHAR *a4)
; pVpAppendSecondaryMinidumpData(void *Src, signed int a2, __int64 a3)
; VideoPortDbgReportCreate(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5)
; VideoPortCreateSpinLock(__int64 a1, __int64 a2)
; VideoPortCreateEvent(__int64 a1, char a2, __int64 a3, __int64 a4)
; pVideoPortCreateDeviceName(PCWSTR Source, ULONG Value, PUNICODE_STRING Destination, WCHAR *a4)
; VideoPortSetRegistryParameters(__int64 a1, __int64 a2, void *a3, ULONG a4)
; VideoPortCreateSecondaryDisplay(__int64 a1, __int64 a2, int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmbkmcl.c ;
; PkCreateGpaRanges(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5, char a6)
; VmbPacketSetPointer(__int64 a1, __int64 a2)
; VmbPacketSetCompletionRoutine(__int64 a1, __int64 a2)
; PkSetInterruptMaskSkipCount(__int64 a1, __int64 a2)
; VmbChannelInitSetPrimaryChannel(__int64 a1, __int64 a2, __int16 a3)
; VmbClientChannelInitSetTargetProcessorIndex(__int64 a1, int a2)
; OutCopyAndSendPacket(volatile signed __int64 a1, const void **a2, unsigned int *a3, __int64 a4, char a5, char a6)
; OutpTransitionPacketToReadyToComplete(__int64 a1, __int64 a2)
; KmclDecrementRundownCount(PVOID Context)
; RestoreReadVersion(__int64 a1, __int64 a2, unsigned int a3)
; SaveCommit(__int64 a1)
; SaveCopyRawBytes(__int64 a1, const void *a2, unsigned int a3)
; SaveGetBuffer(__int64 a1, unsigned int a2)
; SaveStart(__int64 a1, int a2)
; SaveWriteNextSubChannel(__int64 a1, __int64 a2)
; VmbChannelCreateGpadlFromBuffer(__int64 a1, char a2, __int64 a3, unsigned int a4)
; VmbChannelCreateGpadlFromMdl(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5)
; VmbChannelSetIncomingPollOnCompletion(__int64 a1, char a2)
; VmbChannelSetIncomingProcessingAtPassive(__int64 a1, char a2)
; VmbChannelSetInterruptPreferredProcessor(__int64 a1)
; VmbChannelSetPointer(__int64 a1, __int64 a2)
; VmbChannelSetTransactionQuota(__int64 a1, int a2)
; ProcgrpSetSystemGroupAffinityThread(__int64 a1, __int64 a2)
; ProcgrpSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
; VmbChannelInitSetClientContextSize(__int64 a1, int a2)
; VmbChannelInitSetMaximumExternalData(__int64 a1, int a2, int a3)
; VmbChannelInitSetMaximumPacketSize(__int64 a1, int a2)
; VmbChannelInitSetProcessPacketCallbacks(__int64 a1, __int64 a2, __int64 a3)
; VmbChannelInitSetStateChangeCallbacks(__int64 a1, __int64 a2)
; VmbClientChannelInitSetRingBufferPageCount(__int64 a1, int a2, int a3)
; VmbClientChannelInitSetTargetFile(__int64 a1, void *a2, void *a3)
; VmbClientChannelInitSetTargetPnp(__int64 a1, __m128i *a2, __m128i *a3, __int64 a4)
; VmbServerChannelInitSetFlags(__int64 a1, char a2)
; VmbServerChannelInitSetMmioMegabytes(__int64 a1, __int16 a2)
; VmbServerChannelInitSetMonitoredNotifications(__int64 a1, __int16 a2)
; VmbServerChannelInitSetOfferData(__int64 a1, const void *a2, unsigned int a3)
; VmbServerChannelInitSetPartitionId(__int64 a1, __int64 a2)
; VmbServerChannelInitSetSaveRestorePacketCallbacks(__int64 a1, __int64 a2, __int64 a3)
; VmbServerChannelInitSetTargetInterfaceId(__int64 a1, __m128i *a2, __m128i *a3)
; VmbServerChannelInitSetVmId(__int64 a1, __m128i *a2)
; InOpenChannel(__int64 a1)
; InSaveQueue(__int64 a1, __int64 a2)
; OutSavePacket(__int64 a1, __int64 a2, __int64 a3)
; OutSaveQueue(__int64 a1, __int64 a2)
; OutSetRestorePacket(__int64 a1, __int64 a2)
; KmclpClientOpenChannel(__int64 a1)
; KmclpServerOpenChannel(__int64 a1)
; KmclpTeardownOpenChannelState(__int64 a1)
; SaveContinueSaving(__int64 a1, __int64 a2)
; VmbChannelSaveBegin(__int64 a1)
; VmbChannelSaveContinue(__int64 a1, __int64 a2, int a3, __int64 a4, __int64 a5)
; VmbChannelSaveEnd(__int64 a1)
; VmbChannelSetAllowableDpcCpuUsage(__int64 a1, unsigned __int8 a2)
; PkInitializeDoubleMappedRingBuffer(void *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, int a7)
; PkpDoubleMapBuffer(void *a1, unsigned int a2, __int64 a3, __int64 a4)
; PkpFreeDoubleMappedBuffer(PMDL MemoryDescriptorList)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmbus.c ;
; PipeProcessDeferredReadWrite(__int64 a1, __int64 a2)
; InstancePdoReadWritePreprocess(__int64 a1, __int64 Irp)
; PipeRead(PKSPIN_LOCK SpinLock, __int64 a2)
; PipeTryReadSingle(__int64 a1, __int64 a2, char a3, __int64 a4)
; BusChCreateWorkItem(__int64 a1, __int64 a2, __int64 a3)
; BusChSetInterruptPreferredProcessor(__int64 a1)
; BusPdoSetBusData(__int64 a1, __int64 a2, __int64 a3)
; PipeEvtChannelOpened(__int64 a1)
; PipeTryReadMultiple(__int64 a1, __int64 a2, __int64 a3)
; CrashOpenChannel(__int64 a1, __int64 a2, __int64 a3)
; ProcgrpSetSystemGroupAffinityThread(__int64 a1, __int64 a2)
; ProcgrpSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
; PkCreateGpaRanges(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, int a5)
; PncCreatePartition(__int64 a1, __m128i *a2, __int64 a3)
; XPartCreateInterrupt(__int64 a1, __int64 a2, __int64 a3)
; MvmCreateGpadl(__int64 a1, const void *a2, __int64 a3, int a4, __int64 a5)
; MvmOpenChannel(__int64 a1, __int64 a2, int a3)
; DvpRemoveWorkQueueRunningDown(__int64 a1)
; RootDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; InstanceCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; InstancePdoSetDeviceProximityDomain(__int64 a1, int a2)
; InstanceOpenComplete(__int64 a1, unsigned int a2)
; InstanceCreate(__int64 a1, __int64 a2, __int64 a3)
; BusChCreateGpadlFromBuffer(__int64 *a1, void *a2, ULONG a3, LOCK_OPERATION a4, __int64 a5)
; BusChCreateGpadlFromNtmdl(__int64 *a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5)
; PipeCreate(__int64 a1, __int64 a2)
; PkInitializeDoubleMappedRingBuffer(void *a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, int a7)
; PkpDoubleMapBuffer(void *a1, unsigned int a2, __int64 a3, __int64 a4)
; PkpFreeDoubleMappedBuffer(PMDL MemoryDescriptorList)
; ChClientOpenChannel(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, __int64 a6, unsigned int a7)
; ChClientOpenResult(__int64 a1, __int64 a2, unsigned int a3)
; ChpReleaseOpenChannelState(__int64 a1)
; ChCreateGpadlFromBuffer(__int64 a1, void *a2, ULONG a3, LOCK_OPERATION a4, __int64 a5, __int64 a6)
; ChCreateGpadlFromNtmdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6)
; ChGpadlCreated(__int64 a1, __int64 a2, int a3, unsigned int a4)
; ChpCreateGpaRanges(__int64 a1, unsigned int a2, unsigned int a3, __int64 a4, __int64 a5, __int64 a6)
; ChpCreateGpadlFromNtmdl(__int64 a1, __int64 a2, unsigned int a3, unsigned int a4, __int64 a5, __int64 a6, char a7)
; ChpGpadlCreatedLocked(__int64 a1, __int64 a2, unsigned int a3)
; ChmGpadlCreated(__int64 a1, __int64 a2)
; XPartCreatePartition(__int64 a1, __m128i *a2, __int64 a3)
; XPartRelIdSet(__int64 a1, int a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\VMBusHID.c ;
; ReadReport(__int64 a1, __int64 a2)
; DoProtocolNegotiation(PVOID Context)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmci.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmgencounter.c ;
; GenCounterReadCounter(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmnet.c ;
; VNet_SetIFFlags(__int64 a1, __int16 a2)
; VNet_SetMacAddr(__int64 a1, __int64 a2, char a3)
; VNet_SetStats(__int64 a1, unsigned __int64 a2)
; VNet_CreateSender(__int64 a1, __int64 a2)
; VNet_CreateListener(__int64 a1, void (__fastcall *a2)(_QWORD, _QWORD), __int64 a3, int a4, __int64 a5)
; VNet_InitReaderWriter(__int64 a1)
; VNet_RegisterReader(__int64 a1)
; VNet_DeRegisterReader(__int64 a1)
; VNet_SpinRegisterReader(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmnetadapter.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmnetbridge.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmnetuserif.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vms3cap.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmstorfl.c ;
; StorChannelCopySrbToPacket(__int64 a1, __int64 a2)
; ProcgrpSetSystemGroupAffinityThread(__int64 a1, __int64 a2)
; ProcgrpSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
; StorChannelOpen(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, __int64 a8, __int64 a9)
; StorChannelOpenSubChannel(__int64 a1, unsigned __int16 a2, unsigned int a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmusb.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vmx86.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\volmgr.c ;
; VmReadWrite(__int64 a1, __int64 a2)
; VmpReadWriteCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VmpDecrementRefCount(struct VM_VOLUME_EXTENSION *a1)
; VmCreate(__int64 a1, __int64 a2)
; VmpManageDataSetAttributesCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VmpSetDevicePowerState(struct VM_VOLUME_EXTENSION *a1, enum _DEVICE_POWER_STATE a2)
; VmpSetPowerState(struct VM_ROOT_EXTENSION *a1, struct _IRP *a2)
; VmpSetTargetCallback(struct VM_VOLUME_EXTENSION *a1, void *a2)
; VmpVolumeReadOnlyCallback(struct VM_VOLUME_EXTENSION *a1, void *a2)
; RtlStringCbCopyExW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc, wchar_t **ppszDestEnd, size_t *pcbRemaining, unsigned __int32 dwFlags)
; VmpManageDataSetAttributes(struct VM_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VmpCreateLegacyNameLinks(struct VM_VOLUME_EXTENSION *a1)
; VmpLinkCreated(struct VM_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VmpCreateDevice(struct VM_ROOT_EXTENSION *a1, char a2, struct _DEVICE_OBJECT *a3, struct _DEVICE_OBJECT *a4)
; VmpSetPartitionOffsetAndLength(struct VM_VOLUME_EXTENSION *a1, void *a2, __int64 a3)
; VmCreatePendingDynamicDevice(struct VM_ROOT_EXTENSION *a1, void *a2)
; VmpDiskSetGptAttributes(struct _DEVICE_OBJECT *a1, __int64 a2)
; VmpQueryFailoverSet(struct VM_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VmpSetGptAttributes(struct VM_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VmpQueryGlobalSettings(struct VM_ROOT_EXTENSION *a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\volmgrx.c ;
; VmxReadWrite(__int64 a1, __int64 a2)
; VmxpReadWriteCompletionRoutine(PVOID Entry)
; VMX_IO_DISK_EXTENT::GetManageAttributesDataSet(VMX_IO_DISK_EXTENT *this, void *a2, unsigned __int32 a3, char a4, void **a5, unsigned __int32 *a6)
; VMX_IO_DISK_EXTENT::ManageDataSetAttributes(VMX_IO_DISK_EXTENT *this, PVOID P, void (__stdcall *a3)(void *, __int32), void *a4, void *Pa, unsigned __int32 a6, unsigned __int8 a7)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; VmxSetSplitIoNotifyRoutines(void *a1, struct _WMI_SPLITIO_NOTIFY_ROUTINES *a2)
; VMX_IO_RAID5::GetManageAttributesDataSetForMember(VMX_IO_RAID5 *this, __int64 a2, void *a3, __int64 a4, unsigned __int8 *a5, void **a6, unsigned __int32 *a7)
; VMX_IO_MIRROR::IsReadPlexSupported(VMX_IO_MIRROR *this)
; VmxSetPowerState(struct _DEVICE_OBJECT *a1, struct _DEVICE_OBJECT *a2, enum _DEVICE_POWER_STATE a3)
; RtlStringCbCopyA(char *pszDest, size_t cbDest, const char *pszSrc)
; VmxpReadPlexCompletionRoutine(__int64 a1)
; VMX_IO_RAID5::CompleteWriteStripeDone(VMX_IO_RAID5 *this, struct VMX_RAID5_WRITE_TRANSFER_PACKET *a2, __int64 a3)
; VMX_IO_DISK_EXTENT::CreateLegacyNameLinks(VMX_IO_DISK_EXTENT *this, unsigned __int16 *a2)
; VMX_IO_OPERATOR::CreateLegacyNameLinks(VMX_IO_OPERATOR *this, unsigned __int16 *a2)
; VMX_IO_MIRROR::GetManageAttributesDataSetForMember(VMX_IO_MIRROR *this, unsigned int a2, void *a3, __int64 a4, unsigned __int8 *a5, void **a6, unsigned __int32 *a7)
; VMX_IO_SPAN::GetManageAttributesDataSetForMember(VMX_IO_SPAN *this, unsigned int a2, void *a3, unsigned int a4, unsigned __int8 *a5, void **a6, unsigned __int32 *a7)
; VMX_IO_STRIPE::GetManageAttributesDataSetForMember(VMX_IO_STRIPE *this, unsigned int a2, void *a3, unsigned int a4, unsigned __int8 *a5, void **a6, unsigned __int32 *a7)
; VMX_IO_MIRROR::LaunchRead(VMX_IO_MIRROR *this, struct VMX_TRANSFER_PACKET *a2, struct VMX_MIRROR_TRANSFER_PACKET *a3)
; VMX_IO_OPERATOR::ManageDataSetAttributes(PVOID P, struct _IRP *a2, void (__stdcall *a3)(void *, __int32), void *a4, void *Pa, unsigned __int32 a6, unsigned __int8 a7)
; VMX_IO_MIRROR::PickMemberUsingLoadBalancing(VMX_IO_MIRROR *this, unsigned __int64 a2)
; VMX_IO_RAID5::ReadStripe(VMX_IO_RAID5 *this, struct VMX_RAID5_TRANSFER_PACKET *a2)
; VMX_IO_MIRROR::RecoverRead(VMX_IO_MIRROR *this, struct VMX_MIRROR_TRANSFER_PACKET *a2)
; VMX_IO_RAID5::RecoverReadStripe(VMX_IO_RAID5 *this, struct VMX_RAID5_TRANSFER_PACKET *a2, char a3)
; VMX_PARITY_IO_MANAGER::StartReadForUpdateParity(VMX_PARITY_IO_MANAGER *this, unsigned __int64 a2, int a3, struct VMX_IO_OBJECT *a4, struct _ETHREAD *a5, unsigned __int32 a6, struct _FILE_OBJECT *a7, unsigned __int8 a8)
; VmxpMirrorReadWriteBackPhase1(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadEmergencyCompletion(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase1(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase2(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase3(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase4(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase5(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase6(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase7(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase8(struct VMX_TRANSFER_PACKET *a1)
; VmxpMirrorRecoverReadPhase9(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5CompleteWriteStripeDonePhase1(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5CompleteWriteStripeDonePhase2(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripeEmergencyCompletion(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase1(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase2(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase3(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase4(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase5(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase6(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase7(struct VMX_TRANSFER_PACKET *a1)
; VmxpRaid5RecoverReadStripePhase8(struct VMX_TRANSFER_PACKET *a1)
; StorSqmSetDWORD(__int64 a1, __int64 a2, __int64 a3)
; VmxpManageDataSetAttributes(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VmxpManageDataSetAttributesCompletion(void *a1, int a2)
; VmxpSetPartitionInfo(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VMX_NOTIFICATION_QUEUE::SetNotificationIoOutput(VMX_NOTIFICATION_QUEUE *this, struct _IRP *a2, struct VMX_NOTIFICATION_ENTRY *a3)
; VMX_DISK_DEVICE::Read(VMX_DISK_DEVICE *this, LARGE_INTEGER a2, unsigned int a3, unsigned __int8 **a4)
; VMX_DISK_DEVICE::SetDriveLayoutEx(VMX_DISK_DEVICE *this, PVOID InputBuffer)
; VMX_DISK_DEVICE::SetDriveLayoutExSynchronous(VMX_DISK_DEVICE *this, PVOID InputBuffer)
; VmxCreateLegacyNameLinks(void *a1, unsigned __int16 *a2)
; VmxSetGptAttributes(void *a1, ULONGLONG a2, char a3)
; VmxpCreateDisk(struct _IRP *a1)
; VmxpCreateDiskInNewPack(struct VMX_PHYSICAL_DISK *a1, unsigned __int16 *a2, struct VMX_PACK **a3, struct VMX_RECORD **a4)
; VmxpCreateDiskInPack(struct VMX_PHYSICAL_DISK *a1, struct _GUID *a2, struct VMX_PACK **a3, struct VMX_RECORD **a4)
; VmxpCreatePlex(struct _IRP *a1)
; VmxpCreateVolume(struct _IRP *a1)
; VmxpCreateVolumePartitions(struct _IRP *a1)
; VmxpLinkCreated(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VmxpQueryFailoverSet(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VmxpReadPlex(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VmxpSetPartitionInfoEx(struct VMX_VOLUME_DEVICE *a1, struct _IRP *a2)
; VmxpSetGptAttributesWorkerRoutine(PVOID P)
; VMX_CONFIG::CopyConfiguration(VMX_CONFIG *this, struct VMX_CONFIG *a2)
; VMX_RECORD::CopyRecord(VMX_RECORD *this, struct VMX_RECORD *a2)
; VMX_DISK_INFO::CopyRecordInfo(VMX_DISK_INFO *this, struct VMX_RECORD_INFO *a2, char a3)
; VMX_PACK_INFO::CopyRecordInfo(VMX_PACK_INFO *this, struct VMX_RECORD_INFO *a2, char a3)
; VMX_PLEX_INFO::CopyRecordInfo(VMX_PLEX_INFO *this, struct VMX_RECORD_INFO *a2, char a3)
; VMX_SUBDISK_INFO::CopyRecordInfo(VMX_SUBDISK_INFO *this, struct VMX_RECORD_INFO *a2, char a3)
; VMX_VOLUME_INFO::CopyRecordInfo(VMX_VOLUME_INFO *this, struct VMX_RECORD_INFO *a2, char a3)
; VMX_DISK_INFO::CopyToPending(VMX_DISK_INFO *this)
; VMX_PACK_INFO::CopyToPending(VMX_PACK_INFO *this)
; VMX_PLEX_INFO::CopyToPending(VMX_PLEX_INFO *this)
; VMX_SUBDISK_INFO::CopyToPending(VMX_SUBDISK_INFO *this)
; VMX_VOLUME_INFO::CopyToPending(VMX_VOLUME_INFO *this)
; VMX_CONFIG::CreateDiskRecord(VMX_CONFIG *this, struct VMX_RECORD **a2)
; VMX_CONFIG::CreatePackRecord(VMX_CONFIG *this, struct VMX_RECORD **a2)
; VMX_CONFIG::CreatePlexRecord(VMX_CONFIG *this, struct VMX_RECORD **a2)
; VMX_CONFIG::CreateRecord(VMX_CONFIG *this, struct VMX_RECORD **a2)
; VMX_CONFIG::CreateSubdiskRecord(VMX_CONFIG *this, struct VMX_RECORD **a2)
; VMX_CONFIG::CreateVolumeRecord(VMX_CONFIG *this, struct _GUID *a2, struct VMX_RECORD **a3)
; VMX_CONFIG::Read(VMX_CONFIG *this, struct VMX_CONFIG_COPY *a2)
; VMX_PLEX_INFO::SetActiveState(VMX_PLEX_INFO *this)
; VMX_VOLUME_INFO::SetActiveState(VMX_VOLUME_INFO *this)
; VMX_VOLUME_INFO::SetDriveLetter(VMX_VOLUME_INFO *this, unsigned __int8 a2)
; VMX_VOLUME_INFO::SetGptAttributes(VMX_VOLUME_INFO *this, ULONGLONG a2)
; VMX_PLEX_INFO::SetMemberStatus(__int64 a1, int a2)
; VMX_SUBDISK_INFO::SetMemberStatus(__int64 a1, int a2)
; VMX_PLEX_INFO::SetSyncState(VMX_PLEX_INFO *this)
; VMX_VOLUME_INFO::SetSyncState(VMX_VOLUME_INFO *this)
; VMX_CONFIG::SynchronizeConfigCopy(VMX_CONFIG *this, struct VMX_CONFIG_COPY *a2)
; VMX_MBR_CONTAINER::CompareCopyContainer(VMX_MBR_CONTAINER *this, struct VMX_MBR_CONTAINER *a2, unsigned __int32 *a3)
; VMX_PHYSICAL_DISK::CreateBasicPartitions(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateBasicPartitionsGpt(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateBasicPartitionsMbr(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateDynamicPartitions(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateDynamicPartitionsGpt(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateDynamicPartitionsMbr(VMX_PHYSICAL_DISK *this, struct VMX_RECORD *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX *a4)
; VMX_PHYSICAL_DISK::CreateMetadataPartition(VMX_PHYSICAL_DISK *this, struct _DRIVE_LAYOUT_INFORMATION_EX *a2)
; VMX_PHYSICAL_DISK::CreatePrivateRegion(VMX_PHYSICAL_DISK *this, struct VMX_PACK *a2, struct _DISK_GEOMETRY *a3, struct _DRIVE_LAYOUT_INFORMATION_EX **a4)
; VMX_TOC::InsertEntryInCopy(VMX_TOC *this, struct VMX_TOC_ENTRY *a2)
; VMX_CONFIG_COPY::ReadHeader(VMX_CONFIG_COPY *this)
; VMX_PHYSICAL_DISK::ReadHeader(VMX_PHYSICAL_DISK *this)
; VMX_PHYSICAL_DISK::ReadMetadata(VMX_PHYSICAL_DISK *this)
; VMX_CONFIG_COPY::ReadPackIdentity(VMX_CONFIG_COPY *this, struct _GUID *a2, char *a3)
; VMX_CONFIG_COPY::ReadSectors(VMX_CONFIG_COPY *this, unsigned __int64 a2, int a3, unsigned __int8 **a4, unsigned __int32 *a5)
; VMX_PHYSICAL_DISK::ReadSectors(VMX_PHYSICAL_DISK *this, __int64 a2, int a3, unsigned __int8 **a4)
; VMX_PHYSICAL_DISK::ReadToc(VMX_PHYSICAL_DISK *this)
; VmxpRead(PDEVICE_OBJECT DeviceObject, LARGE_INTEGER a2, unsigned int a3, unsigned __int8 **a4)
; VMX_LOG::AddLogCopy(VMX_LOG *this, struct VMX_LOG_COPY *a2)
; VMX_LOG::CopyLog(VMX_LOG *this, struct VMX_LOG *a2)
; VMX_LOG::ReadBlocks(VMX_LOG *this, unsigned int a2, __int64 a3, unsigned __int8 **a4)
; VMX_LOG_COPY::ReadBlocks(VMX_LOG_COPY *this, unsigned int a2, int a3, unsigned __int8 **a4, unsigned __int32 *a5)
; VMX_LOG::RemoveLogCopy(VMX_LOG *this, struct VMX_LOG_COPY *a2)
; VMX_LOG::SetBlocksCount(VMX_LOG *this, unsigned int a2)
; VMX_BITMAP::SetBitsRange(VMX_BITMAP *this, unsigned int a2, int a3)
; VMX_BITMAP::SetCount(VMX_BITMAP *this, int a2, enum _POOL_TYPE a3)
; VMX_PACK::CopyPack(VMX_PACK *this, struct VMX_PACK *a2)
; VMX_PACK::CreateColumn(VMX_PACK *this, struct VMX_RECORD *a2, unsigned int a3, struct _VM_PLEX_MEMBER_LAYOUT *a4, unsigned __int64 a5, unsigned __int32 a6)
; VMX_PACK::CreatePlex(VMX_PACK *this, struct VMX_RECORD *a2, struct _VM_PLEX_LAYOUT *a3, VMX_RECORD *a4, unsigned __int32 a5, struct VMX_RECORD **a6)
; VMX_PACK::CreatePlexTransaction(VMX_PACK *this, struct VMX_RECORD *a2, struct _VM_PLEX_LAYOUT *a3, struct VMX_RECORD **a4)
; VMX_PACK::CreateSubdisk(VMX_PACK *this, struct VMX_RECORD *a2, unsigned int a3, struct _VM_DISK_EXTENT_LAYOUT *a4, unsigned __int32 a5, struct VMX_RECORD **a6)
; VMX_PACK::CreateVolumePartitionsTransaction1(VMX_PACK *this, struct VMX_RECORD *a2)
; VMX_PACK::CreateVolumePartitionsTransaction2(VMX_PACK *this, struct VMX_RECORD *a2)
; VMX_PACK::CreateVolumeTransaction(VMX_PACK *this, struct _GUID *a2, struct _VM_VOLUME_LAYOUT *a3, struct VMX_RECORD **a4)
; VMX_PACK::IsDiskSetSelfContained(VMX_PACK *this, struct VMX_CHANGE_IDENTITY_TRANSACTION *a2)
; VMX_PACK::OfflineLogCopy(VMX_PACK *this, struct VMX_PHYSICAL_DISK *a2)
; VMX_PACK::OnlineConfigCopy(VMX_PACK *this, struct VMX_PHYSICAL_DISK *a2)
; VMX_PACK::OnlineLogCopy(VMX_PACK *this, struct VMX_PHYSICAL_DISK *a2)
; VMX_PACK::ReplaceLogCopy(VMX_PACK *this, struct VMX_PHYSICAL_DISK *a2, struct VMX_PHYSICAL_DISK *a3)
; VMX_PACK::SetGptAttributesTransaction(VMX_PACK *this, struct VMX_RECORD *a2, ULONGLONG a3, unsigned __int8 *a4)
; VMX_RAW_CONFIG::CopyRawConfiguration(VMX_RAW_CONFIG *this, struct VMX_RAW_CONFIG *a2)
; VMX_RAW_CONFIG::CreateRawRecord(VMX_RAW_CONFIG *this, struct VMX_RECORD *a2, struct VMX_RAW_RECORD **a3)
; VMX_RAW_CONFIG::Read(VMX_RAW_CONFIG *this, struct VMX_CONFIG_COPY *a2)
; VMX_RAW_CONFIG::ReadHeader(VMX_RAW_CONFIG *this, struct VMX_CONFIG_COPY *a2)
; VMX_RAW_CONFIG::SetBlocksAllocSize(VMX_RAW_CONFIG *this, unsigned int a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\volsnap.c ;
; VolSnapReadFilter(struct VS_FILTER_EXTENSION *a1, struct _DEVICE_OBJECT *a2, struct _IRP *a3)
; VolSnapRead(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; VspDecrementRefCount(struct VS_FILTER_EXTENSION *a1, __int64 a2)
; VspReadCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspDecrementDeviceRefCount(struct VS_FILTER_EXTENSION *a1@<rcx>, char a2@<zf>)
; VspDoubleBufferIncomingWrite(struct _VSP_CONTEXT *a1)
; VspSetAcdcCallback(const struct _GUID *a1, void *a2, unsigned int a3, void *a4)
; VolSnapReadVolume(struct VS_VOLUME_EXTENSION *a1, struct _DEVICE_OBJECT *a2, struct _IRP *a3)
; VspAddCopyTargetsToBitmap(struct VS_VOLUME_EXTENSION *a1, struct _VSP_BITMAP *a2)
; VspDecrementBandwidthContractRefCount(struct VS_FILTER_EXTENSION *a1, struct _FILE_OBJECT *a2)
; VspPreCopyOnWriteCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspReadAttributeList(struct _ATTRIBUTE_RECORD_HEADER *a1, struct _DEVICE_OBJECT *a2, unsigned __int32 a3, struct _ATTRIBUTE_LIST_ENTRY **a4, unsigned __int32 *a5)
; VolSnapCreate(__int64 a1, __int64 a2)
; VspAreIrpBitsSet(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2, char a3)
; VspQueryCopyFreeBitmap(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspManageDataSetAttributes(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspCreateDiffAreaFileName(PDEVICE_OBJECT DeviceObject, struct VS_VOLUME_EXTENSION *a2, struct _UNICODE_STRING *a3, char a4)
; VspFreeCopyIrp(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VspDecrementVolumeRefCount(struct VS_VOLUME_EXTENSION *a1@<rcx>, char a2@<zf>)
; VspLaunchCowRead(struct _TEMP_TRANSLATION_TABLE_ENTRY *a1)
; VspSetTableIrpPriorityHint(__int64 a1, int a2)
; VspCompareMemoryWithCopyIrp(struct _TEMP_TRANSLATION_TABLE_ENTRY *a1, struct _IRP *a2, char a3)
; VspDecrementIrpRefCount(struct _IRP *a1)
; VspIsOffsetInCopyFreeSpace(struct VS_VOLUME_EXTENSION *a1, signed __int64 a2)
; VspCopyData(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspOpenFilesAndValidateSnapshots(struct VS_FILTER_EXTENSION *a1)
; VspOpenControlBlockFile(struct VS_FILTER_EXTENSION *a1, char a2)
; VspSetDeletesInMotion(struct VS_FILTER_EXTENSION *a1)
; VspLaunchReadjustBitmap(struct VS_FILTER_EXTENSION *a1, char a2)
; VspReadjustBitmap(struct _VSP_CONTEXT *a1)
; VspSetDiffAreaFileObject(struct _VSP_DIFF_AREA_FILE *a1)
; VspSetIgnorableBlocksInBitmapWorker(struct _VSP_CONTEXT *a1)
; VspReadDiffAreaTableBlock(struct _IRP *a1, struct _DEVICE_OBJECT *a2, __int64 a3, unsigned __int32 *a4, unsigned __int8 *a5, struct VS_FILTER_EXTENSION *a6)
; VspReadInitialBitmap(struct VS_VOLUME_EXTENSION *a1, struct _VSP_BITMAP *a2, char a3, char a4)
; VspCreateInitialHeap(struct VS_VOLUME_EXTENSION *a1, char a2)
; VspCreateHeap(struct _VSP_CONTEXT *a1)
; VspCreateSnapshotExtension(struct VS_FILTER_EXTENSION *a1, GUID *Guid, __int64 a3, __int32 *a4)
; VspReadDiffAreaTable(struct _VSP_DIFF_AREA_FILE *a1, char a2)
; VspCreateWriteHeap(struct _VSP_CONTEXT *a1)
; VspSetFilterVersion(struct VS_FILTER_EXTENSION *a1, char a2)
; VspCreateStartBlock(__int64 a1, __int64 a2, __int64 a3, char a4, int a5)
; VspOnDiskIoRead(struct VS_FILTER_EXTENSION *a1, struct _DEVICE_OBJECT *a2, __int64 a3, unsigned __int32 a4, struct _FILE_OBJECT *a5)
; VspCreateSnapshotOnDiskIrp(struct VS_FILTER_EXTENSION *a1)
; VspCreateWorkerThread(struct _DO_EXTENSION *a1)
; VspReadSnapshot(struct _VSP_CONTEXT *a1)
; VspLaunchRead(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2, unsigned int a3, __int64 a4, unsigned __int32 a5, int a6, struct _DEVICE_OBJECT *a7, unsigned __int8 a8, __int64 a9)
; VspReadSnapshotPhase1(void *a1)
; VspReadSnapshotPhase2(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspDecrementVolumeIrpRefCount(PIRP Irp)
; VspReadCompletionForReadSnapshot(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspReadApplicationInfo(struct _VSP_DIFF_AREA_FILE *a1)
; VspDecrementIrpRefCountWorker(struct _VSP_CONTEXT *a1)
; VspAbortCopyOnWrites(struct VS_FILTER_EXTENSION *a1, PIRP Irp)
; VspAllocatePreCopyIrp(struct VS_FILTER_EXTENSION *a1, unsigned __int32 *a2, struct _IRP **a3, struct _IO_STACK_LOCATION **a4, struct _KEVENT *a5)
; VspAllocatePreCopyIrp(struct VS_FILTER_EXTENSION *a1, struct _VSP_CONTEXT *a2, struct _IRP *a3, struct _IRP **a4, struct _VSP_CONTEXT **a5)
; VspComputeIgnorableSet(struct VS_FILTER_EXTENSION *a1, struct _VSP_BITMAP *a2, unsigned int a3)
; VspCopyBlock(struct VS_VOLUME_EXTENSION *a1, __int64 a2, __int64 a3, __int32 a4)
; VspCopyDataWorker(struct _VSP_CONTEXT *a1)
; VspCopyExtents(struct VS_VOLUME_EXTENSION *a1, struct _LIST_ENTRY *a2)
; VspCopyExtentsCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspCopyOnWriteReadCompletion(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspCopyOnWriteToNonPagedPool(struct VS_FILTER_EXTENSION *a1, PIRP Irp)
; VspCopyWaitForExtensionWrites(struct VS_VOLUME_EXTENSION *a1, __int64 a2, signed __int64 a3, unsigned int a4)
; VspCreateInitialControlBlockFile(struct VS_FILTER_EXTENSION *a1)
; VspCreateInitialDiffAreaFile(struct VS_VOLUME_EXTENSION *a1, __int64 a2)
; VspCreateNewDiffAreaBlockAllocate(struct _VSP_DIFF_AREA_FILE *a1)
; VspCreateNewDiffAreaBlockPhase1(struct _VSP_DIFF_AREA_FILE *a1)
; VspCreateNewDiffAreaBlockPhase2(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspCreateNewDiffAreaBlockPhase3(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspCreateNewDiffAreaBlockPhase4(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; VspCreateSecurityDescriptor(void **a1, struct _ACL **a2)
; VspCreateStartBlockWorker(void *a1)
; VspDecrementWaitBlock(void *a1)
; VspDeleteDosLink(unsigned int a1)
; VspDiskCopy(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2, __int64 a3, __int64 a4, __int32 a5)
; VspLaunchOpenControlBlockFileWorker(struct VS_FILTER_EXTENSION *a1)
; VspLayDownOnDiskForSnapshot(struct VS_VOLUME_EXTENSION *a1)
; VspMakeTargetCopyFree(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2, __int64 a3, __int64 a4)
; VspOpenAndValidateDiffAreaFiles(struct VS_FILTER_EXTENSION *a1)
; VspOpenControlBlockFileWorker(struct _VSP_CONTEXT *a1)
; VspOpenDiffAreaFile(struct _VSP_DIFF_AREA_FILE *a1, char a2, union _LARGE_INTEGER *a3)
; VspProcessInMemoryCopyOnWrites(struct VS_VOLUME_EXTENSION *a1)
; VspQueryBlockCreates(struct _DO_EXTENSION *a1)
; VspQueryPreCopyAmounts(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspQueryPreCopyPercentages(struct _DO_EXTENSION *a1, __int64 *a2, __int64 *a3, unsigned __int32 *a4, __int64 *a5, unsigned __int32 *a6)
; VspQueryRegistryPreCopyPercentages(struct _DO_EXTENSION *a1@<rcx>, __int64 *a2@<rdx>, __int64 *a3@<r8>, unsigned __int32 *a4@<r9>, __int64 a5@<rbx>)
; VspReadSnapshotPhase3(void *a1)
; VspRecordPreCopyUsed(struct VS_VOLUME_EXTENSION *a1, int a2)
; VspRecordPreCopyUsedWorker(struct _VSP_CONTEXT *a1)
; VspRevertCopy(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2, struct _VSP_BITMAP *a3, struct _VOLSNAP_REVERT_PROGRESS *a4)
; VspSetApplicationFlags(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspSetApplicationInfo(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VspSetBitsWithClusterSize(struct _VSP_BITMAP *a1, unsigned __int64 a2, unsigned __int64 a3, unsigned int a4)
; VspSetDiffAreaBlocksInBitmap(struct VS_VOLUME_EXTENSION *a1)
; VspSetFileSize(HANDLE FileHandle, __int64 a2)
; VspSetFilterFlushAndHoldState(__int64 a1, signed __int32 a2, char a3)
; VspSetGptAttributes(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VspSetMaxDiffAreaSize(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspSetOfflineBit(struct VS_VOLUME_EXTENSION *a1, char a2, __int64 a3)
; VspSetPreCopyAmounts(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspSetPrepareVolumeForOffline(struct VS_FILTER_EXTENSION *a1, struct _IRP *a2)
; VspSetRevertBit(struct VS_FILTER_EXTENSION *a1)
; VspSetScopingData(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VspSetScopingDataCommit(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2, struct _VOLSNAP_SET_SCOPING_DATA *a3)
; VspSetScopingDataSetBitmap(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2, struct _VOLSNAP_SET_SCOPING_DATA *a3)
; VspSetSnapshotPriority(struct VS_VOLUME_EXTENSION *a1, struct _IRP *a2)
; VspSetSnapshotProtectionMode(struct VS_FILTER_EXTENSION *a1)
; VspSetUpRecalcBitmap(struct _VSP_CONTEXT *a1)
; VspStartCopyOnWrite(void *a1)
; VspStartCopyOnWriteCache(struct VS_FILTER_EXTENSION *a1)
; VspTrimOlderSnapshotBeforeCreate(struct VS_FILTER_EXTENSION *a1, __int64 *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vpci.c ;
; FdoReadConfig(__int64 a1, int a2, void *a3, unsigned int a4, unsigned int Size)
; VpciPacketCreate(__int64 a1, int a2)
; VpciCompletionBufferCreate(int a1)
; PdoReadBlockCompletion(__int64 a1, int a2, __int64 a3, unsigned int a4)
; PdoCheckReadWriteQueue(__int64 a1)
; VpciSetBusData(__int64 a1, __int64 a2, const void *a3, unsigned int a4, unsigned int Size)
; PnpBlockerAnnounceBlockingIsReadyWorker(__int64 a1)
; VpciSetTableEntry(__int64 a1, __int64 a2, unsigned int a3)
; FdoCreateVmbusChannel(__int64 a1)
; VpciReadConfigBlock(__int64 a1, int a2, __int64 a3, int a4)
; PdoCreatePacket(__int64 a1, int a2, __int64 a3)
; PdoCreate(__int64 a1, __int64 a2, __int64 a3)
; PdoAppendMsiRequirements(__int64 a1, char a2, unsigned int a3, char a4)
; PdoSaveRawAndTranslatedResources(__int64 a1)
; PdoPreprocessReadWriteConfig(__int64 a1, PIRP Irp)
; PnpBlockerBroadcastBlockingIsReady(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vpnva64-6.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vsmraid.c ;
; SetFirstTarget(__int64 a1)
; TestDeviceReady(__int64 a1, __int64 a2, __int64 a3)
; ParseIdeReadWrite(__int64 a1, __int64 a2)
; SetRealLogicTarget(__int64 a1, __int64 a2)
; SaveConfigSpace(__int64 a1)
; AhciDispatchDiskReadWrite(__int64 a1, __int64 a2)
; AhciDispatchIdeTestUnitReady(__int64 a1, __int64 a2)
; AhciSetMultiple(__int64 a1, unsigned int a2)
; AhciResumeSetAllFeature(__int64 a1)
; AhciResumeSetFeature(__int64 a1, unsigned int a2, __int64 a3, char a4)
; AhciSetFeature(__int64 a1, unsigned int a2, char a3, char a4)
; AhciSetDriveParameters(__int64 a1, char a2)
; AhciIsDevReady(__int64 a1, unsigned int a2)
; AhciReadWriteHDDSector(__int64 a1, unsigned int a2, unsigned __int64 a3, __int64 a4, char a5)
; DispatchDiskReadWrite(__int64 a1, __int64 a2)
; DispatchAtapiReadWrite(__int64 a1, __int64 a2)
; ReadWriteHDDSector(__int64 a1, unsigned int a2, unsigned __int64 a3, __int64 a4, char a5)
; ReadConfigSpace(__int64 a1)
; ReadConfigSpaceUlong(__int64 a1, unsigned int a2)
; ReadConfigSpaceUCHAR(__int64 a1, unsigned int a2)
; SetTargetProperty(__int64 a1)
; ReadWriteHostSStatusRegister(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; ReadWriteHostSControlRegister(__int64 a1, unsigned int a2, char a3, unsigned int *a4)
; ReadWriteHostSErrorRegister(__int64 a1, unsigned int a2, char a3, int *a4)
; SetMultiple(__int64 a1, unsigned int a2)
; SpecialSataResumeSetAllFeature(__int64 a1)
; SataResumeSetAllFeature(__int64 a1)
; SetAllFeature(__int64 a1, char a2)
; SataResumeSetFeature(__int64 a1, unsigned int a2, __int64 a3, unsigned __int8 a4)
; SetFeature(__int64 a1, unsigned int a2, __int64 a3, char a4)
; SetDriveParameters(__int64 a1, char a2)
; DispatchTestDevReady(__int64 a1, __int64 a2, __int64 a3)
; DispatchIdeTestUnitReady(__int64 a1, __int64 a2)
; IsDevReady(__int64 a1, unsigned int a2, __int64 a3)
; RAID5ReadFromCache(__int64 a1, __int64 a2)
; RAID5CreateReadSubCmd(__int64 a1, __int64 a2, int a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
; Raid5CreateWriteAllCMD(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; RAID5CreateParityCMD(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, __int64 a6, int a7)
; ReadWriteConfigFromHDD(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, char a5)
; SetFailedMember(__int64 a1, unsigned __int8 a2)
; StorGetSetSrbExtension(__int64 a1, __int64 a2, char a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vsock.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\VSTXRAID.c ;
; SaveRegistryPath(PCUNICODE_STRING SourceString)
; VstxReadRegistry(UNICODE_STRING *a1, const char *a2, __int64 a3, void *a4)
; VstxSetPciConfigUchar(__int64 a1, unsigned int a2, unsigned int a3)
; AtaLoadTaskFile(__int64 a1, __int64 a2, __int64 a3)
; AtaReadLogPage(__int64 a1, int a2, int a3, int a4)
; AtaReadTaskFile(__int64 a1, __int64 a2, __int64 a3)
; AtaReadWriteOneSector(__int64 a1, int a2, unsigned __int64 a3, char a4)
; AtaScsiSetSense(__int64 a1, char a2, char a3, char a4)
; SataPmpSetGSCR(__int64 a1, __int64 a2, __int64 a3, int a4)
; SataPmpSetRegVal(__int64 a1, __int64 a2, __int64 a3, __int16 a4, __int64 a5, __int64 a6)
; SataSetPMPField(__int64 a1, __int64 a2, unsigned __int8 a3)
; SataSetSCR(__int64 a1, __int64 a2, __int64 a3, char a4, unsigned int a5)
; SetDriveParameters(__int64 a1, unsigned int a2)
; SetFeature(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; SetMultipleMode(__int64 a1, __int64 a2, __int64 a3)
; SetPortConfigInfo(__int64 a1, __int64 a2)
; SetTransferMode(__int64 a1, __int64 a2, __int64 a3)
; SmartReadData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; SmartReadThreshold(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; IsDeviceReady(__int64 a1, unsigned int a2, __int64 a3)
; SetPnpDeviceFlag(__int64 a1, __int64 a2, __int64 a3)
; WaitAllDeviceReady(__int64 a1)
; SataAllDeviceReady(__int64 a1)
; SataAllPmpDeviceReady(__int64 a1)
; IsDoubleListEmpty(__int64 a1)
; Stor_RaidLibDriverAtomicDec(volatile signed __int32 *a1)
; Stor_RaidLibDriverCopyBuffer(void *a1, const void *a2, unsigned int a3)
; Stor_RaidLibDriverDoDiv64(unsigned __int64 a1, unsigned int a2, __int64 a3)
; Stor_RaidLibDriverReadWriteSector(__int64 a1, unsigned __int16 a2, char a3, unsigned __int64 a4, void *Dst, __int64 a6, void *Dsta)
; CdSetDevExtPointer(__int64 a1)
; SetBufManagersPtr(__int64 a1)
; SetBufManagersPtrInSrbExt(__int64 a1)
; Raid1ReadBalance(__int64 a1, __int64 a2, unsigned __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; Raid5DoXOR(__int64 a1, __int64 a2)
; SetCDB(__int64 a1, char a2, unsigned __int64 a3, __int64 a4, unsigned int a5, __int64 a6, __int64 a7)
; SetVdDirty(__int64 a1, char a2, __int16 a3, char a4, char a5, unsigned __int64 a6, unsigned __int8 a7, __int64 a8)
; SetVdDirtyCallBack(__int64 a1)
; CopyRaidFunc(__int64 a1, __int64 a2, __int64 a3)
; RaidConvertConfigData(__int64 a1, __int64 a2)
; RaidSavePrivateData(__int64 a1, __int64 a2, __int64 a3)
; RaidSetArrayCapacity(__int64 a1, __int64 a2)
; RaidSetFuncStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5)
; RaidSetLunEnumStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5, char a6)
; SaveCtrlContext(__int64 a1, __int64 a2, unsigned __int8 a3)
; BuildReadWriteSubCmdSrb(__int64 a1, char a2, unsigned __int64 a3, __int64 a4, unsigned int a5, __int64 a6)
; MigrateSaveAddr(__int64 a1, __int64 a2)
; ParseUcmdGetSetVDProperty(__int64 a1, __int64 a2, __int64 a3)
; ParseUcmdReadPdData(__int64 a1, __int64 a2, __int64 a3)
; SyncSaveAddr(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vwifibus.c ;
; Bus_EvtDeviceListCreatePdo(__int64 a1, __int64 a2, __int64 a3)
; Bus_CreatePdo(__int64 a1, __int64 a2, const WCHAR *a3, int a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vwififlt.c ;
; FilterReadSerialNumber(__int64 a1, __int64 a2, __int64 a3)
; FilterBusDriverReadyCallbackRoutine(PVOID NotificationStructure, PVOID Context, __int64 a3)
; FilterSetVirtualAdapter(__int64 a1, __int64 a2, __int64 a3)
; FilterSaveMpAttributes(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; filterDoInternalRequest(__int64 a1, int a2, int a3, __int64 a4, int a5, int a6, __int64 a7, __int64 a8)
; filterReadLong(__int64 a1, const WCHAR *a2, __int64 a3)
; CopyMpGeneralAttributes(__int64 a1, const void *a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\vwifimp.c ;
; MpSetRegistrationAttributes(__int64 a1)
; MPCopyWwanIPAddressState(__int64 a1, __int64 a2, __int64 a3)
; WwanAdjustDhcpSettings(__int64 a1, __m128i *a2, __int64 a3)
; MbbIpSetLastIPAddresses(__int64 a1, int a2, __int64 a3, unsigned int a4)
; MbbIpSetPrefixLength(__int64 a1, __int16 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wacompen.c ;
; SetDeviceReportDescriptor(__int64 a1)
; SerialAsyncReadWriteData(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, __int64 a6, __int64 a7)
; AsyncReadWriteCompletion(__int64 a1, __int64 a2, __int64 a3)
; SyncReadWriteCompletion(__int64 a1, __int64 a2, volatile signed __int32 *a3)
; OemReadReport(__int64 a1, __int64 a2, __int64 a3)
; ReadReportCompletion(__int64 a1, __int64 a2, __int64 a3)
; ReadMoreBytes(PDEVICE_OBJECT DeviceObject, PVOID Context)
; HpenCreateClose(__int64 a1, __int64 a2)
; SerialAsyncReadWritePort(__int64 a1, __int64 a2, void *a3, ULONG a4)
; SerialSyncReadWritePort(char a1, __int64 a2, void *a3, ULONG a4, volatile signed __int32 *a5, PLARGE_INTEGER Timeout, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wanarp.c ;
; RtlStringCchCopyExW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc, wchar_t **ppszDestEnd, size_t *pcchRemaining, unsigned __int32 dwFlags)
; WanpSetLookaheadComplete(__int64 a1, __int64 a2, int a3)
; WanpSetPacketFilterComplete(__int64 a1, __int64 a2, int a3)
; WanpNdisOpenAdapter(__int64 a1, __int64 a2, char a3)
; WanpSetProtocolTypeComplete(__int64 a1, __int64 a2, int a3)
; WanpDoNdisRequest(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, void (__fastcall *a6)(_QWORD, _QWORD, _QWORD), char a7)
; WanpSetCloseEventIfRequired(char a1)
; WanIpQuerySetInterfaceDirect(__int64 a1, int a2, int a3, __int64 a4, __int64 a5, int a6, __int64 a7, int a8)
; WanNdisOpenAdapterComplete(__int64 a1, __int64 a2)
; WanpSetupExternalName(PUNICODE_STRING DeviceName, const WCHAR *a2, char a3)
; OpenRegKey(PHANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
; WanpLinkDownIndicationWorkItemImpl(__int64 a1, char a2)
; WanpLinkDownIndication(__int64 a1, unsigned int a2)
; WanpLinkDownIndicationWorkItem(__int64 a1)
; ConvertGuidToString(__int64 a1, wchar_t *a2, const wchar_t *a3)
; WanpCreateConnEntry(int a1, char a2)
; WanSetInterfaceSubnetInfo(__int64 a1, unsigned int a2, int a3, bool a4)
; WanpCreateNewAdapter(__int64 a1, __int64 a2, char a3, char a4)
; WanpCreateAdapter(__m128i *a1, unsigned int *a2, __int64 a3, __int64 a4, char a5, __int64 a6)
; WanpCreateAdapterContext(__int64 a1, __int64 a2, __int64 a3, PVOID *a4)
; WanpCreateAndRegisterInterface(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, char a6, __int64 a7, __int64 a8, __int64 a9)
; WanpCreateInterfaceContext(char a1, int a2, __int64 a3, int a4, __int64 a5)
; WanpRouterLinkDownHandler(__int64 a1, KIRQL a2, __int64 a3)
; WanSetIpAddresses(__int64 a1, unsigned int a2, __int64 a3, char a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\watchdog.c ;
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; StringCchCopyNW(__int64 a1, __int64 a2, __int64 a3, unsigned __int64 a4)
; WerKernelCreateReport(const WCHAR *a1, const WCHAR *a2, __int64 a3)
; WerpCreateRegistryKey(void *a1, const WCHAR *a2, ACCESS_MASK a3, char a4, PHANDLE KeyHandle, __int64 a6)
; WdRegOpenSubkey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, void *a3, UNICODE_STRING *a4)
; WdDbgCreateSnapshot(__int64 *a1, unsigned __int64 a2, unsigned int a3, __int64 a4, __int64 a5)
; WdDbgReportCreate(PVOID a1, unsigned int a2, __int64 a3, __int64 a4, PVOID a5, __int64 a6)
; WdpAppendSecondaryMinidumpData(__int64 *a1, unsigned __int64 a2, unsigned int a3, __int64 a4, unsigned int a5)
; WdpDbgReportCreateFromDump(__int64 a1, unsigned __int64 a2, unsigned int a3)
; WdpWerCreateDumpFile(__int64 a1, HANDLE *a2)
; WdpWerCreateNewDumpFile(__int64 a1, HANDLE *a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WdBoot.c ;
; RtlUnicodeStringCopy(__int64 a1, unsigned __int16 *a2)
; EbLoadSignatureData(__int64 a1, unsigned int a2)
; MpEbCopyBootDriverInfo(__int64 a1, __int64 a2)
; MpEbLoadSignaturesEx(__int64 a1, __int64 a2, const WCHAR *a3, __int64 a4, __int64 a5)
; MpEbLoadSignatures(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\Wdf01000.c ;
; FxPkgGeneral::OnCreate(FxPkgGeneral *this, struct FxIrp *a2)
; imp_WdfRequestSetCompletionRoutine(__int64 a1, void *a2, __int64 a3, __int64 a4)
; FxPkgFdo::_PnpPassDown(struct FxPkgPnp *a1, struct FxIrp *a2)
; FxRequest::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct _IRP *a3, struct FxIoTarget *a4, enum FxRequestIrpOwnership a5, enum FxRequestConstructorCaller a6, struct FxRequest **a7)
; imp_WdfRequestCreate(__int64 a1, __int64 a2, void *a3, __int64 a4)
; imp_WdfRequestSetInformation(__int64 a1, void *a2, __int64 a3)
; FxCopyMultiSz(unsigned __int16 *Dst, struct FxCollectionInternal *a2)
; FxPkgPnp::PowerSetDevicePowerState(FxPkgPnp *this, enum _WDF_POWER_DEVICE_STATE a2)
; FxIoTargetRemoveOpenParams::Clear(FxIoTargetRemoveOpenParams *this)
; FxPkgPnp::SetPendingPnpIrp(FxPkgPnp *this, struct FxIrp *a2, char a3)
; FxIoQueue::SetState(FxIoQueue *this, enum _FX_IO_QUEUE_SET_STATE a2)
; FxPkgPnp::SaveState(FxPkgPnp *this, char a2)
; FxDevice::CreateDevice(FxDevice *this, struct WDFDEVICE_INIT *a2)
; imp_WdfIoQueueCreate(__int64 a1, void *a2, __int64 a3, struct _WDF_OBJECT_ATTRIBUTES *a4, __int64 a5)
; FxWmiIrpHandler::PostCreateDeviceInitialize(FxWmiIrpHandler *this)
; FxPkgGeneral::PostCreateDeviceInitialize(FxPkgGeneral *this, struct WDFDEVICE_INIT *a2)
; FxIoQueue::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct _WDF_IO_QUEUE_CONFIG *a3, struct FxDriver *a4, struct FxPkgIo *a5, unsigned __int8 a6, struct FxIoQueue **a7)
; FxPkgIo::CreateQueue(FxPkgIo *this, struct _WDF_IO_QUEUE_CONFIG *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct FxDriver *a4, struct FxIoQueue **a5)
; FxDisposeList::_Create(struct _FX_DRIVER_GLOBALS *a1, void *a2, struct FxDisposeList **a3)
; FxSystemWorkItem::_Create(struct _FX_DRIVER_GLOBALS *a1, void *a2, struct FxSystemWorkItem **a3)
; imp_WdfDeviceCreate(__int64 a1, struct WDFDEVICE_INIT **a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4)
; FxDevice::_Create(struct _FX_DRIVER_GLOBALS *a1, struct WDFDEVICE_INIT **a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct FxDevice **a4)
; WDFDEVICE_INIT::ShouldCreateSecure(WDFDEVICE_INIT *this)
; FxChildList::_CreateAndInit(struct FxChildList **a1, struct _FX_DRIVER_GLOBALS *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4, struct FxDevice *a5, struct _WDF_CHILD_LIST_CONFIG *a6, unsigned __int8 a7)
; imp_WdfDeviceInitSetDeviceType(__int64 a1, __int64 a2, int a3)
; FxDevice::SetDeviceSqmInfoFlags(FxDevice *this, enum FxDeviceInfoFlags a2)
; imp_WdfDeviceInitSetExclusive(__int64 a1, __int64 a2, char a3)
; FxPkgPnp::PowerDecideD0State(struct FxPkgPnp *a1)
; imp_WdfDeviceInitSetPnpPowerEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; FxPkgPnp::PostCreateDeviceInitialize(FxPkgPnp *this)
; FxCmResList::_CreateAndInit(struct FxCmResList **a1, struct _FX_DRIVER_GLOBALS *a2, struct FxDevice *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, unsigned __int8 a5)
; imp_WdfDeviceOpenRegistryKey(__int64 a1, void *a2, unsigned int a3, unsigned __int32 a4, struct _WDF_OBJECT_ATTRIBUTES *a5, HANDLE a6)
; FxDevice::_OpenKey(struct _FX_DRIVER_GLOBALS *a1, __int64 DesiredAccess, struct _DEVICE_OBJECT *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, unsigned __int32 DesiredAccessa, struct _WDF_OBJECT_ATTRIBUTES *a6, HANDLE DevInstRegKey, void *a8, unsigned __int16 *DevInstRegKeya)
; WDFDEVICE_INIT::SetPdo(WDFDEVICE_INIT *this, struct FxDevice *a2)
; imp_WdfDeviceInitSetCharacteristics(__int64 a1, __int64 a2, int a3, char a4)
; FxPkgPdo::PnpSendStartDeviceDownTheStackOverload(FxPkgPdo *this)
; FxChildList::CreateDevice(FxChildList *this, struct FxDeviceDescriptionEntry *a2, unsigned __int8 *a3)
; imp_WdfDeviceSetPowerCapabilities(__int64 a1, void *a2, __int64 a3)
; FxPkgPnp::SetPowerCaps(FxPkgPnp *this, struct _WDF_DEVICE_POWER_CAPABILITIES *a2)
; imp_WdfPdoInitSetEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; imp_WdfDeviceSetPnpCapabilities(__int64 a1, void *a2, struct _WDF_DEVICE_PNP_CAPABILITIES *a3)
; FxPkgPnp::SetPnpCaps(FxPkgPnp *this, struct _WDF_DEVICE_PNP_CAPABILITIES *a2)
; imp_WdfPdoInitSetDefaultLocale(__int64 a1, __int64 a2, int a3)
; imp_WdfObjectCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FxUserObject::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxUserObject **a3)
; imp_WdfIoTargetCreate(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4)
; FxIoTargetRemote::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxDeviceBase *a3, struct FxIoTargetRemote **a4)
; FxIoTargetRemote::Open(FxIoTargetRemote *this, struct _WDF_IO_TARGET_OPEN_PARAMS *a2)
; imp_WdfIoTargetOpen(__int64 a1, void *a2, __int64 *a3)
; FxIoTargetValidateOpenParams(__int64 a1, __int64 a2)
; imp_WdfCollectionCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; FxRegKey::SetValue(FxRegKey *this, const struct _UNICODE_STRING *a2, ULONG a3, void *a4, unsigned __int32 a5)
; imp_WdfChildListCreate(__int64 a1, void *a2, struct _WDF_CHILD_LIST_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, void **a5)
; FxPkgPnp::PowerDmaPowerDown(FxPkgPnp *this)
; FxPkgPnp::PowerSendPowerDownEvents(FxPkgPnp *this, enum FxPowerDownType a2)
; FxPkgPnp::PowerPolicyChildPoweredDown(FxPkgPnp *this@<rcx>, struct _FX_DRIVER_GLOBALS *a2@<rdx>, __int64 a3@<rbp>)
; FxWmiIrpHandler::DecrementUpdateCount(FxWmiIrpHandler *this)
; FxEventQueue::SetFinished(FxEventQueue *this, struct FxCREvent *a2)
; FxPkgGeneral::ForwardCreateRequest(FxPkgGeneral *this, struct FxIrp *a2, __int32 (__stdcall *a3)(struct _DEVICE_OBJECT *, struct _IRP *, void *), void *a4)
; FxPkgGeneral::_CreateCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; FxPkgGeneral::CreateCompleted(FxPkgGeneral *this, struct FxIrp *a2)
; FxRequest::SetCompletionState(FxRequest *this, enum FxRequestCompletionState a2)
; FxIoContext::CopyParameters(FxIoContext *this, struct FxRequestBase *a2)
; FxPkgPnp::PowerPolStartingDecideS0Wake(FxPkgPnp *this, struct _FX_DRIVER_GLOBALS *a2)
; FxPowerPolicyOwnerSettings::_PowerStateCallback(PVOID CallbackContext, PVOID Argument1, PVOID Argument2)
; FxPkgPnp::PowerPolicySetS0IdleState(FxPkgPnp *this, char a2)
; imp_WdfDeviceAssignS0IdleSettings(__int64 a1, void *a2, __int64 a3)
; FxPkgPnp::PowerPolicySetS0IdleSettings(FxPkgPnp *this, struct _WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS *a2, __int64 a3, __int64 a4)
; FxPkgPnp::SetPendingDevicePowerIrp(FxPkgPnp *this, struct FxIrp *a2)
; FxRegKey::_Create(void *a1, const struct _UNICODE_STRING *a2, void **a3, ACCESS_MASK a4, unsigned __int32 a5, unsigned __int32 *a6)
; FxRequest::_CreateForPackage(struct FxDevice *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct _IRP *a3, struct FxRequest **a4)
; FxDevice::OpenSettingsKey(FxDevice *this, void **a2, ACCESS_MASK a3)
; FxPkgPnp::PowerPolTimerExpiredNoWakeCompletePowerDown(struct FxPkgPnp *a1)
; FxPoxInterface::DeclareComponentIdle(FxPoxInterface *this)
; FxPoxInterface::NotifyDevicePowerDown(FxPoxInterface *this)
; FxPkgFdo::_PowerPassDown(struct FxPkgPnp *a1, struct FxIrp *a2)
; FxPowerIdleMachine::TimedOutPowerDown(struct FxPowerIdleMachine *a1)
; FxPkgFdo::_DispatchSetPower(struct FxPkgPnp *this, struct FxIrp *a2)
; FxPkgFdo::DispatchDeviceSetPower(FxPkgFdo *this, struct FxIrp *a2)
; FxPkgPdo::_DispatchSetPower(struct FxPkgPnp *this, struct FxIrp *a2)
; FxPkgPdo::DispatchDeviceSetPower(FxPkgPdo *this, struct FxIrp *a2)
; FxPkgPnp::PowerPolicyCanIdlePowerDown(FxPkgPnp *this, __int64 PowerState)
; FxPkgPnp::_PowerPolDevicePowerDownComplete(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context)
; FxPkgPdo::DispatchSystemSetPower(FxPkgPdo *this, struct FxIrp *a2)
; FxPkgFdo::DispatchSystemSetPower(FxPkgFdo *this, struct FxIrp *a2)
; FxChildList::CopyId(FxChildList *this, struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *a2, struct _WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER *a3)
; FxDmaEnabler::PowerDown(FxDmaEnabler *this, __int64 a2, __int64 a3)
; FxPowerIdleMachine::DecrementIo(struct FxPowerIdleMachine *a1)
; FxPkgPnp::PowerPolTimerExpiredNoWakePoweredDownDisableIdleTimer(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolSleepingNoWakePowerDown(FxPkgPnp *this)
; FxPkgPnp::PowerPolicyPowerDownForSx(FxPkgPnp *this, __int64 a2, enum SendDeviceRequestAction a3)
; FxMemoryObject::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, enum _POOL_TYPE a3, ULONG a4, unsigned __int64 a5, struct FxMemoryObject **a6)
; FxMemoryBuffer::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, unsigned __int32 a3, __int64 a4, enum _POOL_TYPE a5, struct FxMemoryObject **a6)
; imp_WdfMemoryCreate(__int64 a1, __int64 a2, enum _POOL_TYPE a3, ULONG a4, unsigned __int64 a5, __int64 a6, __int64 a7)
; FxRequestBuffer::SetMemory(FxRequestBuffer *this, struct IFxMemory *a2, struct _WDFMEMORY_OFFSET *a3)
; imp_WdfWorkItemCreate(__int64 a1, __int64 a2, __int64 a3, struct WDFWORKITEM__ **a4)
; FxWorkItem::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_WORKITEM_CONFIG *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct FxObject *a4, struct WDFWORKITEM__ **a5)
; FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDown(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredDecideUsbSS(struct FxPkgPnp *a1)
; FxIoTargetRemoveOpenParams::Set(FxIoTargetRemoveOpenParams *this, struct _WDF_IO_TARGET_OPEN_PARAMS *a2, struct _UNICODE_STRING *a3, void *a4, unsigned __int32 a5)
; FxIoTargetRemote::OpenTargetHandle(FxIoTargetRemote *this, struct _WDF_IO_TARGET_OPEN_PARAMS *a2, struct FxIoTargetRemoveOpenParams *a3)
; FxRegKey::_OpenKey(void *a1, const struct _UNICODE_STRING *a2, void **a3, ACCESS_MASK a4)
; RtlStringCopyWorkerA(char *pszDest, size_t cchDest, const char *pszSrc)
; FxRegistrySettingsInitialize(struct _FX_DRIVER_GLOBALS *a1, const struct _UNICODE_STRING *a2, char a3)
; FxOverrideDefaultVerifierSettings(void *a1, const WCHAR *a2, __int64 a3)
; imp_WdfDriverCreate(__int64 a1, __int64 a2, __int64 a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct _WDF_DRIVER_CONFIG *a5, __int64 a6)
; _FX_DRIVER_GLOBALS::SetVerifierState(_FX_DRIVER_GLOBALS *this, char a2)
; RegistryReadLastLoggedTime(__int64 a1, __int64 a2)
; imp_WdfDeviceInitSetIoType(__int64 a1, WDFDEVICE_INIT *a2, int a3)
; FxDevice::SetFilter(FxDevice *this, char a2)
; FxPkgFdo::_Create(struct _FX_DRIVER_GLOBALS *a1, struct FxDevice *a2, struct FxPkgFdo **a3)
; FxPkgFdo::PostCreateDeviceInitialize(FxPkgFdo *this)
; FxPowerPolicyOwnerSettings::FxPowerPolicyOwnerSettings(__int64 a1, __int64 a2)
; FxPowerPolicyOwnerSettings::Init(PVOID CallbackContext)
; imp_WdfDeviceCreateDeviceInterface(__int64 a1, void *a2, __m128i *a3, __int64 a4)
; FxDeviceInterface::SetState(FxDeviceInterface *this, char a2)
; FxPkgFdo::PnpSendStartDeviceDownTheStackOverload(FxPkgFdo *this)
; imp_WdfDeviceSetBusInformationForChildren(__int64 a1, void *a2, __int64 a3)
; FxPkgFdo::CreateDefaultDeviceList(FxPkgFdo *this, struct _WDF_CHILD_LIST_CONFIG *a2, struct _WDF_OBJECT_ATTRIBUTES *a3)
; imp_WdfFdoInitSetDefaultChildListConfig(__int64 a1, __int64 a2, struct _WDF_CHILD_LIST_CONFIG *a3, __int64 a4)
; imp_WdfWaitLockCreate(__int64 a1, __int64 a2, struct WDFWAITLOCK__ **a3, __int64 a4)
; FxWaitLock::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxObject *a3, unsigned __int8 a4, struct WDFWAITLOCK__ **a5)
; imp_WdfDeviceInitSetFileObjectConfig(__int64 a1, ULONG_PTR *a2, char *a3, __int64 a4)
; imp_WdfDeviceCreateSymbolicLink(__int64 a1, void *a2, __int64 a3)
; FxDevice::CreateSymbolicLink(FxDevice *this, struct _FX_DRIVER_GLOBALS *a2, const struct _UNICODE_STRING *a3)
; imp_WdfDeviceInitSetRequestAttributes(__int64 a1, ULONG_PTR *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4)
; imp_WdfDeviceInitSetIoInCallerContextCallback(__int64 a1, __int64 a2, __int64 a3)
; imp_WdfWmiInstanceCreate(__int64 a1, __int64 a2, __int64 a3, struct _WDF_OBJECT_ATTRIBUTES *a4, __int64 a5)
; FxWmiInstanceExternal::_Create(struct _FX_DRIVER_GLOBALS *a1, struct FxWmiProvider *a2, struct _WDF_WMI_INSTANCE_CONFIG *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct WDFWMIINSTANCE__ **a5, struct FxWmiInstanceExternal **a6)
; FxWmiProvider::_Create(struct _FX_DRIVER_GLOBALS *a1, struct WDFDEVICE__ *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct _WDF_WMI_PROVIDER_CONFIG *a4)
; imp_WdfTimerCreate(__int64 a1, __int64 a2, __int64 a3, struct WDFTIMER__ **a4)
; FxTimer::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_TIMER_CONFIG *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct FxObject *a4, struct WDFTIMER__ **a5)
; imp_WdfDeviceInitSetPowerPolicyOwnership(__int64 a1, __int64 a2, char a3)
; imp_WdfDeviceInitSetPowerPageable(__int64 a1, __int64 a2)
; FxSelfManagedIoMachine::_CreateAndInit(struct FxSelfManagedIoMachine **a1, struct FxPkgPnp *a2)
; imp_WdfDeviceSetSpecialFileSupport(__int64 a1, void *a2, enum _WDF_SPECIAL_FILE_TYPE a3, char a4)
; imp_WdfSpinLockCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; imp_WdfRegistryOpenKey(__int64 a1, void *a2, __int64 a3, __int64 a4, struct _WDF_OBJECT_ATTRIBUTES *a5, __int64 a6)
; FxObject::DeleteFromFailedCreate(FxObject *this)
; imp_WdfDeviceInitSetPowerPolicyEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; imp_WdfStringCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; imp_WdfDeviceInitSetReleaseHardwareOrderOnFailure(__int64 a1, __int64 a2, signed int a3)
; imp_WdfDeviceAssignSxWakeSettings(__int64 a1, void *a2, __int64 a3)
; FxPkgPnp::PowerPolicySetSxWakeSettings(FxPkgPnp *this, struct _WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS *a2, char a3, char a4)
; FxPkgPnp::PowerPolicySetSxWakeState(FxPkgPnp *this, struct _FX_DRIVER_GLOBALS *a2)
; imp_WdfDriverOpenParametersRegistryKey(__int64 a1, void *a2, ACCESS_MASK a3, __int64 a4)
; FxDevice::SetFilterIoType(FxDevice *this)
; imp_WdfFdoInitSetFilter(__int64 a1, __int64 a2)
; FxPkgPnp::ReadRegistryS0Idle(FxPkgPnp *this, const struct _UNICODE_STRING *a2, unsigned __int8 *a3)
; imp_WdfFdoInitSetEventCallbacks(__int64 a1, __int64 a2, __int64 a3)
; imp_WdfInterruptCreate(__int64 a1, void *a2, unsigned int *a3, __int64 a4, __int64 a5)
; FxInterrupt::_CreateAndInit(struct _FX_DRIVER_GLOBALS *a1, struct FxDevice *a2, struct FxObject *a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct _WDF_INTERRUPT_CONFIG *a5, struct FxInterrupt **a6)
; imp_WdfMemoryCreatePreallocated(__int64 a1, __int64 a2, _FX_DRIVER_GLOBALS *a3, __int64 a4, __int64 a5)
; imp_WdfDeviceInitSetRemoveLockOptions(__int64 a1, __int64 a2, __int64 a3)
; FxIoResReqList::_CreateFromWdmList(struct _FX_DRIVER_GLOBALS *a1, struct _IO_RESOURCE_REQUIREMENTS_LIST *a2)
; imp_WdfRequestCreateFromIrp(__int64 a1, __int64 a2, struct _IRP *a3, char a4, __int64 a5)
; imp_WdfDmaEnablerCreate@<rax>(void *a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, int *a4@<r8>, __int64 a5@<r9>)
; imp_WdfCommonBufferCreateWithConfig(__int64 a1, void *a2, unsigned __int64 a3, __int64 a4, struct _WDF_OBJECT_ATTRIBUTES *a5, __int64 a6)
; FxLibraryCreateDevice(PUNICODE_STRING DeviceName)
; FxIoResReqList::CreateWdmList(FxIoResReqList *this)
; imp_WdfInterruptSetPolicy(__int64 a1, void *a2, enum _WDF_INTERRUPT_POLICY a3, enum _WDF_INTERRUPT_PRIORITY a4, unsigned __int64 a5)
; FxInterrupt::SetPolicy(FxInterrupt *this, enum _WDF_INTERRUPT_POLICY a2, enum _WDF_INTERRUPT_PRIORITY a3, struct _GROUP_AFFINITY *a4)
; FxFileObjectFileCreate::Invoke(FxFileObjectFileCreate *this, struct WDFDEVICE__ *a2, struct WDFREQUEST__ *a3, struct WDFFILEOBJECT__ *a4)
; FxPowerIdleMachine::TimedOutPowerDownFailed(struct FxPowerIdleMachine *a1)
; FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedWakeCanceled(struct FxPkgPnp *a1)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; RtlWideCharArrayCopyWorker(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; imp_WdfDmaTransactionCreate(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct WDFDMATRANSACTION__ **a4)
; imp_WdfDmaTransactionSetChannelConfigurationCallback(__int64 a1, void *a2, FxObjectVtbl *a3, __int64 a4)
; imp_WdfDmaTransactionSetDeviceAddressOffset(__int64 a1, void *a2, int a3)
; imp_WdfDmaTransactionSetImmediateExecution(__int64 a1, void *a2, char a3)
; imp_WdfDmaTransactionSetMaximumLength(__int64 a1, void *a2, FxObjectVtbl *a3)
; imp_WdfDmaTransactionSetTransferCompleteCallback(__int64 a1, void *a2, _FX_DRIVER_GLOBALS *a3, __int64 a4)
; imp_WdfDmaEnablerSetMaximumScatterGatherElements(__int64 a1, void *a2, __int64 a3)
; imp_WdfCommonBufferCreate(__int64 a1, void *a2, unsigned __int64 a3, struct _WDF_OBJECT_ATTRIBUTES *a4, __int64 a5)
; FxDmaTransactionBase::SetImmediateExecution(FxDmaTransactionBase *this, char a2)
; FxDmaPacketTransaction::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxDmaEnabler *a3, struct WDFDMATRANSACTION__ **a4)
; FxDmaScatterGatherTransaction::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxDmaEnabler *a3, struct WDFDMATRANSACTION__ **a4)
; FxDmaSystemTransaction::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxDmaEnabler *a3, struct WDFDMATRANSACTION__ **a4)
; imp_WdfDpcCreate(__int64 a1, __int64 a2, __int64 a3, struct WDFDPC__ **a4)
; FxChildList::CopyAddress(FxChildList *this, struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *a2, struct _WDF_CHILD_ADDRESS_DESCRIPTION_HEADER *a3)
; FxDpc::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_DPC_CONFIG *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct FxObject *a4, struct WDFDPC__ **a5)
; imp_WdfWmiProviderCreate(__int64 a1, void *a2, __int64 a3, struct _WDF_OBJECT_ATTRIBUTES *a4, struct WDFWMIPROVIDER__ **a5)
; FxWmiInstanceExternal::IsSetInstanceSupported(FxWmiInstanceExternal *this)
; FxWmiInstanceExternal::IsSetItemSupported(FxWmiInstanceExternal *this)
; FxWmiInstanceExternal::SetInstance(FxWmiInstanceExternal *this, __int64 a2, void *a3)
; FxWmiInstanceInternal::SetInstance(FxWmiInstanceInternal *this, unsigned int a2, void *a3)
; FxWmiInstanceExternal::SetItem(FxWmiInstanceExternal *this, __int64 a2, __int64 a3, void *a4)
; FxWmiInstanceInternal::SetItem(FxWmiInstanceInternal *this, unsigned int a2, unsigned int a3, void *a4)
; imp_WdfControlDeviceInitSetShutdownNotification(__int64 a1, __int64 a2, __int64 a3, char a4)
; imp_WdfDeviceInitSetDeviceClass(__int64 a1, __int64 a2, __m128i *a3)
; imp_WdfDeviceInitSetIoTypeEx(__int64 a1, __int64 a2, struct _WDF_IO_TYPE_CONFIG *a3)
; imp_WdfDeviceInitSetPowerInrush(__int64 a1, __int64 a2)
; imp_WdfDeviceInitSetPowerNotPageable(__int64 a1, __int64 a2)
; imp_WdfFdoInitOpenRegistryKey(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, struct _WDF_OBJECT_ATTRIBUTES *a5, HANDLE a6)
; imp_WdfDeviceWdmAssignPowerFrameworkSettings(__int64 a1, void *a2, __int64 a3)
; imp_WdfRequestProbeAndLockUserBufferForRead(__int64 a1, void *a2, void *a3, unsigned int a4, __int64 a5)
; imp_WdfCxDeviceInitSetFileObjectConfig(char *a1, __int64 a2, __int64 a3, __int64 a4)
; imp_WdfCxDeviceInitSetIoInCallerContextCallback(char *a1, __int64 a2, __int64 a3)
; imp_WdfCxDeviceInitSetRequestAttributes(char *a1, __int64 a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4)
; imp_WdfDeviceSetAlignmentRequirement(__int64 a1, void *a2, int a3)
; imp_WdfDeviceSetCharacteristics(__int64 a1, void *a2, int a3)
; imp_WdfDeviceSetDeviceState(__int64 a1, void *a2, struct _WDF_DEVICE_STATE *a3)
; imp_WdfDeviceSetFailed(__int64 a1, void *a2, enum _WDF_DEVICE_FAILED_ACTION a3)
; imp_WdfDeviceSetStaticStopRemove(__int64 a1, void *a2, char a3)
; imp_WdfMemoryCopyFromBuffer(__int64 a1, void *a2, unsigned __int64 a3, void *a4, unsigned __int64 a5)
; imp_WdfMemoryCopyToBuffer(__int64 a1, void *a2, unsigned __int64 a3, void *a4, unsigned __int64 a5)
; imp_WdfDeviceMiniportCreate(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, void *a4, __int64 a5, __int64 a6, void **a7)
; imp_WdfLookasideListCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, struct _WDF_OBJECT_ATTRIBUTES *a5, int a6, __int64 a7)
; imp_WdfMemoryCreateFromLookaside(__int64 a1, void *a2, __int64 a3)
; FxRequest::ProbeAndLockForRead(FxRequest *this, void *a2, unsigned int a3, struct FxRequestMemory **a4)
; FxDevice::DeleteDeviceFromFailedCreate(FxDevice *this, unsigned int a2, char a3)
; FxDevice::DeleteDeviceFromFailedCreateNoDelete(FxDevice *this, unsigned int a2, char a3)
; FxRequestBase::CreateTimer(FxRequestBase *this)
; FxRequestBase::SetSubmitIrp(FxRequestBase *this, struct _IRP *a2)
; FxFileObject::DeleteFileObjectFromFailedCreate(FxFileObject *this)
; IFxMemory::CopyFromPtr(IFxMemory *this, struct _WDFMEMORY_OFFSET *a2, void *a3, unsigned __int64 a4, struct _WDFMEMORY_OFFSET *a5)
; IFxMemory::CopyToPtr(IFxMemory *this, struct _WDFMEMORY_OFFSET *a2, void *a3, unsigned __int64 a4, struct _WDFMEMORY_OFFSET *a5)
; IFxMemory::_CopyPtrToPtr(void *Src, unsigned __int64 a2, struct _WDFMEMORY_OFFSET *a3, void *a4, unsigned __int64 a5, struct _WDFMEMORY_OFFSET *a6)
; FxRequestMemory::Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, struct FxRequestMemory **a3)
; FxRequestMemory::SetMdl(FxRequestMemory *this, struct FxRequest *a2, struct _MDL *a3, void *a4, unsigned __int64 a5, unsigned __int8 a6)
; FxMemoryBufferFromPool::_Create(struct _FX_DRIVER_GLOBALS *a1, struct _WDF_OBJECT_ATTRIBUTES *a2, enum _POOL_TYPE a3, ULONG Tag, unsigned __int64 a5, struct FxMemoryObject **a6)
; imp_WdfRegistryCreateKey(__int64 a1, void *a2, __int64 a3, __int64 a4, unsigned __int32 a5, unsigned __int32 *a6, struct _WDF_OBJECT_ATTRIBUTES *a7, __int64 a8)
; imp_WdfCmResourceListAppendDescriptor(__int64 a1, void *a2, __int64 a3)
; imp_WdfIoResourceListAppendDescriptor(__int64 a1, void *a2, __int64 a3)
; imp_WdfIoResourceListCreate(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, void **a4)
; imp_WdfIoResourceRequirementsListAppendIoResList(__int64 a1, void *a2, void *a3)
; imp_WdfIoResourceRequirementsListSetInterfaceType(__int64 a1, void *a2, int a3)
; imp_WdfIoResourceRequirementsListSetSlotNumber(__int64 a1, void *a2, int a3)
; imp_WdfDeviceSetDeviceInterfaceState(__int64 a1, void *a2, const void *a3, __int64 a4, unsigned __int8 a5)
; FxSqmCreateStringStreamEntry(__int64 a1, __int64 a2)
; RtlUnicodeStringCopy(__int64 a1, __int64 a2)
; FxCmResList::CreateWdmList(FxCmResList *this, enum _POOL_TYPE a2)
; imp_WdfIoTargetFormatRequestForRead(__int64 a1, void *a2, void *a3, void *a4, struct _WDFMEMORY_OFFSET *a5, __int64 *a6)
; imp_WdfIoTargetSendReadSynchronously(__int64 a1, void *a2, void *a3)
; FxUsbTargetDeviceCreate(struct _FX_DRIVER_GLOBALS *a1, struct FxDeviceBase *a2, void *a3, __int64 a4, void *a5)
; imp_WdfUsbTargetDeviceCreate(__int64 a1, void *a2, __int64 a3, void *a4)
; imp_WdfUsbTargetDeviceCreateIsochUrb(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, unsigned int a4, struct WDFMEMORY__ **a5, struct _URB **a6)
; imp_WdfUsbTargetDeviceCreateUrb(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, struct WDFMEMORY__ **a4, struct _URB **a5)
; imp_WdfUsbTargetDeviceCreateWithParameters(__int64 a1, void *a2, __int64 a3, __int64 a4, void *a5)
; imp_WdfUsbInterfaceGetConfiguredSettingIndex(__int64 a1, void *a2)
; imp_WdfUsbInterfaceGetNumSettings(__int64 a1, void *a2)
; imp_WdfUsbInterfaceSelectSetting(__int64 a1, void *a2, struct _WDF_OBJECT_ATTRIBUTES *a3, __int64 a4)
; imp_WdfUsbTargetPipeConfigContinuousReader(__int64 a1, void *a2, __int64 a3)
; imp_WdfUsbTargetPipeFormatRequestForRead(__int64 a1, struct WDFUSBPIPE__ *a2, struct WDFREQUEST__ *a3, struct WDFMEMORY__ *a4)
; imp_WdfUsbTargetPipeReadSynchronously(__int64 a1, struct WDFUSBPIPE__ *a2, struct WDFREQUEST__ *a3, struct _WDF_REQUEST_SEND_OPTIONS *a4)
; imp_WdfUsbTargetPipeSetNoMaximumPacketSizeCheck(__int64 a1, void *a2)
; FxUsbDeviceControlContext::CopyParameters(FxUsbDeviceControlContext *this, struct FxRequestBase *a2)
; FxUsbDeviceStringContext::CopyParameters(FxUsbDeviceStringContext *this, struct FxRequestBase *a2)
; FxUsbRequestContext::CopyParameters(FxUsbRequestContext *this, struct FxRequestBase *a2)
; FxUsbDevice::CreateInterfaces(FxUsbDevice *this)
; FxUsbDevice::CreateIsochUrb(FxUsbDevice *this, struct _WDF_OBJECT_ATTRIBUTES *a2, unsigned int a3, struct WDFMEMORY__ **a4, struct _URB **a5)
; FxUsbDevice::CreateUrb(FxUsbDevice *this, struct _WDF_OBJECT_ATTRIBUTES *a2, struct WDFMEMORY__ **a3, struct _URB **a4)
; FxUsbDevice::Deconfig(FxUsbDevice *this)
; FxUsbPipeContinuousReader::FxUsbPipeContinuousReader(__int64 a1, __int64 a2, char a3)
; FxUsbPipeRepeatReader::FxUsbPipeRepeatReader(__int64 a1)
; FxUsbPipeContinuousReader::~FxUsbPipeContinuousReader(FxUsbPipeContinuousReader *this)
; FxUsbPipeContinuousReader::`scalar deleting destructor(void *a1)
; FxUsbPipeContinuousReader::CancelRepeaters(FxUsbPipeContinuousReader *this)
; FxUsbPipeTransferContext::CopyParameters(FxUsbPipeTransferContext *this, struct FxRequestBase *a2)
; FxUsbPipeContinuousReader::DeleteMemory(FxUsbPipeContinuousReader *this, struct FxRequestBase *a2)
; FxUsbPipeContinuousReader::FormatRepeater(FxUsbPipeContinuousReader *this, struct FxUsbPipeRepeatReader *a2)
; FxUsbPipe::InitContinuousReader(FxUsbPipe *this, struct _WDF_USB_CONTINUOUS_READER_CONFIG *a2, unsigned __int64 a3)
; FxUsbPipeContinuousReader::QueueWorkItemLocked(FxUsbPipeContinuousReader *this, struct FxUsbPipeRepeatReader *a2, __int64 a3, __int64 a4)
; FxUsbPipeContinuousReader::ResubmitRepeater(FxUsbPipeContinuousReader *this, struct FxUsbPipeRepeatReader *a2, __int32 *a3)
; FxUsbPipeContinuousReader::_FxUsbPipeRequestComplete(struct WDFREQUEST__ *a1, struct WDFIOTARGET__ *a2, struct _WDF_REQUEST_COMPLETION_PARAMS *a3, void *a4)
; FxUsbPipeContinuousReader::_FxUsbPipeRequestWorkItemThunk(void *a1)
; FxUsbCreateConfigRequest(struct _FX_DRIVER_GLOBALS *a1, struct _USB_CONFIGURATION_DESCRIPTOR *a2, struct _USBD_INTERFACE_LIST_ENTRY *a3, int a4)
; FxUsbInterface::CopyEndpointFieldsFromDescriptor(FxUsbInterface *this, struct _WDF_USB_PIPE_INFORMATION *a2, struct _USB_ENDPOINT_DESCRIPTOR *a3, char a4)
; FxUsbInterface::CreateSettings(FxUsbInterface *this)
; FxUsbInterface::FormatSelectSettingUrb(FxUsbInterface *this, struct _URB *a2, unsigned __int16 a3, char a4)
; FxUsbInterface::GetConfiguredSettingIndex(FxUsbInterface *this)
; FxUsbInterface::GetSettingDescriptor(FxUsbInterface *this, char a2)
; FxUsbInterface::SelectSetting(FxUsbInterface *this, struct _WDF_OBJECT_ATTRIBUTES *a2, struct _URB *a3)
; FxUsbInterface::SelectSettingByDescriptor(FxUsbInterface *this, struct _WDF_OBJECT_ATTRIBUTES *a2, struct _USB_INTERFACE_DESCRIPTOR *a3)
; FxUsbInterface::SelectSettingByIndex(FxUsbInterface *this, struct _WDF_OBJECT_ATTRIBUTES *a2, unsigned __int8 a3)
; FxUsbInterface::SetInfo(FxUsbInterface *this, struct _USBD_INTERFACE_INFORMATION *a2)
; FxUsbPipeContinuousReader::Config(FxUsbPipeContinuousReader *this, struct _WDF_USB_CONTINUOUS_READER_CONFIG *a2, unsigned __int64 a3)
; FxUsbPipeContinuousReader::_FxUsbPipeContinuousReadDpc(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
; imp_WdfIoQueueReadyNotify(__int64 a1, void *a2, void (__stdcall *a3)(struct WDFQUEUE__ *, void *), void *a4)
; FxIoQueue::ProcessReadyNotify(FxIoQueue *this, unsigned __int8 *a2, unsigned __int8 a3)
; FxIoQueue::QueueDriverCreatedRequest(FxIoQueue *this, FxRequest *a2, char a3)
; FxIoQueue::ReadyNotify(FxIoQueue *this, void (__stdcall *a2)(struct WDFQUEUE__ *, void *), void *a3)
; imp_WdfInterruptSetExtendedPolicy(__int64 a1, void *a2, __int64 a3)
; FxPkgPdo::_PnpSetLock(FxPkgPnp *this, struct FxIrp *a2)
; FxPkgPnp::PnpEventFailedPowerDown(struct FxPkgPnp *a1)
; FxPkgPnp::PowerDxStoppedDecideDxState(struct FxPkgPnp *a1)
; FxPkgPnp::PowerFinalPowerDownFailed(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPowerFailedPowerDown(FxPkgPnp *this)
; FxPkgPnp::PowerReportPowerDownFailed(struct FxPkgPnp *a1, __int64 a2)
; FxPkgPnp::PowerSendPowerDownFailureEvent(FxPkgPnp *this, enum FxPowerDownType a2)
; FxPkgPnp::AssignPowerFrameworkSettings(FxPkgPnp *this, struct _WDF_POWER_FRAMEWORK_SETTINGS *a2)
; FxPkgPnp::CleanupDeviceFromFailedCreate(FxPkgPnp *this, struct MxEvent *a2)
; FxPkgPnp::CreatePowerThread(FxPkgPnp *this)
; FxPkgPnp::SetDeviceFailed(FxPkgPnp *this, enum _WDF_DEVICE_FAILED_ACTION a2)
; FxPkgPnp::SetInternalFailure(FxPkgPnp *this)
; FxPkgPnp::SetPnpState(FxPkgPnp *this, struct _WDF_DEVICE_STATE *a2)
; FxPkgPnp::SetUsageNotificationFlags(FxPkgPnp *this, enum _DEVICE_USAGE_NOTIFICATION_TYPE a2, __int64 a3)
; FxPkgPnp::_S0IdleSetInstance(struct FxDevice *a1, struct FxWmiInstanceInternal *a2, __int64 a3, void *a4)
; FxPkgPnp::_S0IdleSetItem(struct FxDevice *a1, struct FxWmiInstanceInternal *a2, int a3, unsigned int a4, void *a5)
; FxPkgPnp::_SxWakeSetInstance(struct FxDevice *a1, struct FxWmiInstanceInternal *a2, __int64 a3, void *a4)
; FxPkgPnp::_SxWakeSetItem(struct FxDevice *a1, struct FxWmiInstanceInternal *a2, int a3, unsigned int a4, void *a5)
; FxPowerPolicyOwnerSettings::~FxPowerPolicyOwnerSettings(FxPowerPolicyOwnerSettings *this)
; FxPowerPolicyOwnerSettings::CleanupPowerCallback(FxPowerPolicyOwnerSettings *this)
; IdleTimeoutManagement::CommitPowerFrameworkSettings(IdleTimeoutManagement *this, struct _FX_DRIVER_GLOBALS *a2, struct _POX_SETTINGS *a3)
; FxPkgPnp::PowerPolSleepingWakePowerDownFailedWakeCanceled(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolSleepingPowerDownNotProcessed(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolSleepingWakePowerDown(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolSleepingWakePowerDownFailed(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredNoWakePowerDownNotProcessed(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredNoWakeUndoPowerDown(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedCancelWake(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownFailedUsbSS(FxPkgPnp *this)
; FxPkgPnp::PowerPolTimerExpiredWakeCapablePowerDownNotProcessed(struct FxPkgPnp *a1)
; FxPkgPnp::PowerPolTimerExpiredWakeCapableUndoPowerDown(struct FxPkgPnp *a1)
; FxInterrupt::CreateWakeInterruptMachine(FxInterrupt *this)
; FxIoResReqList::_CreateAndInit(struct FxIoResReqList **a1, struct _FX_DRIVER_GLOBALS *a2, struct _WDF_OBJECT_ATTRIBUTES *a3)
; FxEventQueue::SetDelayedDeletion(FxEventQueue *this)
; FxPoxInterface::CreateDevicePowerRequirementMachine(FxPoxInterface *this)
; FxPoxInterface::GetPowerFrameworkSettings(FxPoxInterface *this)
; FxPkgGeneral::DecrementOpenHandleCount(FxPkgGeneral *this)
; FxCxFileObjectFileCreate::Invoke(FxCxFileObjectFileCreate *this, struct WDFDEVICE__ *a2, struct WDFREQUEST__ *a3, struct WDFFILEOBJECT__ *a4)
; FxPkgGeneral::_CreateCompletionRoutine2(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3, __int64 a4)
; ProcgrpSetSystemGroupAffinityThread(__int64 a1, __int64 a2)
; ProcgrpSetTargetProcessorDpcEx(__int64 a1, __int64 a2)
; USBDInternal_QueryUsbVerifierSettings(__int64 a1, __int64 a2, __int64 a3, ULONG a4)
; USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT a2, unsigned int a3, __int64 a4)
; USBD_VerifierSettingsCallback(__int64 a1, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; FxSystemThread::CreateThread(PVOID StartContext)
; FxSystemThread::_CreateAndInit(struct FxSystemThread **a1, struct _FX_DRIVER_GLOBALS *a2, struct WDFDEVICE__ *a3, struct _DEVICE_OBJECT *a4)
; FxProbeAndLockForRead(struct _MDL *a1)
; imp_VfWdfDeviceCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; imp_VfWdfIoQueueCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AddEventHooksWdfDeviceCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; AddEventHooksWdfIoQueueCreate@<rax>(__int64 a1@<rdx>, __int64 a2@<rcx>, __int64 a3@<rbx>, __int64 a4@<r8>, __int64 a5@<r9>)
; VfEvtIoRead(void *a1, __int64 a2, __int64 a3)
; FxIoQueue::Vf_VerifyQueueDriverCreatedRequest(FxIoQueue *this, struct _FX_DRIVER_GLOBALS *a2, struct FxRequest *a3, __int16 *a4)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WdFilter.c ;
; MpSetStreamSize(__int64 a1, __int16 a2, __int64 _R8, signed __int64 a4)
; MpSetStreamState(__int64 a1, __int16 a2, __int64 a3, int a4)
; MpSetStreamFlag(__int64 a1, __int16 a2, __int64 a3, unsigned int a4, char a5)
; MpSetStreamFlag_0(__int64 a1, __int16 a2, __int64 a3, __int64 a4, char a5)
; MpSetStreamState_0(__int64 a1, __int16 a2, __int64 a3)
; MpSetStreamFlag_1(__int64 a1, __int16 a2, __int64 a3, unsigned int a4)
; MpPostRead(__int64 a1, __int64 a2, __int64 a3, char a4)
; MpSetStreamState_1(__int64 a1, __int16 a2, __int64 a3, int a4)
; MpSetStreamSize_0(__int64 a1, __int16 a2, __int64 _R8, signed __int64 a4)
; MpSetStreamFlag_2(__int64 a1, __int16 a2, __int64 a3, unsigned int a4, char a5)
; RtlStringCopyWorkerA(char *pszDest, size_t cchDest, const char *pszSrc)
; RtlStringCbCopyUnicodeString(__int64 a1, unsigned __int64 a2)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; RtlUnicodeStringCopy(__int64 a1)
; RtlWideCharArrayCopyWorker(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; MpSetStreamState_2(__int64 a1, __int16 a2, __int64 a3)
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; MpSetFileTimeouts(unsigned int a1, unsigned int a2)
; MpSetStreamUnknownRevertTickcount(__int64 a1, __int16 a2, __int64 _R8)
; MpConvertConfigurationToFileState(int a1)
; MpSetStreamUnknownRevertTickcount_0(__int64 a1, __int16 a2, __int64 _R8, signed __int64 a4)
; MpCopyCacheSetTimeStamp(__int64 a1, __int64 a2, __int64 a3)
; MpPostSetInfo(__int64 a1, __int64 a2, __int64 a3, char a4)
; MpCopyCacheSetFileSize(__int64 a1, __int64 a2, __int64 a3)
; MpCopyCacheCreateDestination(__int64 a1, __int64 a2)
; MpCopyCacheMatch(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __m128i *a5)
; FindCopyCacheEntry(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5)
; MpRegpCopyUnicodeString(PCUNICODE_STRING SourceString, __int64 a2)
; MpSetTrustedProcesses(int a1, __int64 a2, __int64 a3, __int64 a4)
; MpSetTrustedProcess(int a1)
; MpCreateSection(__int64 a1, __int64 a2)
; MpIndicateProcessCreateComplete(int a1)
; MpCreateThreadNotifyRoutine(unsigned __int64 a1, __int64 a2, char a3)
; MpCreateProcessNotifyRoutineEx(__int64 a1, __int64 a2, __int64 a3)
; MpRegPostCreateKeyEx(__int64 a1, char a2, __int64 a3)
; MpModLoadQueryIsProcessMonitored(unsigned int a1, __int64 a2)
; MpPostCreate(__int64 a1, __int64 a2, __int64 a3, char a4)
; MpCreateHandleContext(__int64 a1, __int64 a2, __int64 a3)
; MpRegPreSetValueKey@<rax>(char a1@<dh>, __int64 *a2@<rcx>, __int64 a3@<r8>, char a4@<r9b>, void *a5)
; MpAsyncCreateNotification(__int64 a1, unsigned int a2)
; MpObHandleOpenProcessBMNotification(__int64 a1, __int64 a2, __int64 a3)
; MpObOpenProcessNotifyRoutine(__int64 a1, int a2, __int64 a3)
; MpModLoadSetMonitoredProcess(__int64 a1, const UNICODE_STRING *a2, __int64 a3)
; MpSetProcessExempt(__int64 a1, __int64 a2, char a3)
; MpSetProcessDocOpenRule(__int64 a1, __int64 a2)
; MpSetDocOpenRule(__int64 a1, __int64 a2)
; MpCreateProcessContext(unsigned __int64 a1, __int64 a2)
; MpModLoadRemoveFromMonitoring(unsigned int a1)
; MpCopyCacheProcessTerminate(__int64 a1)
; MpRegpHandlePostCreateKey(__int64 a1, int a2, char a3)
; MpRegpCopyStringToNotification(unsigned __int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4, __int64 a5)
; MpRegpCopyBufferToNotification(unsigned __int64 a1, __int64 a2, size_t a3, size_t a4, const void *Src, __int64 a6)
; MpRegpFreeSetValueContext(PVOID Entry)
; MpCopyCacheAddEntry(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; MpPreCreateCsvfs(__int64 a1, __int64 a2)
; MpCopyCacheFreeString(__int64 a1)
; MpCreateWriteContext(__int64 a1, __int64 a2, struct _SLIST_ENTRY *a3, char a4, char a5, __int64 a6)
; MpPostCreateCsvfs(__int64 a1, __int64 a2)
; MpCreateStreamContext(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5)
; MpPreSetInfo(__int64 a1, __int64 a2, __int64 a3)
; MpQueryNetworkOpenInformation(__int64 a1, __int64 a2)
; MpCopyStreamStateFromFileStateGenericTable(__int64 a1, int a2, void (__fastcall *a3)(_QWORD, _QWORD))
; MpSaveStreamStateToRefsCache(__int64 a1)
; MpSaveStreamStateToCsvCache(__int64 a1)
; MpSetFileChangeInBitmap(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
; MpInstanceSetup(__int64 a1, __int64 a2, int a3, int a4)
; MpIsShadowCopyVolume(__int64 a1, __int64 a2)
; MpCreateInstanceContext(__int64 a1, int a2, int a3)
; MpAmPostCreate(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; MpSetProcessHardening(__int64 a1, __int64 a2, __int64 a3)
; MpSetProcessHardeningExclusion(__int64 a1, __int64 a2, __int64 a3)
; MpSetFileStateInBitmap(__int64 a1, __int64 a2, ULONG_PTR a3, __int64 a4, int a5, signed int a6, char a7)
; MpRegPostSetValueKey(__int64 a1, int a2, __int64 a3)
; MpSetProcessPreScanHook(void *a1, __int64 a2, const UNICODE_STRING *a3)
; MpSetProcessExclusions(int a1, __int64 a2)
; MpCreateProcessExclusionList(__int64 a1, void **a2)
; MpSetDocOpenData(unsigned int a1, unsigned __int64 a2)
; MpDeleteDocOpenRules(__int64 a1)
; MpCreateDocOpenRules(unsigned __int64 a1, __int64 a2)
; MpConvertMultiSzOffsetToPointer(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; MpConvertOffsetToPointer(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6, __int64 a7)
; MpConvertStringOffsetToPointer(unsigned __int64 a1, unsigned __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, __int64 a6, __int64 a7)
; MpValidateDocOpenUserData(unsigned int a1, unsigned __int64 a2)
; MpQueryLoadedDrivers(void *Src, void *a2, unsigned int a3, __int64 a4)
; MpPackLoadedDriverInfo(__int64 a1, void *a2, unsigned int a3, __int64 a4)
; MpCopyDriverEntry(__int64 a1, PVOID *a2)
; MpSetProcessNotifications(PCALLBACK_OBJECT *CallbackObject, char a2)
; MpAppendUnicodeStringToUnicodeString(__int64 a1, const UNICODE_STRING *a2, __int64 a3, ULONG a4)
; MpSetMonitorFlags(char a1, int a2)
; MpModLoadSetProcessList(int a1, __int64 a2)
; MpCopyCsvStreamStateFromCacheEntry(__int64 a1, __int64 a2)
; MpSaveCsvStreamStateToCacheEntry(__int64 a1, __int64 a2)
; MpCreateHandleContext_fin_0(__int64 a1, __int64 a2)
; MpCreateStreamContext_fin_0(__int64 a1, __int64 a2)
; MpCreateInstanceContext_fin_0(__int64 a1, __int64 a2, __int64 a3)
; MpAmPostCreate_fin_0(__int64 a1, __int64 a2)
; MpQueryDosName(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; MpAmPreCreate(__int64 a1, __int64 a2)
; MpTxfPostSavepointNotification(__int64 a1, __int64 a2, __int64 a3)
; MpTxfPreSavepointNotification(__int64 a1, PVOID *a2)
; MpTxfpValidateSavepointInfo(__int64 a1, __int64 a2)
; MpRegPostCreateKey(__int64 a1, char a2, __int64 a3)
; MpRegPreCreateKey(UNICODE_STRING **a1, char a2, __int64 a3)
; MpRegpHandlePreCreateKey(UNICODE_STRING *a1, __int64 a2, char a3, __int64 a4)
; MpRegpCopyValueData(size_t Size, void *Src, __int64 a3, __int64 a4)
; MpRegpDoesKeyExist(__int64 a1, UNICODE_STRING *a2)
; MpRegpFreeCreateKeyContext(PVOID Entry)
; MpPreOffLoadWrite(__int64 a1, __int64 a2)
; MpModLoadAlterPIDInBitmapUnsafe(unsigned int a1, char a2)
; MpModLoadClearBitmap(PVOID P)
; MpModLoadClearProcList(PVOID P)
; MpModLoadQueryProcListFilePathUnsafe(PCUNICODE_STRING String2)
; MpCreateProcessNotifyRoutine(__int64 a1, __int64 a2, char a3)
; MpLoadImageNotifyRoutine(SIZE_T *a1, unsigned __int64 a2, __int64 a3)
; MpReleaseDocOpenRule(PVOID Entry)
; MpSendDocOpenMessage(__int64 a1, const wchar_t *a2, __int64 a3)
; MpCopyElamRegistryEntry(__int64 a1, PVOID *a2)
; MpCreateNriServiceSID(__int64 *a1)
; MpCreateMpServiceSID(__int64 *a1)
; MpCreateCommPorts(__int64 a1, __int64 a2)
; MpCreatePort(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; MpCreateSecurityDescriptorVista(__int64 a1, __int64 a2, __int64 a3)
; MpCreateCommPorts_fin_0(__int64 a1, __int64 a2)
; MpCreateSecurityDescriptorVista_fin_0(__int64 a1, __int64 a2)
; MpCreateSecurityDescriptor(__int64 a1, __int64 a2, __int64 a3)
; MpCreateSecurityDescriptor_fin_0(__int64 a1, __int64 a2)
; MpCreateTrustedInstallerSID(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WdfLdr.c ;
; LibraryLoaderUnlock(__int64 a1)
; RtlStringCopyWorkerW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; LibraryOpen(__int64 a1, UNICODE_STRING *a2)
; LibraryCreate(__int64 a1, __int64 a2)
; ClassCreate(__int64 a1, __int64 a2, __int64 a3)
; ClassOpen(__int64 a1, UNICODE_STRING *a2)
; ClassLibraryCopyInfo(__int64 a1, __int64 a2)
; LibraryLoaderLock(__int64 a1)
; LibraryCopyInfo(__int64 a1, __int64 a2)
; ClassLoaderLock(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WdNisDrv.c ;
; NriPsSetProcessList(unsigned __int64 *a1, int a2, int a3)
; NriPsSetProcessMatched(__int64 a1, const UNICODE_STRING *a2, __int64 a3, int a4)
; NriSetRTPExclusion(void *a1)
; CNetworkLayer::DoActionAsynch(CNetworkLayer *this, struct _NIS_INTERCEPT_ACTION *a2)
; CNetworkLayer::CopyMdlToBuffer(CNetworkLayer *this, struct _MDL *a2, unsigned int a3, unsigned __int8 *a4, unsigned __int32 DstSize, unsigned __int32 *a6)
; CNetworkLayer::CreateSystemThread(CNetworkLayer *this, void (__stdcall *a2)(void *), void **a3)
; CNetworkLayer::DoSqmReporting(CNetworkLayer *this)
; CNetworkLayer::DoSqmLogProcessName(CNetworkLayer *this)
; CDriver::LoadNetworkLayer(CDriver *this)
; CWFPLayer::HandleServiceDataPumpReady(CWFPLayer *this)
; CWFPLayer::NisInterceptDoAction(CWFPLayer *this, struct _NIS_INTERCEPT_ACTION *a2)
; CHash<CWFPFlowContext,CWFPFlowContext,CSpinReadWriteLock,0,1413900622,HASH_RETURN_NTSTATUS>::RemoveAll(__int64 a1)
; CHash<CWFPFlowContext,CWFPFlowContext,CSpinReadWriteLock,0,1413900622,HASH_RETURN_NTSTATUS>::Insert(PNDIS_RW_LOCK Lock, __int64 a2, __int64 a3)
; CHash<CWFPFlowContext,CWFPFlowContext,CSpinReadWriteLock,0,1413900622,HASH_RETURN_NTSTATUS>::Delete(PNDIS_RW_LOCK Lock, __int64 a2)
; CWFPPacketHolder::CreateRefInstance(struct FWPS_STREAM_DATA0_ *a1, struct CWFPPacketHolder **a2)
; CWFPPacketHolder::SetExclusive(CWFPPacketHolder *this, int a2)
; CWFPPacketHolder::SetCounter(CWFPPacketHolder *this, __int64 a2)
; CWFPSetup::CWFPSetup(CWFPSetup *this, int a2)
; CWFPSetup::SetupProvider(CWFPSetup *this)
; CWFPSetup::SetupSublayers(CWFPSetup *this)
; CWFPSetup::SetupCallouts(CWFPSetup *this)
; CWFPSetup::SetupFilters(CWFPSetup *this)
; CWFPSetup::SetupComponents(CWFPSetup *this)
; UtilCreateBuiltInAdminSID(__int64 a1)
; UtilCreateNRIServiceSID(__int64 a1)
; UtilCreateSecurityDescriptor(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
; MpSetProcessNotifications(PCALLBACK_OBJECT *CallbackObject)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\werkernel.c ;
; WerLiveKernelCreateReportExt(PCWSTR SourceString, int *a2, __int64 a3)
; WerLiveKernelOpenDumpFileExt(__int64 a1, __int64 a2)
; WerpCreateDumpFile(__int64 a1, __int64 a2)
; WerpCreateRegistryKey(__int64 a1, const WCHAR *a2, ACCESS_MASK a3, char a4, HANDLE *a5, __int64 a6)
; WerpCreateReport(int a1, const WCHAR *a2, const WCHAR *a3, __int64 a4)
; WerpCreateReportDirectory(__int64 a1)
; WerpCreateReportFull(const WCHAR *a1, const WCHAR *a2, __int64 a3)
; WerpCreateReportId(__int64 a1)
; WerpCreateReportMini(const WCHAR *a1, const WCHAR *a2, __int64 a3)
; WerpSetLastFullReportTime(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wfplwfs.c ;
; LwfLowerSetFilterModuleOptions(__int64 a1)
; LwfUpperSetFilterModuleOptions(__int64 a1)
; PplpCreateOneLookasideList(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7, int a8, __int64 a9, char a10)
; L2CreateLayerClassifyCache(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; L2vSwitchCopyVmSwitchNblInfo(__int64 a1, __int64 a2, __int64 a3)
; L2vSwitchValidatePortNicAndSetSource(int a1, unsigned __int16 a2, __int64 a3, __int64 a4)
; WfpL2DispatchCreate(__int64 a1, __int64 a2)
; L2CreateMacFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int16 a5, int a6, int a7, int a8, int a9, __int64 a10)
; L2CreatevSwitchFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int16 a5, int a6, int a7, int a8, __int64 a9)
; L2pCreateMacFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int16 a5, __int64 a6, int a7, __int64 a8, __int64 a9)
; L2pCreatevSwitchFlow(__int64 a1, __int16 a2, __int64 a3, __int64 a4, __int16 a5, int a6, __int64 a7, __int64 a8)
; RtlAcquireReadLock(PKSPIN_LOCK SpinLock, __int64 a2)
; L2SetNetBufferListCompletionContext(__int64 a1, __int64 a2, __int64 a3)
; WfpRioChannelCreate(__int64 a1, __int64 a2)
; WfpRioCloseRegistrationDomain(__int64 a1, __int64 a2, __int64 a3)
; WfpRioCopySid(__int64 a1, __int64 a2)
; WfpRioCreateAndInitializeRegDomain(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5, unsigned __int64 a6, __m128i *a7)
; WfpRioCreateCompletionQueue(__int64 a1, __int64 a2, __int64 AccessMode, int a4, int a5, int AccessModea, HANDLE Handle, __int64 Handlea, __int64 a9)
; WfpRioCreateCompletionQueue_filt_0(__int64 a1, __int64 a2)
; WfpRioCreateCq(__int64 a1, unsigned __int64 a2, unsigned int a3, void *a4, unsigned int a5, char a6)
; WfpRioCreateCq_filt_0(__int64 a1, __int64 a2)
; WfpRioCreateCq_filt_1(__int64 a1, __int64 a2)
; WfpRioCreateRegisteredBuffer(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; WfpRioCreateRegistrationDomain(__int64 a1, __int64 a2)
; WfpRioCreateRqPair(__int64 a1, unsigned __int64 a2, unsigned int a3, KPROCESSOR_MODE a4)
; WfpRioCreateRqPair_filt_0(__int64 a1, __int64 a2)
; WfpRioDPConfigCreate(__int64 a1, __int64 a2)
; WfpRioFindExistingRegDomainForPackage(__int64 a1, __int64 a2, int a3, const void *a4)
; WfpRioFreeRegDomain(__int64 a1)
; WfpRioInitializeRegDomainFieldsNewHandle(__int64 a1)
; WfpRioMatchRegDomain(void *Source1, __int64 a2, __int64 a3, int a4, const void *Source1a)
; WfpSetActivityTimerDpc(__int64 a1, __int64 a2, __int64 a3)
; LwfvSwitchSetFilterModuleOptions(__int64 a1)
; vSwitchSetIovOffloaded(__int64 a1, int a2)
; vSwitchFlpCreateAdapter(__m128i *a1, __int64 a2, __int64 a3)
; vSwitchFlpCreateAndBindInterface(__int64 a1, __int64 a2, int a3, __int64 a4)
; vSwitchFlpRefOrCreateCompartment(__int64 a1, int a2)
; vSwitchFlpSetCompartmentDefaultRoute(__int64 a1)
; vSwitchFlpSetCompartmentForwarding(__int64 a1)
; BipCreateRpcBinding(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wimmount.c ;
; PFSetSubsumedStatus(__int64 a1, __int64 a2, int a3)
; InstanceSetup(__int64 a1, __int64 a2, int a3, int a4)
; PFPreCreate(__int64 a1, __int64 a2, __int64 a3)
; PFOpenReparseTarget(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; PriStubCreateChild(void *a1, unsigned int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\winhv.c ;
; WinHvpSetVpRegisterAdvancer(__int64 a1, unsigned int a2)
; WinHvpSetLogicalProcessorRegisterAdvancer(__int64 a1, unsigned int a2)
; WinHvReadGpa(__int64 a1, int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, void *Dst)
; WinHvpSetProximityDomain(__int64 a1, unsigned int a2)
; WinHvpSetupHypercall(__int64 a1, __int64 a2, __int64 a3)
; WinHvCreatePartition(__int64 a1, unsigned int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; WinHvSetPartitionProperty(unsigned __int64 a1, int a2, __int64 a3)
; WinHvpCreatePartition(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; WinHvCreatePort(unsigned __int64 a1, unsigned int a2, int a3, __int64 a4, __int64 a5)
; WinHvSetPortProperty(__int64 a1, int a2, int a3, __int64 a4)
; WinHvSetSintOnCurrentProcessor(int a1, unsigned __int8 a2, char a3, char a4)
; WinHvSetAbsoluteTimer(__int64 a1, unsigned __int64 a2)
; WinHvCreateEventLogBuffer(int a1, int a2, unsigned int a3)
; WinHvSetEventLogCompletedNotificationRoutine(__int64 a1)
; WinHvSetEventLogGroupSources(int a1, __int64 a2)
; WinHvCreateVp(unsigned __int64 a1, unsigned int a2, int a3, __int64 a4)
; WinHvSetVpRegisters@<rax>(int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>, unsigned int a4@<r8d>, __int64 a5@<r9>, __m128i *a6, __int64 a7)
; WinHvpSetVpRegisterBuilder(__int64 a1, __int64 a2, int a3)
; WinHvpSetVpRegistersElevated@<rax>(int a1@<edx>, __int64 a2@<rcx>, __int64 a3@<rbp>, unsigned int a4@<r8d>, __int32 *a5@<r9>, __m128i *a6, __int64 a7)
; WinHvSetLogicalProcessorProperty(int a1, int a2, __int64 a3)
; WinHvSetLogicalProcessorRegisters@<rax>(__int64 a1@<rdx>, unsigned int a2@<ecx>, __int64 a3@<rbp>, __m128i *a4@<r8>, __int64 a5@<r9>)
; WinHvpSetLogicalProcessorRegisterBuilder(__m128i *a1, __int64 a2, int a3)
; WinHvpSetLogicalProcessorRegistersElevated@<rax>(__int64 a1@<rdx>, unsigned int a2@<ecx>, __int64 a3@<rbp>, __m128i *a4@<r8>, __int64 a5@<r9>)
; WinHvSavePartitionState(__int64 a1, int a2, unsigned int a3, void *a4, __int64 a5, __int64 a6)
; WinHvSetSint(__int64 a1, unsigned __int8 a2, char a3, char a4, __int64 a5)
; WinHvCreateTimer(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\winusb.c ;
; WinUSB_SelectAltSetting(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUsb_GetAltSetting(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUSB_SetPipePolicy(__int64 a1, unsigned __int64 a2, __int64 a3, __int64 a4)
; WinUSB_SetPowerPolicy(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUSB_DecrementKeepAliveCount(__int64 a1)
; WinUSB_SetInterface(__int64 a1, unsigned __int8 a2, char a3)
; WinUSB_RawIoReadCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUSB_ReadPipeCompletion(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUSB_ReadPipe(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WinUSB_RawIoRead(__int64 a1, __int64 a2)
; WinUSB_CreateActivityIdSubRequest(__int64 a1, __int64 a2, __int64 *a3, __int64 a4)
; WinUSB_SubmitRead(__int64 a1, __int64 a2, __int64 a3)
; WinUSB_CancelRead(__int64 a1)
; WinUSB_IsochQueueReadyNotification(__int64 a1, __int64 a2)
; WinUSB_SetupIsochUrb(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5, int a6)
; WinUSB_Create(__int64 a1, __int64 a2, __int64 a3)
; WinUSB_SetDeviceInterfaceProperties(__int64 a1)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wmiacpi.c ;
; WmiAcpiSetWmiDataBlock(PDEVICE_OBJECT DeviceObject, PIRP Irp, unsigned int a3, int a4, __int64 a5, __int64 a6)
; WmiAcpiSetWmiDataItem(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; WmiAcpiSendDownStreamIrp(PDEVICE_OBJECT DeviceObject, PVOID a2, void *a3, ULONG a4, PVOID a5, ULONG *a6)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wmilib.c ;
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wof.c ;
; WofPreReadCallback(__int64 a1, __int64 a2)
; WofPostReadCallback(__int64 a1, __int64 a2)
; WimFSFAllocateReadCbReadParameters(__int64 a1, __int64 a2)
; WimFSFReleaseReadCbReadParameters(__int64 a1, __int64 a2, __int64 a3)
; WimFSFReferenceReadCompletionContext(__int64 a1, __int64 a2, __int64 a3)
; WimFSFReleaseReadCompletionContext(PSLIST_ENTRY ListEntry, __int64 a2, __int64 a3)
; WimFSFReadWimResourceCallout(__int64 a1)
; WimFSFCompleteRead(PSLIST_ENTRY ListEntry, unsigned int a2, int a3)
; WimFSFReadWimResourceOnNewStackExtendedCompletion(PSLIST_ENTRY ListEntry)
; WimFSFDecompressWimResources(PSLIST_ENTRY ListEntry)
; WimFSFReadWimCompletion(__int64 a1, __int64 a2)
; WimFSFReadWimCompletionWorker(__int64 a1, __int64 a2, __int64 a3)
; LZX_GetDecodeBufferSize(int a1)
; LZX_DecodeNewGroup(__int64 a1)
; ReadRepTree(__int64 a1, int a2, __int64 a3, __int64 a4)
; WIM_XpressDecode(__int64 a1, __int64 a2, signed int a3, signed int a4, __int64 a5, signed int a6)
; RtlDecompressBufferLZNT1(void *Dst, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5)
; RtlDecompressFragmentLZNT1(void *Dst, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6, unsigned __int64 a7)
; RtlDecompressBufferXpressLz(unsigned __int64 a1, unsigned int a2, unsigned __int64 a3, unsigned int a4, __int64 a5)
; XpressBuildHuffmanDecodingTable(__int64 a1, __int64 a2)
; RtlDecompressBufferXpressHuff(unsigned __int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; LZNT1DecompressChunk(unsigned __int64 a1, unsigned __int64 a2, signed __int64 a3, __int64 a4, __int64 a5)
; WofInstanceSetup(__int64 a1, char a2, int a3, int a4)
; WofFindOrCreateFileContext(__int64 a1, __int64 a2, __int64 a3)
; WofFindOrCreateStreamContext(__int64 a1, __int64 a2, unsigned int a3, __int64 a4)
; WofFindOrCreateHandleContext(__int64 a1, __int64 a2, void **a3)
; WofFindOrCreateTransactionContext(__int64 a1, __int64 a2, __int64 a3)
; WofPreNetworkQueryOpen(__int64 a1, __int64 a2, __int64 a3)
; WofPreCreateCallback(__int64 a1, __int64 a2, __int64 a3)
; WofPostCreateCallback(__int64 a1, __int64 a2, struct _SLIST_ENTRY *a3)
; WofCreateOpenContext(__int64 a1, __int64 a2, unsigned int a3, __int64 a4, char a5, char a6, char a7)
; WofPreSetInfoCallback(__int64 a1, __int64 a2)
; WofPostSetInfoCallback(__int64 a1, __int64 a2)
; WofPreFsctlSetExternalBacking(__int64 a1, __int64 a2)
; WofPreFsctlSetReparsePoint(__int64 a1, __int64 a2, __int64 a3)
; WofPreFsctlSetSparse(__int64 a1, __int64 a2, __int64 a3)
; WofCbNotifyHandleOpen(__int64 a1, __int64 a2, __int64 a3)
; WofCbOpenStream(struct _FAST_MUTEX *a1, __int64 a2, __int64 a3)
; WofCbRead(__int64 a1, __int64 a2, __int64 a3, char a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10)
; WimFSFCreateIntegrity(__int64 a1, __int64 a2, __int64 a3, void *a4, __int64 a5, __int64 a6, char a7, __int64 a8)
; WimpFSFIntegrityOpenIntegrityFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WimpFSFIntegrityReportReadFailure(__int64 a1, __int64 a2, int a3)
; WimpFSFSetPriorities(__int64 a1, char a2)
; WimFSFOpenWimFile(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WimFSFLoadOffsetTableHash(__int64 a1)
; WimFSFInitializeDecompressionWorkspace(__int64 a1)
; WimFSFLoadResource(__int64 a1, __int64 a2, __int64 a3, PVOID *a4)
; WimFSFCreateOverlay(__int64 a1, struct _FAST_MUTEX *a2, __int64 a3, __int64 a4, __int64 a5, __m128i *a6, int a7, int a8, void *Dst)
; WimFSFReadWimResourceSwitchStacks(__int64 a1)
; WimFSFReadWimResourceOnNewStack(__int64 a1)
; WimFSFReadWim(char a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7, __int64 a8)
; WimCreateSystemVolumeInfoWork(__int64 a1, __int64 a2, struct _IO_WORKITEM *a3)
; WimOpenOverlayConfig(__int64 a1, const WCHAR *a2, char a3, __int64 a4, __int64 a5)
; WimReadOverlayConfig(__int64 a1, unsigned __int8 a2, __int64 a3, __int64 a4)
; BiConvertBootEnvironmentDeviceToUnknown(void *Src, __int64 a2, __int64 a3)
; BiCreatePartitionDevice(PCWSTR SourceString, char a2, __int64 a3, __int64 a4)
; BiCreateFileDeviceElement(void *Src, __int64 a2, __int64 a3)
; BiConvertNtDeviceToBootEnvironment(__int64 a1, unsigned int a2, unsigned int a3, __int64 a4)
; BiConvertBootEnvironmentDeviceToNt(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5)
; BiConvertNtFilePathToBootEnvironment(__int64 a1, __int64 a2, const void *a3, unsigned int a4, __int64 a5)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\wpcfltr.c ;
; SessionMonitor_CreateAddRef(unsigned int a1, void *a2, void *a3, __int64 a4)
; SetProcessDecision(PIRP Irp)
; ListEntry_Create(__int64 a1, __int64 a2, __int64 a3, int a4)
; FlowData_CreateAddRef(PVOID Object, int a2, __int16 a3, __int64 a4, PVOID Objecta)
; ProcessListEntry_CreateAddRef(int a1, int a2)
; CreateProcessNotifyEx(__int64 a1, __int64 a2, __int64 a3)
; PendingProcessList_CreateAddRef(HANDLE Handle, __int64 a2)
; ProcessFilter_SetDecision(__int64 a1, __int64 a2)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, __int64 a5, __int64 a6, PDEVICE_OBJECT a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, ULONG a4, void *a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WpdUpFltr.c ;
; FilterFileCreateCompletionRoutine(__int64 a1, __int64 a2, __int64 a3)
; FilterEvtDeviceFileCreate(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WppRecorder.c ;
; GetWppAutoLogRegistrySettings(UNICODE_STRING *a1, __int64 a2, __int64 a3, __int64 a4)
; WppAutoLogCreateLog(__int64 a1, int a2, int a3, ULONG a4)
; imp_WppRecorderLogCreate(__int64 a1, __int64 a2, __int64 a3)
; imp_WppRecorderLogSetIdentifier(__int64 a1, __int64 a2, __int64 a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\ws2ifsl.c ;
; SetSocketProcessReference(__int64 a1, __int64 a2, __int64 a3)
; DispatchCreate(__int64 a1, __int64 a2)
; DispatchReadWrite(__int64 a1, __int64 a2)
; CopyMdlChainToBuffer(__int64 a1, void *a2, unsigned int a3)
; CreateProcessFile(__int64 a1, KPROCESSOR_MODE a2, __int64 a3)
; CreateSocketFile(__int64 a1, KPROCESSOR_MODE a2, __int64 a3)
; DoSocketReadWrite(__int64 a1, __int64 a2)
; DoSocketAfdIoctl(__int64 a1, __int64 a2)
; SetSocketContext(__int64 a1, KPROCESSOR_MODE a2, unsigned __int64 a3, unsigned int a4, __int64 a5, __int64 a6, __int64 a7)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WUDFPf.c ;
; RtlStringCbCopyW(wchar_t *pszDest, size_t cbDest, const wchar_t *pszSrc)
; LpcListenDevice::SetSemaphore(LpcListenDevice *this, void *a2)
; LpcListenDevice::s_CreateInstance(struct LpcDriver *a1, const unsigned __int16 *a2, struct _FILE_OBJECT *a3, struct LpcListenDevice **a4)
; LpcControlDevice::Create(LpcControlDevice *this, PVOID Tag)
; LpcCommContext::s_CreateInstance(struct LpcListenDevice *a1, struct _FILE_OBJECT *a2, struct _KSEMAPHORE *a3, struct LpcCommContext **a4)
; LpcListenDevice::Create(LpcListenDevice *this, PIRP Irp)
; MessageQueues::s_CreateInstance(struct MessageQueues **a1)
; WdfCtorStatus::SetCtorStatus(WdfCtorStatus *this, int a2)
; WdfLpcCorePortKernelInterface::CreatePortSection(WdfLpcCorePortKernelInterface *this, PHANDLE SectionHandle, const unsigned __int16 *a3, void *a4, unsigned __int64 a5, void **SectionHandlea, unsigned __int64 *a7)
; WudfLpcMessage::CopyMessageData(WudfLpcMessage *this, void *a2, __int64 a3, IUMDFUnknownVtbl *a4, unsigned __int8 a5)
; WdfLpcCommPort::CreateSecurityContext(WdfLpcCommPort *this, struct _SECURITY_QUALITY_OF_SERVICE *a2, void *a3, void **a4)
; WdfLpcCorePortKernelInterface::CreateSecurityContext(WdfLpcCorePortKernelInterface *this, void *a2, struct _SECURITY_QUALITY_OF_SERVICE *a3, void *a4, void **a5)
; LpcCommContext::CreateSecurityContext(LpcCommContext *this, struct _ALPC_SECURITY_ATTR *a2, void *a3)
; WudfProbeForReadAndCapture(void *Src, size_t Size, __int64 a3, void *a4, size_t a5)
; WudfCopyToUserBuffer(void *a1, const void *a2, size_t a3)
; WdfLpcCorePortKernelInterface::CreateSectionView(WdfLpcCorePortKernelInterface *this, void *a2, const unsigned __int16 *a3, struct _ALPC_DATA_VIEW_ATTR *a4)
; WudfPeriodicTimerCallbackPacket::s_CreateInstance(struct WudfPeriodicTimerCallbackPacket **a1, void (__stdcall static *a2)(void *), void *a3)
; WdfObjectList<WdfLpcCommPort,WdfLpcCommPortParameters>::CreateNew(__int64 a1, __int64 *a2, __int64 a3)
; LpcDriver::s_CreateInstance(struct _DRIVER_OBJECT *a1, struct _UNICODE_STRING *a2, struct LpcDriver **a3)
; WdfLpcCorePortKernelInterface::s_CreateInstance(struct WdfLpcCorePortKernelInterface **a1, void (__stdcall *a2)(enum WdfDriverStopType, unsigned __int64, const unsigned __int16 *, const char *), const unsigned __int16 *a3, enum WdfDriverStopType a4)
; WudfPeriodicTimer::WudfCreatePeriodicTimer(unsigned int a1, union _IO_OBJECT *a2)
; WdfLpcCommPort::SetContext(WdfLpcCommPort *this, void *a2)
; WdfLpcConnPort::SetContext(__int64 a1, void *a2)
; WdfLpcCommPort::SetContext(__int64 a1, void *a2)
; WdfLpcCorePortKernelInterface::SetInformation(WdfLpcCorePortKernelInterface *this, void *a2, enum _ALPC_PORT_INFORMATION_CLASS a3, void *a4)
; WdfLpcConnPort::SetAccessControl(WdfLpcConnPort *this, void *a2, unsigned __int16 *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win8sys\WUDFRd.c ;
; RdDriver::RdSetCompletionRoutine(struct _DEVICE_OBJECT *a1, struct _IRP *a2, __int32 (__stdcall static *a3)(struct _DEVICE_OBJECT *, struct _IRP *, void *), void *a4)
; RdCtrlDevice::RdSetUnifiedDeviceProperty(RdCtrlDevice *this, struct _IRP *a2)
; RdDevice::_RdSetDeviceInterfacePropertyData(struct _DEVICE_OBJECT *a1, struct RdFdoDevice *a2, struct _RD_DEVICE_INTERFACE_STORE_PARAMETERS *a3, unsigned int a4, const struct _DEVPROPKEY *a5, unsigned __int32 a6, unsigned __int32 a7)
; RdFdoDevice::RdSetPreallocatedPnpTracker(RdFdoDevice *this, struct RdPnpTracker *a2, int a3)
; RdFdoDevice::RdSetPreallocatedPowerTracker(RdFdoDevice *this, struct RdPnpTracker *a2, __int64 a3, enum _POWER_STATE_TYPE a4)
; RdDriver::RdCreateUniqueName(RdDriver *this, const unsigned __int16 *a2)
; WdfCtorStatus::SetCtorStatus(WdfCtorStatus *this, int a2)
; WudfFdoCreateContext::`vector deleting destructor(WdfObject *this, char a2, const unsigned __int16 *a3, enum WdfDriverStopType a4)
; RdFdoDevice::RdCreate(RdFdoDevice *this, struct _IRP *a2)
; RdProbeForReadAndCapture(void *Src, size_t Size, ULONG a3, void *a4, size_t a5)
; RdFdoDevice::CopyIoBuffer(RdFdoDevice *this, size_t Size, enum _WUDF_IRP_COPY_DIRECTION a3, __int64 a4, void *Dst, unsigned __int64 Sizea)
; RdFdoDevice::CreateMessage(RdFdoDevice *this, struct _UNICODE_STRING *a2, struct _IRP *a3, struct _ALPC_SECURITY_ATTR *a4, unsigned __int32 a5)
; WudfFdoCreateContext::WudfFdoCreateContext(__int64 a1, __int64 a2, __int64 a3, __int64 a4, char a5)
; RdCtrlDevice::RdReadWriteCleanup(RdCtrlDevice *this, struct _IRP *a2)
; RdFdoDevice::HostProcessReady(RdFdoDevice *this)
; RdCopyToUserBuffer(__int64 a1, __int64 a2)
; RtlStringCchCopyW(wchar_t *pszDest, size_t cchDest, const wchar_t *pszSrc)
; RdDrvMgrCtrlDevice::RdCreate(RdDrvMgrCtrlDevice *this, struct _IRP *a2)
; RdFdoDevice::RdSetHostProcess(RdFdoDevice *this, struct RdProcess *a2)
; RdCtrlDevice::RdCreate(RdCtrlDevice *this, struct _IRP *a2)
; RdDriver::OpenProcessMessage(RdDriver *this, const unsigned __int16 *a2)
; RdFdoDevice::RdSendOpenProcessMessageToDrvMgr(RdFdoDevice *this)
; RdFdoDevice::LoadDeviceRegistrySettings(RdFdoDevice *this)
; RdFdoDevice::OpenDiagnosticsKey(RdFdoDevice *this)
; RdFdoDevice::ReadMultiStringFromRegistry(RdFdoDevice *this, void *a2, struct _UNICODE_STRING *a3, struct _KEY_VALUE_PARTIAL_INFORMATION **a4)
; RdDevice::RdCreatePnpRegKey(RdDevice *this, struct _DEVICE_OBJECT *a2, ULONG a3, struct _UNICODE_STRING *a4, struct _UNICODE_STRING *a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, unsigned __int32 DesiredAccess, void **a10, unsigned __int32 *a11)
; RdDevice::RdCreateRegistryKey(ULONG this, void *a2, struct _UNICODE_STRING *a3, char a4, ACCESS_MASK DesiredAccess, unsigned __int8 a6, PHANDLE KeyHandle, void **KeyHandlea, unsigned __int32 *a9)
; RdFdoDevice::RdSendCreateDeviceStackMessageToHost(RdFdoDevice *this)
; RdFdoDevice::CreateDeviceStackMessage(RdFdoDevice *this)
; WdfLpcOpen(__int64 a1, __int64 a2, __int64 a3)
; RdProbeForRead(const void *a1, SIZE_T a2, ULONG a3)
; ReadBufferFromHardware(__int64 i, int a2, __int64 a3, unsigned __int8 *a4, unsigned int a5)
; ReadFromHardware(__int64 a1, int a2, __int64 a3, __int64 a4)
; RdInterrupt::DeleteFromFailedCreate(RdInterrupt *this, struct RdFdoDevice *a2)
; RdInterrupt::SetPolicy(RdInterrupt *this, enum _WDF_INTERRUPT_POLICY a2, __int64 a3, struct _GROUP_AFFINITY *a4)
; RdInterrupt::ValidateInterruptStateOnPnpStopOrDoubleStart(RdInterrupt *this)
; RdInterrupt::_CreateAndInit(RdFdoDevice *this, void *a2, struct WUDF_INTERRUPT_CONTEXT__ *a3, enum _CM_SHARE_DISPOSITION a4, struct RdInterrupt **a5)
; RdDevice::RdCreateDevInterfaceRegKey(RdDevice *this, struct _DEVICE_OBJECT *a2, struct RdFdoDevice *a3, struct _UNICODE_STRING *a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int32 DesiredAccess, struct _RD_DEVICE_INTERFACE_STORE_PARAMETERS *a9, unsigned __int32 a10, void **a11, unsigned __int32 *a12)
; RdDevice::RdCreateDriverParametersKey(RdDevice *this, struct RdFdoDevice *a2, struct _UNICODE_STRING *a3, __int64 a4, unsigned __int8 a5, unsigned __int32 a6, void **a7, unsigned __int32 *a8)
; RdDevice::RdCreateLegacyHardwareRegKey@<rax>(RdDevice *this@<rcx>, struct _UNICODE_STRING *a2@<rdx>, struct _UNICODE_STRING *a3@<r8>, unsigned __int32 *a4@<rbx>)
; RdDevice::RdCreateNamedPipeMailslot(RdDevice *this, struct _IRP *a2)
; RdDevice::RdCreateRegKeyPath(RdDevice *this, void *a2, struct _UNICODE_STRING *a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int32 a7, void **a8, unsigned __int32 *a9)
; WdfObjectList<WudfFdoCreateContextStorage,WudfFdoCreateContextStorageParameters>::`scalar deleting destructor(WdfObject *this, void (__stdcall *a2)(enum WdfDriverStopType, unsigned __int64, const unsigned __int16 *, const char *), const unsigned __int16 *a3, enum WdfDriverStopType a4)
; RdFdoDevice::HandleDeviceStopOrDoubleStartForInterrupt(RdFdoDevice *this)
; RdFdoDevice::LoadDiagnosticsThreadPriorityIncrement(RdFdoDevice *this)
; RdFdoDevice::RdDeleteAndFreeAllCreateContexts(RdFdoDevice *this)
; WudfFdoCreateContextStorage::WudfFdoCreateContextStorage(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; WudfFdoCreateContextStorage::`scalar deleting destructor(PVOID P, void (__stdcall *a2)(enum WdfDriverStopType, unsigned __int64, const unsigned __int16 *, const char *), const unsigned __int16 *a3, enum WdfDriverStopType a4)
; WudfFdoCreateContextStorage::AreYouThis(WudfFdoCreateContextStorage *this, struct WudfFdoCreateContextStorageParameters *a2)
; RdFdoDevice::ClearFdoCreateContext(RdFdoDevice *this, struct _FILE_OBJECT *a2, __int64 a3, __int64 a4)
; WdfObjectList<WudfFdoCreateContextStorage,WudfFdoCreateContextStorageParameters>::Find(__int64 a1, __int64 a2, char a3, __int64 a4, __int64 a5)
; RdFdoDevice::GetFdoCreateContext(RdFdoDevice *this, struct _FILE_OBJECT *a2, __int64 a3, __int64 a4)
; RdFdoDevice::RdQuerySetInformation(RdFdoDevice *this, struct _IRP *a2, __int64 a3, __int64 a4)
; RdFdoDevice::RdRead(RdFdoDevice *this, struct _IRP *a2, __int64 a3, __int64 a4)
; RdFdoDevice::ValidateFileObjectAndRetrieveContext(RdFdoDevice *this, struct _IO_STACK_LOCATION *a2, struct WudfFdoCreateContext **a3, __int64 a4)
; RdCtrlDevice::IoctlReadFromHardwareHandler(RdCtrlDevice *this, void *a2, unsigned int a3, void *a4, unsigned __int32 a5)
; RdCtrlDevice::RdCreateAndInitializeInterrupt(RdCtrlDevice *this, struct _IRP *a2)
; RdCtrlDevice::RdCreateRegistryKey(RdCtrlDevice *this, struct _IRP *a2)
; RdCtrlDevice::RdCreateSymbolicLink(RdCtrlDevice *this, struct _IRP *a2)
; RdCtrlDevice::RdCtrlDeviceCreateCompletion(RdCtrlDevice *this, struct _IRP *a2)
; RdCtrlDevice::RdCtrlDeviceCreateCompletion(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; RdCtrlDevice::RdFlushQuerySet(RdCtrlDevice *this, struct _IRP *a2)
; RdCtrlDevice::RdReadWriteCleanupCompletion(struct _DEVICE_OBJECT *a1, struct _IRP *a2, void *a3)
; RdDrvMgrCtrlDevice::RdQuerySetInformation(RdDrvMgrCtrlDevice *this, struct _IRP *a2)
; RdSafeMdl::_CreateAndInitialize(void *a1, unsigned int a2, struct RdSafeMdl **a3)
; RdWmi::CreateSetWmiPowerDataMessage(RdWmi *this)
; RdWmi::RdSetS0Idle(RdWmi *this, char a2)
; RdWmi::RdSetSxWake(RdWmi *this, char a2)
; RdWmi::RdSetWmiDataBlock(PDEVICE_OBJECT DeviceObject, PIRP Irp, unsigned int a3, __int64 a4, unsigned __int32 a5, unsigned __int8 *a6)
; RdWmi::RdSetWmiDataItem(PDEVICE_OBJECT DeviceObject, PIRP Irp, unsigned int a3, __int64 a4, unsigned __int32 a5, unsigned __int32 a6, unsigned __int8 *a7)
; WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject)
; IoDevObjCreateDeviceSecure(__int64 a1, __int64 a2, UNICODE_STRING *a3, ULONG a4, ULONG a5, BOOLEAN a6, __int64 a7, __int64 a8, PDEVICE_OBJECT a9)
; IopDevObjApplyPostCreationSettings(__int64 a1, __int64 a2)
; PiRegStateOpenClassKey(__int64 a1, __int64 a2, int a3, __int64 a4)
; PiRegStateReadStackCreationSettingsFromKey(HANDLE KeyHandle, __int64 a2)
; PpRegStateReadCreateClassCreationSettings(__int64 a1, __int64 a2, __int64 a3)
; PpRegStateUpdateStackCreationSettings(__int64 a1, __int64 a2)
; CmRegUtilCreateUcKey(__int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilCreateWstrKey(__int64 a1, const WCHAR *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7)
; CmRegUtilOpenExistingUcKey(__int64 a1, __int64 a2, ACCESS_MASK a3, __int64 a4)
; CmRegUtilOpenExistingWstrKey(__int64 a1, const WCHAR *a2)
; CmRegUtilUcValueSetUcString(HANDLE KeyHandle, PUNICODE_STRING ValueName, __int64 a3)
; CmRegUtilWstrValueSetWstrString(__int64 a1, __int64 a2, const WCHAR *a3)
D:\Marion\Desktop\EVENTS\Wallstreet\win7sys\acpi.c ;
; ACPIDockFindCorrespondingDock(__int64 a1)
; ACPIDockIrpQueryPower(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpRemoveDevice(PDEVICE_OBJECT DeviceObject, PIRP Irp)
; ACPIDockIsDockDevice(__int64 a1)
; ACPIDockIrpSetPower(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpSetSystemPower(ULONG_PTR BugCheckParameter3, PVOID Context)
; OSConvertDeviceHandleToPNSOBJ(ULONG_PTR a1)
; ACPIAmliDoubleToNameWide(signed __int64 a1, unsigned int a2, char a3)
; ACPIBuildIssueNotifyInvalidateRelationsForDockDevice(__int64 a1, __int64 a2)
; ACPIBuildDockExtension(__int64 a1)
; ACPIBusIrpSetDevicePower(ULONG_PTR a1, __int64 a2)
; ACPIBusIrpSetPower(ULONG_PTR a1, __int64 a2)
; ACPIBusIrpSetSystemPower(PDEVICE_OBJECT DeviceObject, PVOID Context, __int64 a3)
; ACPIBusIrpSetSystemPowerComplete(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PVOID Context, PIO_STATUS_BLOCK IoStatus)
; ACPICMButtonSetPower(PDEVICE_OBJECT DeviceObject, __int64 a2)
; ACPICMLidSetPower(ULONG_PTR a1, __int64 a2)
; ACPICMLidSetPowerCompletion(__int64 a1, int a2, __int64 a3, __int64 a4)
; ACPIDetectDockDevices(__int64 a1, __int64 a2)
; ACPIEcReadWriteCompletion(__int64 a1)
; ACPIFilterIrpSetPower(ULONG_PTR BugCheckParameter3, PIRP Irp)
; ACPIGetConvertToCompatibleIDWide(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToDeviceIDWide(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToDevicePresence(ULONG_PTR BugCheckParameter2, int a2, __int64 a3, int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToHardwareIDWide(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToInstanceIDWide(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToPnpIDWide(__int64 a1, unsigned int a2, __int64 a3, unsigned int a4, __int64 a5, __int64 a6)
; ACPIGetConvertToStringWide(__int64 a1, unsigned int a2, __int64 a3, __int64 a4)
; ACPIInitDosDeviceName(__int64 a1)
; ACPIInternalDecrementIrpReferenceCount(__int64 a1)
; ACPIInternalSetDeviceInterface(struct _DEVICE_OBJECT *a1, const GUID *a2)
; ACPIInternalSetFlags(volatile signed __int64 *_RCX, unsigned __int64 a2)
; OSNotifyCreate(int a1, ULONG_PTR a2)
; OSNotifyCreateDevice(ULONG_PTR BugCheckParameter3)
; OSNotifyCreatePowerResource(__int64 a1)
; OSNotifyCreateProcessor(__int64 a1, unsigned __int64 a2)
; OSNotifyCreateThermalZone(__int64 a1, unsigned __int64 a2)
; DefPortReadAcpiRegister(int a1, unsigned int a2)
; DefRegisterReadAcpiRegister(int a1, unsigned int a2)
; ACPIPccRingDoorbell(char a1, __int64 a2, __int64 a3)
; ReadIoMemRaw(__int64 a1, int a2, int a3)
; ACPIRootIrpSetPower(ULONG_PTR BugCheckParameter3, PIRP Irp)
; ACPITableLoadCallBack(__int64 a1, __int64 a2)
; ACPITableLoadNotifyPnp(__int64 a1)
; ACPITableLoad(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)
; ACPIThermalTempatureRead(__int64 a1, int a2, __int64 a3, __int64 a4)
; ACPIConvertStringDelimitation(__int64 a1)
; ACPISetDeviceWorker(__int64 a1, int a2)
; AMLILoadDDB(char *a1, __int64 a2)
; Simulator_Copy_Arguments(int a1, __int64 a2, __int64 a3)
; CopyObjData(void *a1, const void *a2)
; CopyObjBuffer(void *Dst, size_t Size, __int64 a3)
; RtlStringCchCatNA(char *pszDest, size_t cchDest, const char *pszSrc, size_t cchMaxAppend)
; CreateNameSpaceObject(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)
; LoadDDB(PSLIST_ENTRY ListEntry, __int64 a2, __int64 a3, __int64 *a4)
; LoadFieldUnitDDB(PSLIST_ENTRY ListEntry, signed __int64 a2, __int64 *a3)
; CreateXField(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CreateBitField(__int64 a1, __int64 a2)
; CreateByteField(__int64 a1, __int64 a2)
; CreateWordField(__int64 a1, __int64 a2)
; CreateDWordField(__int64 a1, __int64 a2)
; CreateQWordField(__int64 a1, __int64 a2)
; CreateField(__int64 a1, __int64 a2)
; InsertReadyQueue(__int64 ListEntry, char a2)
; ReadObject(__int64 a1, signed __int64 a2, __int64 a3)
; ReadField(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; ReadFieldObj(__int64 a1, __int64 a2, unsigned int a3)
; ReadSystemMem(void *Src, size_t Size, __int64 a3)
; ReadSystemIO(unsigned int a1, int a2, int a3)
; DequeueAndReadyContext(__int64 a1)
; SyncLoadDDB(PSLIST_ENTRY ListEntry)
; Load(PSLIST_ENTRY ListEntry, __int64 a2)
; ToDecStr(__int64 a1, __int64 a2)
; CopyObject(__int64 a1, __int64 a2)
; IncDec(__int64 a1, __int64 a2)
; ProcessIncDec(__int64 a1, __int64 a2, signed int a3)
; LoadTable(PSLIST_ENTRY ListEntry, __int64 a2)
; ProcessLoadTable(ULONG_PTR a1, __int64 a2, signed int a3)
; ConvertToString(__int64 a1, unsigned int a2, __int64 a3)
; ConvertToInteger(__int64 a1, __int64 a2)
; ConvertToBuffer(__int64 a1, __int64 a2)
; ACPIDockIrpEject(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpQueryCapabilities(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpQueryDeviceRelations(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpQueryID(ULONG_PTR a1, __int64 a2)
; ACPIDockIrpQueryInterface(PVOID Object, PIRP Irp)
; ACPIDockIrpQueryPnpDeviceState(__int64 a1, __int64 a2)
; ACPIDockIrpSetLock(__int64 a1, __int64 a2)
; ACPIDockIrpStartDevice(ULONG_PTR a1, __int64 a2)
; ACPIDockIntfReference(PVOID Object)
; ACPIDockIntfDereference(ULONG_PTR a1)
; ACPIDockIntfSetMode(ULONG_PTR a1, signed int a2)
; ACPIDockIntfUpdateDeparture(ULONG_PTR a1)
; ACPIIrpSetPagableCompletionRoutineAndForward(PDEVICE_OBJECT DeviceObject, PIRP Irp, __int64 a3, __int64 a4, char a5)
; ACPIBusAndFilterIrpSetLock(ULONG_PTR a1, __int64 a2)
; ACPIBusIrpSetLock(ULONG_PTR a1, __int64 a2)
; ACPIFilterIrpSetLock(struct _DEVICE_OBJECT *a1, struct _IRP *a2)
; ACPIInternalSetProximityDomain(__int64 a1)
; ACPIInternalSetSpare(__int64 _RCX)
; ACPILoadAddDynamicDataBlockTable(__int64 a1)
; OSCreateHandle(__int64 a1, HANDLE *a2, UNICODE_STRING *a3)
; OSOpenHandle(HANDLE *a1, __int64 a2)
; OSOpenUnicodeHandle(__int64 a1, __int64 a2, HANDLE *a3)
; OSOpenLargestSubkey(HANDLE KeyHandle, __int64 a2, ULONG a3)
; OSReadRegValue(PCSZ SourceString, void *a2, void *a3, __int64 a4)
; ACPIRegLocalCopyString(__int64 a1, char *a2, unsigned int a3)
; ACPIRegReadAMLRegistryEntry(const void **a1)
; ACPIRegReadEntireAcpiTable(__int64 a1, const void **a2)
; ACPIRegReadEntireSimulatorAcpiTable(void *a1, const void **a2)
; PnpiBiosAddressDoubleToIoDescriptor(ULONG_PTR BugCheckParameter2, __int64 a2, unsigned int a3, char a4)
; PnpiCmResourceToBiosAddressDouble(__int64 a1, __int64 a2)
; IrqLibpSetSciConnectionData(int a1, unsigned int a2, const __m128i *a3, char a4)
; PcisuppSetRoutingInfo(struct _DEVICE_OBJECT *a1, __int64 a2)
; ProcessorCopyData(int a1)
; IcCopyData(int a1)
; IrqArbpSetDeviceProperties(__int64 a1, const void *a2)
; IrqPolicyGetSubKey(PCWSTR SourceString, ULONG CreateOptions, PHANDLE KeyHandle, HANDLE *a4)
D:\Marion\Desktop\EVENTS\Wallstreet\win7sys\acpipmi.c ;
; AcpiPmipIoctlSetConfiguration(__int64 a1, __int64 a2)
D:\Marion\Desktop\EVENTS\Wallstreet\win7sys\adp94xx.c ;
; Cfg_ReadRegistry(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; OsmSetCustomIOStatus(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; CdaSetPTLMapping(__int64 a1, __int64 a2)
; PTLMapReadComplete(__int64 a1)
; CdaSetEngineProperties(void *a1, __int64 a2)
; XConvertRemPktToOSD(__int64 a1, __int64 a2)
; CheckDriveCacheSettings(__int64 a1, __int64 a2, __int64 a3)
; CdaSetPTMap(__int64 a1, __int64 a2, __int16 a3, __int16 a4, char a5)
; R1Read(__int64 a1)
; R10Read(__int64 a1)
; MDT_ReadWriteMetaData(__int64 a1, __int64 a2, __int64 a3)
; DDF_SetPhysicalPTLMapCDAToDDF(unsigned __int16 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, unsigned __int16 a6)
; DDF_ReadMetaDataForGlobalUpdateComplete(__int64 a1)
; DDF_ReadWriteMetaDataForGlobalUpdate(__int64 a1)
; DDF_ReadWrite(__int64 a1, int a2, __int64 a3, __int64 a4)
; DDF_ReadWriteComplete(__int64 a1)
; IVerifySetup(__int64 a1, __int64 a2)
; IVerifyRangeDone(__int64 a1)
; IRebuildSetup(__int64 a1, __int64 a2)
; IRebuildRangeDone(__int64 a1)
; IZeroSetup(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IZeroWriteDone(__int64 a1)
; CheckPointReadComplete(__int64 a1)
; SetDriveCacheComplete(__int64 a1)
; SetDriveCache(__int64 a1, __int64 a2, __int64 a3)
; ReadCapComplete(__int64 a1)
; SetupPollIOD(__int64 a1, unsigned __int8 a2)
; SetupToBuildLocalSysDev(__int64 a1, __int64 a2, __int64 a3)
; CreateAndLinkSysDevice(__int64 a1)
; ReadBootSectorComplete(__int64 a1)
; CreateR0OvrlaySDs(__int64 a1)
; DoZapReservedSector(__int64 a1, __int64 a2)
; RescanZapPartitionSectorDone_InitializationTime(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; LocalUpdateAllReady(__int64 a1, __int64 a2)
; LocalReadMemberReservedSector(__int64 a1, __int64 a2, __int64 a3)
; IssueLocalReadMemberReservedSector(__int64 a1)
; LocalReadMemberReservedSectorComplete(__int64 a1)
; CopySysDevInfoToReservedSectors(__int64 a1, __int16 a2)
; LocalReadToNextMemberReservedSector(__int64 a1)
; RetryLocalReadMemberRSUpdate(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; SetupIOD(__int64 a1, __int16 a2, char a3, int a4, unsigned __int16 a5)
; R0ReadWrite(__int64 a1)
; CreateRecoveryDescriptors(__int64 a1)
; RAIDRecoveryStartRead(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4)
; RAIDRecoveryReadDone(__int64 a1, __int64 a2)
; RAIDRecoveryForceMediumErrorReadLong(__int64 a1, __int64 a2)
; RAIDRecoveryForceMediumErrorDone(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4)
; RAIDRecoveryReassignmentDone(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RAIDCheckRecoveryFunctionDone(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4)
; RAIDReleaseReadIODs(__int64 a1)
; RAIDRecoveryBlockReassignmentReadDone(__int64 a1, __int64 a2, __int64 a3, signed __int64 a4)
; RAIDRecoveryReadTopHalf(__int64 a1, __int64 a2, __int64 a3, unsigned __int16 a4)
; RAIDRecoveryReadTopHalfDone(__int64 a1)
; RAIDRecoveryUpdateBlockDone(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; RAIDRecoveryDone(__int64 a1)
; CreateRSUResources(__int64 a1)
; CreateIODescriptors(__int64 a1)
; CreateOSDescriptors(__int64 a1)
; CreateSpecialIODescriptors(__int64 a1)
; CreateCSMIIODescriptors(__int64 a1)
; SetupGlobalData(__int64 a1)
; *__fastcall SetEntryPoints(__int64 a1))()
; CopyRelativePath(__int64 a1, __int64 a2)
; IOCtlRaidReadCapacity(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; StorageDevicePage1ReadRSDone(__int64 a1)
; IOCtlRaidSetPriority(__int64 a1)
; CopyInquiryFromSysDev(__int64 a1, __int64 a2)
; IZeroRSUpdateDone(__int64 a1)
; PostRetryLocalReadMemberReservedSector(__int64 a1)
; IZeroArrayStateRSUpdateDone(__int64 a1)
; IOCtlDriveCacheSettings(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; StartDriveCacheSetting(__int64 a1)
; GetCurrentCacheSettingsReadDone(__int64 a1)
; IOCtlDriveCacheSettingsDone(__int64 a1)
; WCEMetaDataReadComplete(__int64 a1)
; IOCtlConvertSingleToSpare(__int64 a1)
; SingleDevicePauseDone(__int64 a1)
; SingleDeviceUnPauseDone(__int64 a1)
; RetryConfigureSingleDriveReadMetadata(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
; IOCtlConvertSpareToSingle(__int64 a1)
; DoEnumerateSES2EnclosureDevices(__int64 a1, __int64 a2)
